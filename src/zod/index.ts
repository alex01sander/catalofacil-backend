import { z } from 'zod';
import { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput = Prisma.JsonValue | null | 'JsonNull' | 'DbNull' | Prisma.NullTypes.DbNull | Prisma.NullTypes.JsonNull;

export const transformJsonNull = (v?: NullableJsonInput) => {
  if (!v || v === 'DbNull') return Prisma.DbNull;
  if (v === 'JsonNull') return Prisma.JsonNull;
  return v;
};

export const JsonValueSchema: z.ZodType<Prisma.JsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.literal(null),
    z.record(z.lazy(() => JsonValueSchema.optional())),
    z.array(z.lazy(() => JsonValueSchema)),
  ])
);

export type JsonValueType = z.infer<typeof JsonValueSchema>;

export const NullableJsonValue = z
  .union([JsonValueSchema, z.literal('DbNull'), z.literal('JsonNull')])
  .nullable()
  .transform((v) => transformJsonNull(v));

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>;

export const InputJsonValueSchema: z.ZodType<Prisma.InputJsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.object({ toJSON: z.function(z.tuple([]), z.any()) }),
    z.record(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
    z.array(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
  ])
);

export type InputJsonValueType = z.infer<typeof InputJsonValueSchema>;

// DECIMAL
//------------------------------------------------------

export const DecimalJsLikeSchema: z.ZodType<Prisma.DecimalJsLike> = z.object({
  d: z.array(z.number()),
  e: z.number(),
  s: z.number(),
  toFixed: z.function(z.tuple([]), z.string()),
})

export const DECIMAL_STRING_REGEX = /^(?:-?Infinity|NaN|-?(?:0[bB][01]+(?:\.[01]+)?(?:[pP][-+]?\d+)?|0[oO][0-7]+(?:\.[0-7]+)?(?:[pP][-+]?\d+)?|0[xX][\da-fA-F]+(?:\.[\da-fA-F]+)?(?:[pP][-+]?\d+)?|(?:\d+|\d*\.\d+)(?:[eE][-+]?\d+)?))$/;

export const isValidDecimalInput =
  (v?: null | string | number | Prisma.DecimalJsLike): v is string | number | Prisma.DecimalJsLike => {
    if (v === undefined || v === null) return false;
    return (
      (typeof v === 'object' && 'd' in v && 'e' in v && 's' in v && 'toFixed' in v) ||
      (typeof v === 'string' && DECIMAL_STRING_REGEX.test(v)) ||
      typeof v === 'number'
    )
  };

/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const Audit_log_entriesScalarFieldEnumSchema = z.enum(['instance_id','id','payload','created_at','ip_address']);

export const Flow_stateScalarFieldEnumSchema = z.enum(['id','user_id','auth_code','code_challenge_method','code_challenge','provider_type','provider_access_token','provider_refresh_token','created_at','updated_at','authentication_method','auth_code_issued_at']);

export const IdentitiesScalarFieldEnumSchema = z.enum(['provider_id','user_id','identity_data','provider','last_sign_in_at','created_at','updated_at','email','id']);

export const InstancesScalarFieldEnumSchema = z.enum(['id','uuid','raw_base_config','created_at','updated_at']);

export const Mfa_amr_claimsScalarFieldEnumSchema = z.enum(['session_id','created_at','updated_at','authentication_method','id']);

export const Mfa_challengesScalarFieldEnumSchema = z.enum(['id','factor_id','created_at','verified_at','ip_address','otp_code','web_authn_session_data']);

export const Mfa_factorsScalarFieldEnumSchema = z.enum(['id','user_id','friendly_name','factor_type','status','created_at','updated_at','secret','phone','last_challenged_at','web_authn_credential','web_authn_aaguid']);

export const One_time_tokensScalarFieldEnumSchema = z.enum(['id','user_id','token_type','token_hash','relates_to','created_at','updated_at']);

export const Refresh_tokensScalarFieldEnumSchema = z.enum(['instance_id','id','token','user_id','revoked','created_at','updated_at','parent','session_id']);

export const Saml_providersScalarFieldEnumSchema = z.enum(['id','sso_provider_id','entity_id','metadata_xml','metadata_url','attribute_mapping','created_at','updated_at','name_id_format']);

export const Saml_relay_statesScalarFieldEnumSchema = z.enum(['id','sso_provider_id','request_id','for_email','redirect_to','created_at','updated_at','flow_state_id']);

export const Schema_migrationsScalarFieldEnumSchema = z.enum(['version']);

export const SessionsScalarFieldEnumSchema = z.enum(['id','user_id','created_at','updated_at','factor_id','aal','not_after','refreshed_at','user_agent','ip','tag']);

export const Sso_domainsScalarFieldEnumSchema = z.enum(['id','sso_provider_id','domain','created_at','updated_at']);

export const Sso_providersScalarFieldEnumSchema = z.enum(['id','resource_id','created_at','updated_at']);

export const UsersScalarFieldEnumSchema = z.enum(['instance_id','id','aud','role','email','encrypted_password','email_confirmed_at','invited_at','confirmation_token','confirmation_sent_at','recovery_token','recovery_sent_at','email_change_token_new','email_change','email_change_sent_at','last_sign_in_at','raw_app_meta_data','raw_user_meta_data','is_super_admin','created_at','updated_at','phone','phone_confirmed_at','phone_change','phone_change_token','phone_change_sent_at','confirmed_at','email_change_token_current','email_change_confirm_status','banned_until','reauthentication_token','reauthentication_sent_at','is_sso_user','deleted_at','is_anonymous']);

export const Cash_flowScalarFieldEnumSchema = z.enum(['id','user_id','store_id','type','category','description','amount','date','payment_method','created_at','updated_at']);

export const CategoriesScalarFieldEnumSchema = z.enum(['id','user_id','name','color','image','created_at','updated_at','store_id']);

export const Controller_adminsScalarFieldEnumSchema = z.enum(['id','user_id','email','created_at','updated_at']);

export const Credit_accountsScalarFieldEnumSchema = z.enum(['id','user_id','store_id','customer_name','customer_phone','total_debt','created_at','updated_at','status']);

export const Credit_transactionsScalarFieldEnumSchema = z.enum(['id','credit_account_id','user_id','type','amount','description','date','created_at']);

export const CustomersScalarFieldEnumSchema = z.enum(['id','store_owner_id','name','email','phone','address','created_at','store_id']);

export const Domain_ownersScalarFieldEnumSchema = z.enum(['id','domain','user_id','created_at','updated_at','domain_type']);

export const ExpensesScalarFieldEnumSchema = z.enum(['id','user_id','store_id','name','category','type','amount','due_date','is_recurring','recurring_frequency','status','paid_date','created_at','updated_at']);

export const Order_itemsScalarFieldEnumSchema = z.enum(['id','order_id','product_id','quantity','unit_price','total_price','created_at']);

export const OrdersScalarFieldEnumSchema = z.enum(['id','store_owner_id','customer_id','customer_name','customer_email','customer_phone','total_amount','status','created_at','updated_at','store_id']);

export const Product_costsScalarFieldEnumSchema = z.enum(['id','user_id','store_id','product_name','cost_price','desired_margin','suggested_price','created_at','updated_at']);

export const ProductsScalarFieldEnumSchema = z.enum(['id','user_id','category_id','name','description','price','stock','is_active','image','images','created_at','updated_at','store_id']);

export const ProfilesScalarFieldEnumSchema = z.enum(['id','email','full_name','created_at','updated_at']);

export const SalesScalarFieldEnumSchema = z.enum(['id','user_id','product_name','quantity','unit_price','total_price','sale_date','status','created_at','updated_at','store_id']);

export const Store_settingsScalarFieldEnumSchema = z.enum(['id','user_id','store_name','store_description','mobile_logo','desktop_banner','mobile_banner_color','mobile_banner_image','created_at','updated_at','store_subtitle','instagram_url','whatsapp_number']);

export const StoresScalarFieldEnumSchema = z.enum(['id','name','slug','domain','user_id','description','logo_url','banner_url','whatsapp_number','instagram_url','theme_color','created_at','updated_at']);

export const UserScalarFieldEnumSchema = z.enum(['id','email','password','createdAt']);

export const DomainScalarFieldEnumSchema = z.enum(['id','slug','userId','createdAt']);

export const ProductScalarFieldEnumSchema = z.enum(['id','title','description','price','imageUrl','domainId','createdAt']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const NullableJsonNullValueInputSchema = z.enum(['DbNull','JsonNull',]).transform((value) => value === 'JsonNull' ? Prisma.JsonNull : value === 'DbNull' ? Prisma.DbNull : value);

export const JsonNullValueInputSchema = z.enum(['JsonNull',]).transform((value) => (value === 'JsonNull' ? Prisma.JsonNull : value));

export const QueryModeSchema = z.enum(['default','insensitive']);

export const JsonNullValueFilterSchema = z.enum(['DbNull','JsonNull','AnyNull',]).transform((value) => value === 'JsonNull' ? Prisma.JsonNull : value === 'DbNull' ? Prisma.JsonNull : value === 'AnyNull' ? Prisma.AnyNull : value);

export const NullsOrderSchema = z.enum(['first','last']);

export const aal_levelSchema = z.enum(['aal1','aal2','aal3']);

export type aal_levelType = `${z.infer<typeof aal_levelSchema>}`

export const code_challenge_methodSchema = z.enum(['s256','plain']);

export type code_challenge_methodType = `${z.infer<typeof code_challenge_methodSchema>}`

export const factor_statusSchema = z.enum(['unverified','verified']);

export type factor_statusType = `${z.infer<typeof factor_statusSchema>}`

export const factor_typeSchema = z.enum(['totp','webauthn','phone']);

export type factor_typeType = `${z.infer<typeof factor_typeSchema>}`

export const one_time_token_typeSchema = z.enum(['confirmation_token','reauthentication_token','recovery_token','email_change_token_new','email_change_token_current','phone_change_token']);

export type one_time_token_typeType = `${z.infer<typeof one_time_token_typeSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// AUDIT LOG ENTRIES SCHEMA
/////////////////////////////////////////

/**
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const audit_log_entriesSchema = z.object({
  instance_id: z.string().nullable(),
  id: z.string(),
  payload: JsonValueSchema.nullable(),
  created_at: z.coerce.date().nullable(),
  ip_address: z.string(),
})

export type audit_log_entries = z.infer<typeof audit_log_entriesSchema>

/////////////////////////////////////////
// FLOW STATE SCHEMA
/////////////////////////////////////////

/**
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const flow_stateSchema = z.object({
  code_challenge_method: code_challenge_methodSchema,
  id: z.string(),
  user_id: z.string().nullable(),
  auth_code: z.string(),
  code_challenge: z.string(),
  provider_type: z.string(),
  provider_access_token: z.string().nullable(),
  provider_refresh_token: z.string().nullable(),
  created_at: z.coerce.date().nullable(),
  updated_at: z.coerce.date().nullable(),
  authentication_method: z.string(),
  auth_code_issued_at: z.coerce.date().nullable(),
})

export type flow_state = z.infer<typeof flow_stateSchema>

/////////////////////////////////////////
// IDENTITIES SCHEMA
/////////////////////////////////////////

/**
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const identitiesSchema = z.object({
  provider_id: z.string(),
  user_id: z.string(),
  identity_data: JsonValueSchema,
  provider: z.string(),
  last_sign_in_at: z.coerce.date().nullable(),
  created_at: z.coerce.date().nullable(),
  updated_at: z.coerce.date().nullable(),
  email: z.string().nullable(),
  id: z.string(),
})

export type identities = z.infer<typeof identitiesSchema>

/////////////////////////////////////////
// INSTANCES SCHEMA
/////////////////////////////////////////

/**
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const instancesSchema = z.object({
  id: z.string(),
  uuid: z.string().nullable(),
  raw_base_config: z.string().nullable(),
  created_at: z.coerce.date().nullable(),
  updated_at: z.coerce.date().nullable(),
})

export type instances = z.infer<typeof instancesSchema>

/////////////////////////////////////////
// MFA AMR CLAIMS SCHEMA
/////////////////////////////////////////

/**
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const mfa_amr_claimsSchema = z.object({
  session_id: z.string(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  authentication_method: z.string(),
  id: z.string(),
})

export type mfa_amr_claims = z.infer<typeof mfa_amr_claimsSchema>

/////////////////////////////////////////
// MFA CHALLENGES SCHEMA
/////////////////////////////////////////

/**
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const mfa_challengesSchema = z.object({
  id: z.string(),
  factor_id: z.string(),
  created_at: z.coerce.date(),
  verified_at: z.coerce.date().nullable(),
  ip_address: z.string(),
  otp_code: z.string().nullable(),
  web_authn_session_data: JsonValueSchema.nullable(),
})

export type mfa_challenges = z.infer<typeof mfa_challengesSchema>

/////////////////////////////////////////
// MFA FACTORS SCHEMA
/////////////////////////////////////////

/**
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const mfa_factorsSchema = z.object({
  factor_type: factor_typeSchema,
  status: factor_statusSchema,
  id: z.string(),
  user_id: z.string(),
  friendly_name: z.string().nullable(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  secret: z.string().nullable(),
  phone: z.string().nullable(),
  last_challenged_at: z.coerce.date().nullable(),
  web_authn_credential: JsonValueSchema.nullable(),
  web_authn_aaguid: z.string().nullable(),
})

export type mfa_factors = z.infer<typeof mfa_factorsSchema>

/////////////////////////////////////////
// ONE TIME TOKENS SCHEMA
/////////////////////////////////////////

/**
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const one_time_tokensSchema = z.object({
  token_type: one_time_token_typeSchema,
  id: z.string(),
  user_id: z.string(),
  token_hash: z.string(),
  relates_to: z.string(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
})

export type one_time_tokens = z.infer<typeof one_time_tokensSchema>

/////////////////////////////////////////
// REFRESH TOKENS SCHEMA
/////////////////////////////////////////

/**
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const refresh_tokensSchema = z.object({
  instance_id: z.string().nullable(),
  id: z.bigint(),
  token: z.string().nullable(),
  user_id: z.string().nullable(),
  revoked: z.boolean().nullable(),
  created_at: z.coerce.date().nullable(),
  updated_at: z.coerce.date().nullable(),
  parent: z.string().nullable(),
  session_id: z.string().nullable(),
})

export type refresh_tokens = z.infer<typeof refresh_tokensSchema>

/////////////////////////////////////////
// SAML PROVIDERS SCHEMA
/////////////////////////////////////////

/**
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const saml_providersSchema = z.object({
  id: z.string(),
  sso_provider_id: z.string(),
  entity_id: z.string(),
  metadata_xml: z.string(),
  metadata_url: z.string().nullable(),
  attribute_mapping: JsonValueSchema.nullable(),
  created_at: z.coerce.date().nullable(),
  updated_at: z.coerce.date().nullable(),
  name_id_format: z.string().nullable(),
})

export type saml_providers = z.infer<typeof saml_providersSchema>

/////////////////////////////////////////
// SAML RELAY STATES SCHEMA
/////////////////////////////////////////

/**
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const saml_relay_statesSchema = z.object({
  id: z.string(),
  sso_provider_id: z.string(),
  request_id: z.string(),
  for_email: z.string().nullable(),
  redirect_to: z.string().nullable(),
  created_at: z.coerce.date().nullable(),
  updated_at: z.coerce.date().nullable(),
  flow_state_id: z.string().nullable(),
})

export type saml_relay_states = z.infer<typeof saml_relay_statesSchema>

/////////////////////////////////////////
// SCHEMA MIGRATIONS SCHEMA
/////////////////////////////////////////

/**
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const schema_migrationsSchema = z.object({
  version: z.string(),
})

export type schema_migrations = z.infer<typeof schema_migrationsSchema>

/////////////////////////////////////////
// SESSIONS SCHEMA
/////////////////////////////////////////

/**
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const sessionsSchema = z.object({
  aal: aal_levelSchema.nullable(),
  id: z.string(),
  user_id: z.string(),
  created_at: z.coerce.date().nullable(),
  updated_at: z.coerce.date().nullable(),
  factor_id: z.string().nullable(),
  not_after: z.coerce.date().nullable(),
  refreshed_at: z.coerce.date().nullable(),
  user_agent: z.string().nullable(),
  ip: z.string().nullable(),
  tag: z.string().nullable(),
})

export type sessions = z.infer<typeof sessionsSchema>

/////////////////////////////////////////
// SSO DOMAINS SCHEMA
/////////////////////////////////////////

/**
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 * This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
 */
export const sso_domainsSchema = z.object({
  id: z.string(),
  sso_provider_id: z.string(),
  domain: z.string(),
  created_at: z.coerce.date().nullable(),
  updated_at: z.coerce.date().nullable(),
})

export type sso_domains = z.infer<typeof sso_domainsSchema>

/////////////////////////////////////////
// SSO PROVIDERS SCHEMA
/////////////////////////////////////////

/**
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 * This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
 */
export const sso_providersSchema = z.object({
  id: z.string(),
  resource_id: z.string().nullable(),
  created_at: z.coerce.date().nullable(),
  updated_at: z.coerce.date().nullable(),
})

export type sso_providers = z.infer<typeof sso_providersSchema>

/////////////////////////////////////////
// USERS SCHEMA
/////////////////////////////////////////

/**
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 * This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
 */
export const usersSchema = z.object({
  instance_id: z.string().nullable(),
  id: z.string(),
  aud: z.string().nullable(),
  role: z.string().nullable(),
  email: z.string().nullable(),
  encrypted_password: z.string().nullable(),
  email_confirmed_at: z.coerce.date().nullable(),
  invited_at: z.coerce.date().nullable(),
  confirmation_token: z.string().nullable(),
  confirmation_sent_at: z.coerce.date().nullable(),
  recovery_token: z.string().nullable(),
  recovery_sent_at: z.coerce.date().nullable(),
  email_change_token_new: z.string().nullable(),
  email_change: z.string().nullable(),
  email_change_sent_at: z.coerce.date().nullable(),
  last_sign_in_at: z.coerce.date().nullable(),
  raw_app_meta_data: JsonValueSchema.nullable(),
  raw_user_meta_data: JsonValueSchema.nullable(),
  is_super_admin: z.boolean().nullable(),
  created_at: z.coerce.date().nullable(),
  updated_at: z.coerce.date().nullable(),
  phone: z.string().nullable(),
  phone_confirmed_at: z.coerce.date().nullable(),
  phone_change: z.string().nullable(),
  phone_change_token: z.string().nullable(),
  phone_change_sent_at: z.coerce.date().nullable(),
  confirmed_at: z.coerce.date().nullable(),
  email_change_token_current: z.string().nullable(),
  email_change_confirm_status: z.number().int().nullable(),
  banned_until: z.coerce.date().nullable(),
  reauthentication_token: z.string().nullable(),
  reauthentication_sent_at: z.coerce.date().nullable(),
  is_sso_user: z.boolean(),
  deleted_at: z.coerce.date().nullable(),
  is_anonymous: z.boolean(),
})

export type users = z.infer<typeof usersSchema>

/////////////////////////////////////////
// CASH FLOW SCHEMA
/////////////////////////////////////////

/**
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const cash_flowSchema = z.object({
  id: z.string(),
  user_id: z.string(),
  store_id: z.string().nullable(),
  type: z.string(),
  category: z.string(),
  description: z.string(),
  amount: z.instanceof(Prisma.Decimal, { message: "Field 'amount' must be a Decimal. Location: ['Models', 'cash_flow']"}),
  date: z.coerce.date(),
  payment_method: z.string().nullable(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
})

export type cash_flow = z.infer<typeof cash_flowSchema>

/////////////////////////////////////////
// CATEGORIES SCHEMA
/////////////////////////////////////////

/**
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const categoriesSchema = z.object({
  id: z.string(),
  user_id: z.string(),
  name: z.string(),
  color: z.string().nullable(),
  image: z.string().nullable(),
  created_at: z.coerce.date().nullable(),
  updated_at: z.coerce.date().nullable(),
  store_id: z.string().nullable(),
})

export type categories = z.infer<typeof categoriesSchema>

/////////////////////////////////////////
// CONTROLLER ADMINS SCHEMA
/////////////////////////////////////////

/**
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const controller_adminsSchema = z.object({
  id: z.string(),
  user_id: z.string(),
  email: z.string(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
})

export type controller_admins = z.infer<typeof controller_adminsSchema>

/////////////////////////////////////////
// CREDIT ACCOUNTS SCHEMA
/////////////////////////////////////////

/**
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const credit_accountsSchema = z.object({
  id: z.string(),
  user_id: z.string(),
  store_id: z.string().nullable(),
  customer_name: z.string(),
  customer_phone: z.string().nullable(),
  total_debt: z.instanceof(Prisma.Decimal, { message: "Field 'total_debt' must be a Decimal. Location: ['Models', 'credit_accounts']"}),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  status: z.string(),
})

export type credit_accounts = z.infer<typeof credit_accountsSchema>

/////////////////////////////////////////
// CREDIT TRANSACTIONS SCHEMA
/////////////////////////////////////////

/**
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const credit_transactionsSchema = z.object({
  id: z.string(),
  credit_account_id: z.string(),
  user_id: z.string(),
  type: z.string(),
  amount: z.instanceof(Prisma.Decimal, { message: "Field 'amount' must be a Decimal. Location: ['Models', 'credit_transactions']"}),
  description: z.string().nullable(),
  date: z.coerce.date(),
  created_at: z.coerce.date(),
})

export type credit_transactions = z.infer<typeof credit_transactionsSchema>

/////////////////////////////////////////
// CUSTOMERS SCHEMA
/////////////////////////////////////////

/**
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const customersSchema = z.object({
  id: z.string(),
  store_owner_id: z.string(),
  name: z.string(),
  email: z.string().nullable(),
  phone: z.string().nullable(),
  address: z.string().nullable(),
  created_at: z.coerce.date().nullable(),
  store_id: z.string().nullable(),
})

export type customers = z.infer<typeof customersSchema>

/////////////////////////////////////////
// DOMAIN OWNERS SCHEMA
/////////////////////////////////////////

/**
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const domain_ownersSchema = z.object({
  id: z.string(),
  domain: z.string(),
  user_id: z.string(),
  created_at: z.coerce.date().nullable(),
  updated_at: z.coerce.date().nullable(),
  domain_type: z.string(),
})

export type domain_owners = z.infer<typeof domain_ownersSchema>

/////////////////////////////////////////
// EXPENSES SCHEMA
/////////////////////////////////////////

/**
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const expensesSchema = z.object({
  id: z.string(),
  user_id: z.string(),
  store_id: z.string().nullable(),
  name: z.string(),
  category: z.string(),
  type: z.string(),
  amount: z.instanceof(Prisma.Decimal, { message: "Field 'amount' must be a Decimal. Location: ['Models', 'expenses']"}),
  due_date: z.coerce.date().nullable(),
  is_recurring: z.boolean().nullable(),
  recurring_frequency: z.string().nullable(),
  status: z.string().nullable(),
  paid_date: z.coerce.date().nullable(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
})

export type expenses = z.infer<typeof expensesSchema>

/////////////////////////////////////////
// ORDER ITEMS SCHEMA
/////////////////////////////////////////

/**
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const order_itemsSchema = z.object({
  id: z.string(),
  order_id: z.string(),
  product_id: z.string(),
  quantity: z.number().int(),
  unit_price: z.instanceof(Prisma.Decimal, { message: "Field 'unit_price' must be a Decimal. Location: ['Models', 'order_items']"}),
  total_price: z.instanceof(Prisma.Decimal, { message: "Field 'total_price' must be a Decimal. Location: ['Models', 'order_items']"}),
  created_at: z.coerce.date().nullable(),
})

export type order_items = z.infer<typeof order_itemsSchema>

/////////////////////////////////////////
// ORDERS SCHEMA
/////////////////////////////////////////

/**
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const ordersSchema = z.object({
  id: z.string(),
  store_owner_id: z.string(),
  customer_id: z.string().nullable(),
  customer_name: z.string(),
  customer_email: z.string().nullable(),
  customer_phone: z.string().nullable(),
  total_amount: z.instanceof(Prisma.Decimal, { message: "Field 'total_amount' must be a Decimal. Location: ['Models', 'orders']"}),
  status: z.string().nullable(),
  created_at: z.coerce.date().nullable(),
  updated_at: z.coerce.date().nullable(),
  store_id: z.string().nullable(),
})

export type orders = z.infer<typeof ordersSchema>

/////////////////////////////////////////
// PRODUCT COSTS SCHEMA
/////////////////////////////////////////

/**
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const product_costsSchema = z.object({
  id: z.string(),
  user_id: z.string(),
  store_id: z.string().nullable(),
  product_name: z.string(),
  cost_price: z.instanceof(Prisma.Decimal, { message: "Field 'cost_price' must be a Decimal. Location: ['Models', 'product_costs']"}),
  desired_margin: z.instanceof(Prisma.Decimal, { message: "Field 'desired_margin' must be a Decimal. Location: ['Models', 'product_costs']"}),
  suggested_price: z.instanceof(Prisma.Decimal, { message: "Field 'suggested_price' must be a Decimal. Location: ['Models', 'product_costs']"}),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
})

export type product_costs = z.infer<typeof product_costsSchema>

/////////////////////////////////////////
// PRODUCTS SCHEMA
/////////////////////////////////////////

/**
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const productsSchema = z.object({
  id: z.string(),
  user_id: z.string(),
  category_id: z.string().nullable(),
  name: z.string(),
  description: z.string().nullable(),
  price: z.instanceof(Prisma.Decimal, { message: "Field 'price' must be a Decimal. Location: ['Models', 'products']"}),
  stock: z.number().int(),
  is_active: z.boolean().nullable(),
  image: z.string().nullable(),
  images: z.string().array(),
  created_at: z.coerce.date().nullable(),
  updated_at: z.coerce.date().nullable(),
  store_id: z.string().nullable(),
})

export type products = z.infer<typeof productsSchema>

/////////////////////////////////////////
// PROFILES SCHEMA
/////////////////////////////////////////

/**
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const profilesSchema = z.object({
  id: z.string(),
  email: z.string(),
  full_name: z.string().nullable(),
  created_at: z.coerce.date().nullable(),
  updated_at: z.coerce.date().nullable(),
})

export type profiles = z.infer<typeof profilesSchema>

/////////////////////////////////////////
// SALES SCHEMA
/////////////////////////////////////////

/**
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const salesSchema = z.object({
  id: z.string(),
  user_id: z.string(),
  product_name: z.string(),
  quantity: z.number().int(),
  unit_price: z.instanceof(Prisma.Decimal, { message: "Field 'unit_price' must be a Decimal. Location: ['Models', 'sales']"}),
  total_price: z.instanceof(Prisma.Decimal, { message: "Field 'total_price' must be a Decimal. Location: ['Models', 'sales']"}),
  sale_date: z.coerce.date(),
  status: z.string(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  store_id: z.string().nullable(),
})

export type sales = z.infer<typeof salesSchema>

/////////////////////////////////////////
// STORE SETTINGS SCHEMA
/////////////////////////////////////////

/**
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const store_settingsSchema = z.object({
  id: z.string(),
  user_id: z.string(),
  store_name: z.string(),
  store_description: z.string().nullable(),
  mobile_logo: z.string().nullable(),
  desktop_banner: z.string().nullable(),
  mobile_banner_color: z.string().nullable(),
  mobile_banner_image: z.string().nullable(),
  created_at: z.coerce.date().nullable(),
  updated_at: z.coerce.date().nullable(),
  store_subtitle: z.string().nullable(),
  instagram_url: z.string().nullable(),
  whatsapp_number: z.string().nullable(),
})

export type store_settings = z.infer<typeof store_settingsSchema>

/////////////////////////////////////////
// STORES SCHEMA
/////////////////////////////////////////

/**
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export const storesSchema = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  domain: z.string().nullable(),
  user_id: z.string(),
  description: z.string().nullable(),
  logo_url: z.string().nullable(),
  banner_url: z.string().nullable(),
  whatsapp_number: z.string().nullable(),
  instagram_url: z.string().nullable(),
  theme_color: z.string().nullable(),
  created_at: z.coerce.date().nullable(),
  updated_at: z.coerce.date().nullable(),
})

export type stores = z.infer<typeof storesSchema>

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  id: z.string().uuid(),
  email: z.string(),
  password: z.string(),
  createdAt: z.coerce.date(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// DOMAIN SCHEMA
/////////////////////////////////////////

export const DomainSchema = z.object({
  id: z.string().uuid(),
  slug: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date(),
})

export type Domain = z.infer<typeof DomainSchema>

/////////////////////////////////////////
// PRODUCT SCHEMA
/////////////////////////////////////////

export const ProductSchema = z.object({
  id: z.string().uuid(),
  title: z.string(),
  description: z.string(),
  price: z.number(),
  imageUrl: z.string(),
  domainId: z.string(),
  createdAt: z.coerce.date(),
})

export type Product = z.infer<typeof ProductSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// AUDIT LOG ENTRIES
//------------------------------------------------------

export const audit_log_entriesSelectSchema: z.ZodType<Prisma.audit_log_entriesSelect> = z.object({
  instance_id: z.boolean().optional(),
  id: z.boolean().optional(),
  payload: z.boolean().optional(),
  created_at: z.boolean().optional(),
  ip_address: z.boolean().optional(),
}).strict()

// FLOW STATE
//------------------------------------------------------

export const flow_stateIncludeSchema: z.ZodType<Prisma.flow_stateInclude> = z.object({
  saml_relay_states: z.union([z.boolean(),z.lazy(() => saml_relay_statesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Flow_stateCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const flow_stateArgsSchema: z.ZodType<Prisma.flow_stateDefaultArgs> = z.object({
  select: z.lazy(() => flow_stateSelectSchema).optional(),
  include: z.lazy(() => flow_stateIncludeSchema).optional(),
}).strict();

export const flow_stateCountOutputTypeArgsSchema: z.ZodType<Prisma.flow_stateCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => flow_stateCountOutputTypeSelectSchema).nullish(),
}).strict();

export const flow_stateCountOutputTypeSelectSchema: z.ZodType<Prisma.flow_stateCountOutputTypeSelect> = z.object({
  saml_relay_states: z.boolean().optional(),
}).strict();

export const flow_stateSelectSchema: z.ZodType<Prisma.flow_stateSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  auth_code: z.boolean().optional(),
  code_challenge_method: z.boolean().optional(),
  code_challenge: z.boolean().optional(),
  provider_type: z.boolean().optional(),
  provider_access_token: z.boolean().optional(),
  provider_refresh_token: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  authentication_method: z.boolean().optional(),
  auth_code_issued_at: z.boolean().optional(),
  saml_relay_states: z.union([z.boolean(),z.lazy(() => saml_relay_statesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Flow_stateCountOutputTypeArgsSchema)]).optional(),
}).strict()

// IDENTITIES
//------------------------------------------------------

export const identitiesIncludeSchema: z.ZodType<Prisma.identitiesInclude> = z.object({
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

export const identitiesArgsSchema: z.ZodType<Prisma.identitiesDefaultArgs> = z.object({
  select: z.lazy(() => identitiesSelectSchema).optional(),
  include: z.lazy(() => identitiesIncludeSchema).optional(),
}).strict();

export const identitiesSelectSchema: z.ZodType<Prisma.identitiesSelect> = z.object({
  provider_id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  identity_data: z.boolean().optional(),
  provider: z.boolean().optional(),
  last_sign_in_at: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  email: z.boolean().optional(),
  id: z.boolean().optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

// INSTANCES
//------------------------------------------------------

export const instancesSelectSchema: z.ZodType<Prisma.instancesSelect> = z.object({
  id: z.boolean().optional(),
  uuid: z.boolean().optional(),
  raw_base_config: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
}).strict()

// MFA AMR CLAIMS
//------------------------------------------------------

export const mfa_amr_claimsIncludeSchema: z.ZodType<Prisma.mfa_amr_claimsInclude> = z.object({
  sessions: z.union([z.boolean(),z.lazy(() => sessionsArgsSchema)]).optional(),
}).strict()

export const mfa_amr_claimsArgsSchema: z.ZodType<Prisma.mfa_amr_claimsDefaultArgs> = z.object({
  select: z.lazy(() => mfa_amr_claimsSelectSchema).optional(),
  include: z.lazy(() => mfa_amr_claimsIncludeSchema).optional(),
}).strict();

export const mfa_amr_claimsSelectSchema: z.ZodType<Prisma.mfa_amr_claimsSelect> = z.object({
  session_id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  authentication_method: z.boolean().optional(),
  id: z.boolean().optional(),
  sessions: z.union([z.boolean(),z.lazy(() => sessionsArgsSchema)]).optional(),
}).strict()

// MFA CHALLENGES
//------------------------------------------------------

export const mfa_challengesIncludeSchema: z.ZodType<Prisma.mfa_challengesInclude> = z.object({
  mfa_factors: z.union([z.boolean(),z.lazy(() => mfa_factorsArgsSchema)]).optional(),
}).strict()

export const mfa_challengesArgsSchema: z.ZodType<Prisma.mfa_challengesDefaultArgs> = z.object({
  select: z.lazy(() => mfa_challengesSelectSchema).optional(),
  include: z.lazy(() => mfa_challengesIncludeSchema).optional(),
}).strict();

export const mfa_challengesSelectSchema: z.ZodType<Prisma.mfa_challengesSelect> = z.object({
  id: z.boolean().optional(),
  factor_id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  verified_at: z.boolean().optional(),
  ip_address: z.boolean().optional(),
  otp_code: z.boolean().optional(),
  web_authn_session_data: z.boolean().optional(),
  mfa_factors: z.union([z.boolean(),z.lazy(() => mfa_factorsArgsSchema)]).optional(),
}).strict()

// MFA FACTORS
//------------------------------------------------------

export const mfa_factorsIncludeSchema: z.ZodType<Prisma.mfa_factorsInclude> = z.object({
  mfa_challenges: z.union([z.boolean(),z.lazy(() => mfa_challengesFindManyArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Mfa_factorsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const mfa_factorsArgsSchema: z.ZodType<Prisma.mfa_factorsDefaultArgs> = z.object({
  select: z.lazy(() => mfa_factorsSelectSchema).optional(),
  include: z.lazy(() => mfa_factorsIncludeSchema).optional(),
}).strict();

export const mfa_factorsCountOutputTypeArgsSchema: z.ZodType<Prisma.mfa_factorsCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => mfa_factorsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const mfa_factorsCountOutputTypeSelectSchema: z.ZodType<Prisma.mfa_factorsCountOutputTypeSelect> = z.object({
  mfa_challenges: z.boolean().optional(),
}).strict();

export const mfa_factorsSelectSchema: z.ZodType<Prisma.mfa_factorsSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  friendly_name: z.boolean().optional(),
  factor_type: z.boolean().optional(),
  status: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  secret: z.boolean().optional(),
  phone: z.boolean().optional(),
  last_challenged_at: z.boolean().optional(),
  web_authn_credential: z.boolean().optional(),
  web_authn_aaguid: z.boolean().optional(),
  mfa_challenges: z.union([z.boolean(),z.lazy(() => mfa_challengesFindManyArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Mfa_factorsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ONE TIME TOKENS
//------------------------------------------------------

export const one_time_tokensIncludeSchema: z.ZodType<Prisma.one_time_tokensInclude> = z.object({
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

export const one_time_tokensArgsSchema: z.ZodType<Prisma.one_time_tokensDefaultArgs> = z.object({
  select: z.lazy(() => one_time_tokensSelectSchema).optional(),
  include: z.lazy(() => one_time_tokensIncludeSchema).optional(),
}).strict();

export const one_time_tokensSelectSchema: z.ZodType<Prisma.one_time_tokensSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  token_type: z.boolean().optional(),
  token_hash: z.boolean().optional(),
  relates_to: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

// REFRESH TOKENS
//------------------------------------------------------

export const refresh_tokensIncludeSchema: z.ZodType<Prisma.refresh_tokensInclude> = z.object({
  sessions: z.union([z.boolean(),z.lazy(() => sessionsArgsSchema)]).optional(),
}).strict()

export const refresh_tokensArgsSchema: z.ZodType<Prisma.refresh_tokensDefaultArgs> = z.object({
  select: z.lazy(() => refresh_tokensSelectSchema).optional(),
  include: z.lazy(() => refresh_tokensIncludeSchema).optional(),
}).strict();

export const refresh_tokensSelectSchema: z.ZodType<Prisma.refresh_tokensSelect> = z.object({
  instance_id: z.boolean().optional(),
  id: z.boolean().optional(),
  token: z.boolean().optional(),
  user_id: z.boolean().optional(),
  revoked: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  parent: z.boolean().optional(),
  session_id: z.boolean().optional(),
  sessions: z.union([z.boolean(),z.lazy(() => sessionsArgsSchema)]).optional(),
}).strict()

// SAML PROVIDERS
//------------------------------------------------------

export const saml_providersIncludeSchema: z.ZodType<Prisma.saml_providersInclude> = z.object({
  sso_providers: z.union([z.boolean(),z.lazy(() => sso_providersArgsSchema)]).optional(),
}).strict()

export const saml_providersArgsSchema: z.ZodType<Prisma.saml_providersDefaultArgs> = z.object({
  select: z.lazy(() => saml_providersSelectSchema).optional(),
  include: z.lazy(() => saml_providersIncludeSchema).optional(),
}).strict();

export const saml_providersSelectSchema: z.ZodType<Prisma.saml_providersSelect> = z.object({
  id: z.boolean().optional(),
  sso_provider_id: z.boolean().optional(),
  entity_id: z.boolean().optional(),
  metadata_xml: z.boolean().optional(),
  metadata_url: z.boolean().optional(),
  attribute_mapping: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  name_id_format: z.boolean().optional(),
  sso_providers: z.union([z.boolean(),z.lazy(() => sso_providersArgsSchema)]).optional(),
}).strict()

// SAML RELAY STATES
//------------------------------------------------------

export const saml_relay_statesIncludeSchema: z.ZodType<Prisma.saml_relay_statesInclude> = z.object({
  flow_state: z.union([z.boolean(),z.lazy(() => flow_stateArgsSchema)]).optional(),
  sso_providers: z.union([z.boolean(),z.lazy(() => sso_providersArgsSchema)]).optional(),
}).strict()

export const saml_relay_statesArgsSchema: z.ZodType<Prisma.saml_relay_statesDefaultArgs> = z.object({
  select: z.lazy(() => saml_relay_statesSelectSchema).optional(),
  include: z.lazy(() => saml_relay_statesIncludeSchema).optional(),
}).strict();

export const saml_relay_statesSelectSchema: z.ZodType<Prisma.saml_relay_statesSelect> = z.object({
  id: z.boolean().optional(),
  sso_provider_id: z.boolean().optional(),
  request_id: z.boolean().optional(),
  for_email: z.boolean().optional(),
  redirect_to: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  flow_state_id: z.boolean().optional(),
  flow_state: z.union([z.boolean(),z.lazy(() => flow_stateArgsSchema)]).optional(),
  sso_providers: z.union([z.boolean(),z.lazy(() => sso_providersArgsSchema)]).optional(),
}).strict()

// SCHEMA MIGRATIONS
//------------------------------------------------------

export const schema_migrationsSelectSchema: z.ZodType<Prisma.schema_migrationsSelect> = z.object({
  version: z.boolean().optional(),
}).strict()

// SESSIONS
//------------------------------------------------------

export const sessionsIncludeSchema: z.ZodType<Prisma.sessionsInclude> = z.object({
  mfa_amr_claims: z.union([z.boolean(),z.lazy(() => mfa_amr_claimsFindManyArgsSchema)]).optional(),
  refresh_tokens: z.union([z.boolean(),z.lazy(() => refresh_tokensFindManyArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SessionsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const sessionsArgsSchema: z.ZodType<Prisma.sessionsDefaultArgs> = z.object({
  select: z.lazy(() => sessionsSelectSchema).optional(),
  include: z.lazy(() => sessionsIncludeSchema).optional(),
}).strict();

export const sessionsCountOutputTypeArgsSchema: z.ZodType<Prisma.sessionsCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => sessionsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const sessionsCountOutputTypeSelectSchema: z.ZodType<Prisma.sessionsCountOutputTypeSelect> = z.object({
  mfa_amr_claims: z.boolean().optional(),
  refresh_tokens: z.boolean().optional(),
}).strict();

export const sessionsSelectSchema: z.ZodType<Prisma.sessionsSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  factor_id: z.boolean().optional(),
  aal: z.boolean().optional(),
  not_after: z.boolean().optional(),
  refreshed_at: z.boolean().optional(),
  user_agent: z.boolean().optional(),
  ip: z.boolean().optional(),
  tag: z.boolean().optional(),
  mfa_amr_claims: z.union([z.boolean(),z.lazy(() => mfa_amr_claimsFindManyArgsSchema)]).optional(),
  refresh_tokens: z.union([z.boolean(),z.lazy(() => refresh_tokensFindManyArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SessionsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SSO DOMAINS
//------------------------------------------------------

export const sso_domainsIncludeSchema: z.ZodType<Prisma.sso_domainsInclude> = z.object({
  sso_providers: z.union([z.boolean(),z.lazy(() => sso_providersArgsSchema)]).optional(),
}).strict()

export const sso_domainsArgsSchema: z.ZodType<Prisma.sso_domainsDefaultArgs> = z.object({
  select: z.lazy(() => sso_domainsSelectSchema).optional(),
  include: z.lazy(() => sso_domainsIncludeSchema).optional(),
}).strict();

export const sso_domainsSelectSchema: z.ZodType<Prisma.sso_domainsSelect> = z.object({
  id: z.boolean().optional(),
  sso_provider_id: z.boolean().optional(),
  domain: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  sso_providers: z.union([z.boolean(),z.lazy(() => sso_providersArgsSchema)]).optional(),
}).strict()

// SSO PROVIDERS
//------------------------------------------------------

export const sso_providersIncludeSchema: z.ZodType<Prisma.sso_providersInclude> = z.object({
  saml_providers: z.union([z.boolean(),z.lazy(() => saml_providersFindManyArgsSchema)]).optional(),
  saml_relay_states: z.union([z.boolean(),z.lazy(() => saml_relay_statesFindManyArgsSchema)]).optional(),
  sso_domains: z.union([z.boolean(),z.lazy(() => sso_domainsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Sso_providersCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const sso_providersArgsSchema: z.ZodType<Prisma.sso_providersDefaultArgs> = z.object({
  select: z.lazy(() => sso_providersSelectSchema).optional(),
  include: z.lazy(() => sso_providersIncludeSchema).optional(),
}).strict();

export const sso_providersCountOutputTypeArgsSchema: z.ZodType<Prisma.sso_providersCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => sso_providersCountOutputTypeSelectSchema).nullish(),
}).strict();

export const sso_providersCountOutputTypeSelectSchema: z.ZodType<Prisma.sso_providersCountOutputTypeSelect> = z.object({
  saml_providers: z.boolean().optional(),
  saml_relay_states: z.boolean().optional(),
  sso_domains: z.boolean().optional(),
}).strict();

export const sso_providersSelectSchema: z.ZodType<Prisma.sso_providersSelect> = z.object({
  id: z.boolean().optional(),
  resource_id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  saml_providers: z.union([z.boolean(),z.lazy(() => saml_providersFindManyArgsSchema)]).optional(),
  saml_relay_states: z.union([z.boolean(),z.lazy(() => saml_relay_statesFindManyArgsSchema)]).optional(),
  sso_domains: z.union([z.boolean(),z.lazy(() => sso_domainsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Sso_providersCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USERS
//------------------------------------------------------

export const usersIncludeSchema: z.ZodType<Prisma.usersInclude> = z.object({
  identities: z.union([z.boolean(),z.lazy(() => identitiesFindManyArgsSchema)]).optional(),
  mfa_factors: z.union([z.boolean(),z.lazy(() => mfa_factorsFindManyArgsSchema)]).optional(),
  one_time_tokens: z.union([z.boolean(),z.lazy(() => one_time_tokensFindManyArgsSchema)]).optional(),
  sessions: z.union([z.boolean(),z.lazy(() => sessionsFindManyArgsSchema)]).optional(),
  categories: z.union([z.boolean(),z.lazy(() => categoriesFindManyArgsSchema)]).optional(),
  controller_admins: z.union([z.boolean(),z.lazy(() => controller_adminsArgsSchema)]).optional(),
  customers: z.union([z.boolean(),z.lazy(() => customersFindManyArgsSchema)]).optional(),
  domain_owners: z.union([z.boolean(),z.lazy(() => domain_ownersFindManyArgsSchema)]).optional(),
  orders: z.union([z.boolean(),z.lazy(() => ordersFindManyArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => productsFindManyArgsSchema)]).optional(),
  profiles: z.union([z.boolean(),z.lazy(() => profilesArgsSchema)]).optional(),
  store_settings: z.union([z.boolean(),z.lazy(() => store_settingsArgsSchema)]).optional(),
  stores: z.union([z.boolean(),z.lazy(() => storesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UsersCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const usersArgsSchema: z.ZodType<Prisma.usersDefaultArgs> = z.object({
  select: z.lazy(() => usersSelectSchema).optional(),
  include: z.lazy(() => usersIncludeSchema).optional(),
}).strict();

export const usersCountOutputTypeArgsSchema: z.ZodType<Prisma.usersCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => usersCountOutputTypeSelectSchema).nullish(),
}).strict();

export const usersCountOutputTypeSelectSchema: z.ZodType<Prisma.usersCountOutputTypeSelect> = z.object({
  identities: z.boolean().optional(),
  mfa_factors: z.boolean().optional(),
  one_time_tokens: z.boolean().optional(),
  sessions: z.boolean().optional(),
  categories: z.boolean().optional(),
  customers: z.boolean().optional(),
  domain_owners: z.boolean().optional(),
  orders: z.boolean().optional(),
  products: z.boolean().optional(),
  stores: z.boolean().optional(),
}).strict();

export const usersSelectSchema: z.ZodType<Prisma.usersSelect> = z.object({
  instance_id: z.boolean().optional(),
  id: z.boolean().optional(),
  aud: z.boolean().optional(),
  role: z.boolean().optional(),
  email: z.boolean().optional(),
  encrypted_password: z.boolean().optional(),
  email_confirmed_at: z.boolean().optional(),
  invited_at: z.boolean().optional(),
  confirmation_token: z.boolean().optional(),
  confirmation_sent_at: z.boolean().optional(),
  recovery_token: z.boolean().optional(),
  recovery_sent_at: z.boolean().optional(),
  email_change_token_new: z.boolean().optional(),
  email_change: z.boolean().optional(),
  email_change_sent_at: z.boolean().optional(),
  last_sign_in_at: z.boolean().optional(),
  raw_app_meta_data: z.boolean().optional(),
  raw_user_meta_data: z.boolean().optional(),
  is_super_admin: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  phone: z.boolean().optional(),
  phone_confirmed_at: z.boolean().optional(),
  phone_change: z.boolean().optional(),
  phone_change_token: z.boolean().optional(),
  phone_change_sent_at: z.boolean().optional(),
  confirmed_at: z.boolean().optional(),
  email_change_token_current: z.boolean().optional(),
  email_change_confirm_status: z.boolean().optional(),
  banned_until: z.boolean().optional(),
  reauthentication_token: z.boolean().optional(),
  reauthentication_sent_at: z.boolean().optional(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  is_anonymous: z.boolean().optional(),
  identities: z.union([z.boolean(),z.lazy(() => identitiesFindManyArgsSchema)]).optional(),
  mfa_factors: z.union([z.boolean(),z.lazy(() => mfa_factorsFindManyArgsSchema)]).optional(),
  one_time_tokens: z.union([z.boolean(),z.lazy(() => one_time_tokensFindManyArgsSchema)]).optional(),
  sessions: z.union([z.boolean(),z.lazy(() => sessionsFindManyArgsSchema)]).optional(),
  categories: z.union([z.boolean(),z.lazy(() => categoriesFindManyArgsSchema)]).optional(),
  controller_admins: z.union([z.boolean(),z.lazy(() => controller_adminsArgsSchema)]).optional(),
  customers: z.union([z.boolean(),z.lazy(() => customersFindManyArgsSchema)]).optional(),
  domain_owners: z.union([z.boolean(),z.lazy(() => domain_ownersFindManyArgsSchema)]).optional(),
  orders: z.union([z.boolean(),z.lazy(() => ordersFindManyArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => productsFindManyArgsSchema)]).optional(),
  profiles: z.union([z.boolean(),z.lazy(() => profilesArgsSchema)]).optional(),
  store_settings: z.union([z.boolean(),z.lazy(() => store_settingsArgsSchema)]).optional(),
  stores: z.union([z.boolean(),z.lazy(() => storesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UsersCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CASH FLOW
//------------------------------------------------------

export const cash_flowSelectSchema: z.ZodType<Prisma.cash_flowSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  store_id: z.boolean().optional(),
  type: z.boolean().optional(),
  category: z.boolean().optional(),
  description: z.boolean().optional(),
  amount: z.boolean().optional(),
  date: z.boolean().optional(),
  payment_method: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
}).strict()

// CATEGORIES
//------------------------------------------------------

export const categoriesIncludeSchema: z.ZodType<Prisma.categoriesInclude> = z.object({
  stores: z.union([z.boolean(),z.lazy(() => storesArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => productsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CategoriesCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const categoriesArgsSchema: z.ZodType<Prisma.categoriesDefaultArgs> = z.object({
  select: z.lazy(() => categoriesSelectSchema).optional(),
  include: z.lazy(() => categoriesIncludeSchema).optional(),
}).strict();

export const categoriesCountOutputTypeArgsSchema: z.ZodType<Prisma.categoriesCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => categoriesCountOutputTypeSelectSchema).nullish(),
}).strict();

export const categoriesCountOutputTypeSelectSchema: z.ZodType<Prisma.categoriesCountOutputTypeSelect> = z.object({
  products: z.boolean().optional(),
}).strict();

export const categoriesSelectSchema: z.ZodType<Prisma.categoriesSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  name: z.boolean().optional(),
  color: z.boolean().optional(),
  image: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  store_id: z.boolean().optional(),
  stores: z.union([z.boolean(),z.lazy(() => storesArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => productsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CategoriesCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CONTROLLER ADMINS
//------------------------------------------------------

export const controller_adminsIncludeSchema: z.ZodType<Prisma.controller_adminsInclude> = z.object({
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

export const controller_adminsArgsSchema: z.ZodType<Prisma.controller_adminsDefaultArgs> = z.object({
  select: z.lazy(() => controller_adminsSelectSchema).optional(),
  include: z.lazy(() => controller_adminsIncludeSchema).optional(),
}).strict();

export const controller_adminsSelectSchema: z.ZodType<Prisma.controller_adminsSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  email: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

// CREDIT ACCOUNTS
//------------------------------------------------------

export const credit_accountsIncludeSchema: z.ZodType<Prisma.credit_accountsInclude> = z.object({
  credit_transactions: z.union([z.boolean(),z.lazy(() => credit_transactionsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Credit_accountsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const credit_accountsArgsSchema: z.ZodType<Prisma.credit_accountsDefaultArgs> = z.object({
  select: z.lazy(() => credit_accountsSelectSchema).optional(),
  include: z.lazy(() => credit_accountsIncludeSchema).optional(),
}).strict();

export const credit_accountsCountOutputTypeArgsSchema: z.ZodType<Prisma.credit_accountsCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => credit_accountsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const credit_accountsCountOutputTypeSelectSchema: z.ZodType<Prisma.credit_accountsCountOutputTypeSelect> = z.object({
  credit_transactions: z.boolean().optional(),
}).strict();

export const credit_accountsSelectSchema: z.ZodType<Prisma.credit_accountsSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  store_id: z.boolean().optional(),
  customer_name: z.boolean().optional(),
  customer_phone: z.boolean().optional(),
  total_debt: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  status: z.boolean().optional(),
  credit_transactions: z.union([z.boolean(),z.lazy(() => credit_transactionsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Credit_accountsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CREDIT TRANSACTIONS
//------------------------------------------------------

export const credit_transactionsIncludeSchema: z.ZodType<Prisma.credit_transactionsInclude> = z.object({
  credit_accounts: z.union([z.boolean(),z.lazy(() => credit_accountsArgsSchema)]).optional(),
}).strict()

export const credit_transactionsArgsSchema: z.ZodType<Prisma.credit_transactionsDefaultArgs> = z.object({
  select: z.lazy(() => credit_transactionsSelectSchema).optional(),
  include: z.lazy(() => credit_transactionsIncludeSchema).optional(),
}).strict();

export const credit_transactionsSelectSchema: z.ZodType<Prisma.credit_transactionsSelect> = z.object({
  id: z.boolean().optional(),
  credit_account_id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  type: z.boolean().optional(),
  amount: z.boolean().optional(),
  description: z.boolean().optional(),
  date: z.boolean().optional(),
  created_at: z.boolean().optional(),
  credit_accounts: z.union([z.boolean(),z.lazy(() => credit_accountsArgsSchema)]).optional(),
}).strict()

// CUSTOMERS
//------------------------------------------------------

export const customersIncludeSchema: z.ZodType<Prisma.customersInclude> = z.object({
  stores: z.union([z.boolean(),z.lazy(() => storesArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  orders: z.union([z.boolean(),z.lazy(() => ordersFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CustomersCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const customersArgsSchema: z.ZodType<Prisma.customersDefaultArgs> = z.object({
  select: z.lazy(() => customersSelectSchema).optional(),
  include: z.lazy(() => customersIncludeSchema).optional(),
}).strict();

export const customersCountOutputTypeArgsSchema: z.ZodType<Prisma.customersCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => customersCountOutputTypeSelectSchema).nullish(),
}).strict();

export const customersCountOutputTypeSelectSchema: z.ZodType<Prisma.customersCountOutputTypeSelect> = z.object({
  orders: z.boolean().optional(),
}).strict();

export const customersSelectSchema: z.ZodType<Prisma.customersSelect> = z.object({
  id: z.boolean().optional(),
  store_owner_id: z.boolean().optional(),
  name: z.boolean().optional(),
  email: z.boolean().optional(),
  phone: z.boolean().optional(),
  address: z.boolean().optional(),
  created_at: z.boolean().optional(),
  store_id: z.boolean().optional(),
  stores: z.union([z.boolean(),z.lazy(() => storesArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  orders: z.union([z.boolean(),z.lazy(() => ordersFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CustomersCountOutputTypeArgsSchema)]).optional(),
}).strict()

// DOMAIN OWNERS
//------------------------------------------------------

export const domain_ownersIncludeSchema: z.ZodType<Prisma.domain_ownersInclude> = z.object({
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

export const domain_ownersArgsSchema: z.ZodType<Prisma.domain_ownersDefaultArgs> = z.object({
  select: z.lazy(() => domain_ownersSelectSchema).optional(),
  include: z.lazy(() => domain_ownersIncludeSchema).optional(),
}).strict();

export const domain_ownersSelectSchema: z.ZodType<Prisma.domain_ownersSelect> = z.object({
  id: z.boolean().optional(),
  domain: z.boolean().optional(),
  user_id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  domain_type: z.boolean().optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

// EXPENSES
//------------------------------------------------------

export const expensesSelectSchema: z.ZodType<Prisma.expensesSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  store_id: z.boolean().optional(),
  name: z.boolean().optional(),
  category: z.boolean().optional(),
  type: z.boolean().optional(),
  amount: z.boolean().optional(),
  due_date: z.boolean().optional(),
  is_recurring: z.boolean().optional(),
  recurring_frequency: z.boolean().optional(),
  status: z.boolean().optional(),
  paid_date: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
}).strict()

// ORDER ITEMS
//------------------------------------------------------

export const order_itemsIncludeSchema: z.ZodType<Prisma.order_itemsInclude> = z.object({
  orders: z.union([z.boolean(),z.lazy(() => ordersArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => productsArgsSchema)]).optional(),
}).strict()

export const order_itemsArgsSchema: z.ZodType<Prisma.order_itemsDefaultArgs> = z.object({
  select: z.lazy(() => order_itemsSelectSchema).optional(),
  include: z.lazy(() => order_itemsIncludeSchema).optional(),
}).strict();

export const order_itemsSelectSchema: z.ZodType<Prisma.order_itemsSelect> = z.object({
  id: z.boolean().optional(),
  order_id: z.boolean().optional(),
  product_id: z.boolean().optional(),
  quantity: z.boolean().optional(),
  unit_price: z.boolean().optional(),
  total_price: z.boolean().optional(),
  created_at: z.boolean().optional(),
  orders: z.union([z.boolean(),z.lazy(() => ordersArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => productsArgsSchema)]).optional(),
}).strict()

// ORDERS
//------------------------------------------------------

export const ordersIncludeSchema: z.ZodType<Prisma.ordersInclude> = z.object({
  order_items: z.union([z.boolean(),z.lazy(() => order_itemsFindManyArgsSchema)]).optional(),
  customers: z.union([z.boolean(),z.lazy(() => customersArgsSchema)]).optional(),
  stores: z.union([z.boolean(),z.lazy(() => storesArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrdersCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ordersArgsSchema: z.ZodType<Prisma.ordersDefaultArgs> = z.object({
  select: z.lazy(() => ordersSelectSchema).optional(),
  include: z.lazy(() => ordersIncludeSchema).optional(),
}).strict();

export const ordersCountOutputTypeArgsSchema: z.ZodType<Prisma.ordersCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ordersCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ordersCountOutputTypeSelectSchema: z.ZodType<Prisma.ordersCountOutputTypeSelect> = z.object({
  order_items: z.boolean().optional(),
}).strict();

export const ordersSelectSchema: z.ZodType<Prisma.ordersSelect> = z.object({
  id: z.boolean().optional(),
  store_owner_id: z.boolean().optional(),
  customer_id: z.boolean().optional(),
  customer_name: z.boolean().optional(),
  customer_email: z.boolean().optional(),
  customer_phone: z.boolean().optional(),
  total_amount: z.boolean().optional(),
  status: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  store_id: z.boolean().optional(),
  order_items: z.union([z.boolean(),z.lazy(() => order_itemsFindManyArgsSchema)]).optional(),
  customers: z.union([z.boolean(),z.lazy(() => customersArgsSchema)]).optional(),
  stores: z.union([z.boolean(),z.lazy(() => storesArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrdersCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PRODUCT COSTS
//------------------------------------------------------

export const product_costsSelectSchema: z.ZodType<Prisma.product_costsSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  store_id: z.boolean().optional(),
  product_name: z.boolean().optional(),
  cost_price: z.boolean().optional(),
  desired_margin: z.boolean().optional(),
  suggested_price: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
}).strict()

// PRODUCTS
//------------------------------------------------------

export const productsIncludeSchema: z.ZodType<Prisma.productsInclude> = z.object({
  order_items: z.union([z.boolean(),z.lazy(() => order_itemsFindManyArgsSchema)]).optional(),
  categories: z.union([z.boolean(),z.lazy(() => categoriesArgsSchema)]).optional(),
  stores: z.union([z.boolean(),z.lazy(() => storesArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProductsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const productsArgsSchema: z.ZodType<Prisma.productsDefaultArgs> = z.object({
  select: z.lazy(() => productsSelectSchema).optional(),
  include: z.lazy(() => productsIncludeSchema).optional(),
}).strict();

export const productsCountOutputTypeArgsSchema: z.ZodType<Prisma.productsCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => productsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const productsCountOutputTypeSelectSchema: z.ZodType<Prisma.productsCountOutputTypeSelect> = z.object({
  order_items: z.boolean().optional(),
}).strict();

export const productsSelectSchema: z.ZodType<Prisma.productsSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  category_id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  price: z.boolean().optional(),
  stock: z.boolean().optional(),
  is_active: z.boolean().optional(),
  image: z.boolean().optional(),
  images: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  store_id: z.boolean().optional(),
  order_items: z.union([z.boolean(),z.lazy(() => order_itemsFindManyArgsSchema)]).optional(),
  categories: z.union([z.boolean(),z.lazy(() => categoriesArgsSchema)]).optional(),
  stores: z.union([z.boolean(),z.lazy(() => storesArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProductsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PROFILES
//------------------------------------------------------

export const profilesIncludeSchema: z.ZodType<Prisma.profilesInclude> = z.object({
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

export const profilesArgsSchema: z.ZodType<Prisma.profilesDefaultArgs> = z.object({
  select: z.lazy(() => profilesSelectSchema).optional(),
  include: z.lazy(() => profilesIncludeSchema).optional(),
}).strict();

export const profilesSelectSchema: z.ZodType<Prisma.profilesSelect> = z.object({
  id: z.boolean().optional(),
  email: z.boolean().optional(),
  full_name: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

// SALES
//------------------------------------------------------

export const salesIncludeSchema: z.ZodType<Prisma.salesInclude> = z.object({
  stores: z.union([z.boolean(),z.lazy(() => storesArgsSchema)]).optional(),
}).strict()

export const salesArgsSchema: z.ZodType<Prisma.salesDefaultArgs> = z.object({
  select: z.lazy(() => salesSelectSchema).optional(),
  include: z.lazy(() => salesIncludeSchema).optional(),
}).strict();

export const salesSelectSchema: z.ZodType<Prisma.salesSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  product_name: z.boolean().optional(),
  quantity: z.boolean().optional(),
  unit_price: z.boolean().optional(),
  total_price: z.boolean().optional(),
  sale_date: z.boolean().optional(),
  status: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  store_id: z.boolean().optional(),
  stores: z.union([z.boolean(),z.lazy(() => storesArgsSchema)]).optional(),
}).strict()

// STORE SETTINGS
//------------------------------------------------------

export const store_settingsIncludeSchema: z.ZodType<Prisma.store_settingsInclude> = z.object({
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

export const store_settingsArgsSchema: z.ZodType<Prisma.store_settingsDefaultArgs> = z.object({
  select: z.lazy(() => store_settingsSelectSchema).optional(),
  include: z.lazy(() => store_settingsIncludeSchema).optional(),
}).strict();

export const store_settingsSelectSchema: z.ZodType<Prisma.store_settingsSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  store_name: z.boolean().optional(),
  store_description: z.boolean().optional(),
  mobile_logo: z.boolean().optional(),
  desktop_banner: z.boolean().optional(),
  mobile_banner_color: z.boolean().optional(),
  mobile_banner_image: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  store_subtitle: z.boolean().optional(),
  instagram_url: z.boolean().optional(),
  whatsapp_number: z.boolean().optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

// STORES
//------------------------------------------------------

export const storesIncludeSchema: z.ZodType<Prisma.storesInclude> = z.object({
  categories: z.union([z.boolean(),z.lazy(() => categoriesFindManyArgsSchema)]).optional(),
  customers: z.union([z.boolean(),z.lazy(() => customersFindManyArgsSchema)]).optional(),
  orders: z.union([z.boolean(),z.lazy(() => ordersFindManyArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => productsFindManyArgsSchema)]).optional(),
  sales: z.union([z.boolean(),z.lazy(() => salesFindManyArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => StoresCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const storesArgsSchema: z.ZodType<Prisma.storesDefaultArgs> = z.object({
  select: z.lazy(() => storesSelectSchema).optional(),
  include: z.lazy(() => storesIncludeSchema).optional(),
}).strict();

export const storesCountOutputTypeArgsSchema: z.ZodType<Prisma.storesCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => storesCountOutputTypeSelectSchema).nullish(),
}).strict();

export const storesCountOutputTypeSelectSchema: z.ZodType<Prisma.storesCountOutputTypeSelect> = z.object({
  categories: z.boolean().optional(),
  customers: z.boolean().optional(),
  orders: z.boolean().optional(),
  products: z.boolean().optional(),
  sales: z.boolean().optional(),
}).strict();

export const storesSelectSchema: z.ZodType<Prisma.storesSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  slug: z.boolean().optional(),
  domain: z.boolean().optional(),
  user_id: z.boolean().optional(),
  description: z.boolean().optional(),
  logo_url: z.boolean().optional(),
  banner_url: z.boolean().optional(),
  whatsapp_number: z.boolean().optional(),
  instagram_url: z.boolean().optional(),
  theme_color: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  categories: z.union([z.boolean(),z.lazy(() => categoriesFindManyArgsSchema)]).optional(),
  customers: z.union([z.boolean(),z.lazy(() => customersFindManyArgsSchema)]).optional(),
  orders: z.union([z.boolean(),z.lazy(() => ordersFindManyArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => productsFindManyArgsSchema)]).optional(),
  sales: z.union([z.boolean(),z.lazy(() => salesFindManyArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => StoresCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
  domains: z.union([z.boolean(),z.lazy(() => DomainFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  domains: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  email: z.boolean().optional(),
  password: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  domains: z.union([z.boolean(),z.lazy(() => DomainFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// DOMAIN
//------------------------------------------------------

export const DomainIncludeSchema: z.ZodType<Prisma.DomainInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => ProductFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DomainCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const DomainArgsSchema: z.ZodType<Prisma.DomainDefaultArgs> = z.object({
  select: z.lazy(() => DomainSelectSchema).optional(),
  include: z.lazy(() => DomainIncludeSchema).optional(),
}).strict();

export const DomainCountOutputTypeArgsSchema: z.ZodType<Prisma.DomainCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => DomainCountOutputTypeSelectSchema).nullish(),
}).strict();

export const DomainCountOutputTypeSelectSchema: z.ZodType<Prisma.DomainCountOutputTypeSelect> = z.object({
  products: z.boolean().optional(),
}).strict();

export const DomainSelectSchema: z.ZodType<Prisma.DomainSelect> = z.object({
  id: z.boolean().optional(),
  slug: z.boolean().optional(),
  userId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => ProductFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DomainCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PRODUCT
//------------------------------------------------------

export const ProductIncludeSchema: z.ZodType<Prisma.ProductInclude> = z.object({
  domain: z.union([z.boolean(),z.lazy(() => DomainArgsSchema)]).optional(),
}).strict()

export const ProductArgsSchema: z.ZodType<Prisma.ProductDefaultArgs> = z.object({
  select: z.lazy(() => ProductSelectSchema).optional(),
  include: z.lazy(() => ProductIncludeSchema).optional(),
}).strict();

export const ProductSelectSchema: z.ZodType<Prisma.ProductSelect> = z.object({
  id: z.boolean().optional(),
  title: z.boolean().optional(),
  description: z.boolean().optional(),
  price: z.boolean().optional(),
  imageUrl: z.boolean().optional(),
  domainId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  domain: z.union([z.boolean(),z.lazy(() => DomainArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const audit_log_entriesWhereInputSchema: z.ZodType<Prisma.audit_log_entriesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => audit_log_entriesWhereInputSchema),z.lazy(() => audit_log_entriesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => audit_log_entriesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => audit_log_entriesWhereInputSchema),z.lazy(() => audit_log_entriesWhereInputSchema).array() ]).optional(),
  instance_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  payload: z.lazy(() => JsonNullableFilterSchema).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  ip_address: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const audit_log_entriesOrderByWithRelationInputSchema: z.ZodType<Prisma.audit_log_entriesOrderByWithRelationInput> = z.object({
  instance_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  payload: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ip_address: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const audit_log_entriesWhereUniqueInputSchema: z.ZodType<Prisma.audit_log_entriesWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => audit_log_entriesWhereInputSchema),z.lazy(() => audit_log_entriesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => audit_log_entriesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => audit_log_entriesWhereInputSchema),z.lazy(() => audit_log_entriesWhereInputSchema).array() ]).optional(),
  instance_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  payload: z.lazy(() => JsonNullableFilterSchema).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  ip_address: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict());

export const audit_log_entriesOrderByWithAggregationInputSchema: z.ZodType<Prisma.audit_log_entriesOrderByWithAggregationInput> = z.object({
  instance_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  payload: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ip_address: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => audit_log_entriesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => audit_log_entriesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => audit_log_entriesMinOrderByAggregateInputSchema).optional()
}).strict();

export const audit_log_entriesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.audit_log_entriesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => audit_log_entriesScalarWhereWithAggregatesInputSchema),z.lazy(() => audit_log_entriesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => audit_log_entriesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => audit_log_entriesScalarWhereWithAggregatesInputSchema),z.lazy(() => audit_log_entriesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  instance_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  payload: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  ip_address: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const flow_stateWhereInputSchema: z.ZodType<Prisma.flow_stateWhereInput> = z.object({
  AND: z.union([ z.lazy(() => flow_stateWhereInputSchema),z.lazy(() => flow_stateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => flow_stateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => flow_stateWhereInputSchema),z.lazy(() => flow_stateWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  auth_code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code_challenge_method: z.union([ z.lazy(() => Enumcode_challenge_methodFilterSchema),z.lazy(() => code_challenge_methodSchema) ]).optional(),
  code_challenge: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider_type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider_access_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  provider_refresh_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  authentication_method: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  auth_code_issued_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  saml_relay_states: z.lazy(() => Saml_relay_statesListRelationFilterSchema).optional()
}).strict();

export const flow_stateOrderByWithRelationInputSchema: z.ZodType<Prisma.flow_stateOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  auth_code: z.lazy(() => SortOrderSchema).optional(),
  code_challenge_method: z.lazy(() => SortOrderSchema).optional(),
  code_challenge: z.lazy(() => SortOrderSchema).optional(),
  provider_type: z.lazy(() => SortOrderSchema).optional(),
  provider_access_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  provider_refresh_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  authentication_method: z.lazy(() => SortOrderSchema).optional(),
  auth_code_issued_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  saml_relay_states: z.lazy(() => saml_relay_statesOrderByRelationAggregateInputSchema).optional()
}).strict();

export const flow_stateWhereUniqueInputSchema: z.ZodType<Prisma.flow_stateWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => flow_stateWhereInputSchema),z.lazy(() => flow_stateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => flow_stateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => flow_stateWhereInputSchema),z.lazy(() => flow_stateWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  auth_code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code_challenge_method: z.union([ z.lazy(() => Enumcode_challenge_methodFilterSchema),z.lazy(() => code_challenge_methodSchema) ]).optional(),
  code_challenge: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider_type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider_access_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  provider_refresh_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  authentication_method: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  auth_code_issued_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  saml_relay_states: z.lazy(() => Saml_relay_statesListRelationFilterSchema).optional()
}).strict());

export const flow_stateOrderByWithAggregationInputSchema: z.ZodType<Prisma.flow_stateOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  auth_code: z.lazy(() => SortOrderSchema).optional(),
  code_challenge_method: z.lazy(() => SortOrderSchema).optional(),
  code_challenge: z.lazy(() => SortOrderSchema).optional(),
  provider_type: z.lazy(() => SortOrderSchema).optional(),
  provider_access_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  provider_refresh_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  authentication_method: z.lazy(() => SortOrderSchema).optional(),
  auth_code_issued_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => flow_stateCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => flow_stateMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => flow_stateMinOrderByAggregateInputSchema).optional()
}).strict();

export const flow_stateScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.flow_stateScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => flow_stateScalarWhereWithAggregatesInputSchema),z.lazy(() => flow_stateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => flow_stateScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => flow_stateScalarWhereWithAggregatesInputSchema),z.lazy(() => flow_stateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  auth_code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  code_challenge_method: z.union([ z.lazy(() => Enumcode_challenge_methodWithAggregatesFilterSchema),z.lazy(() => code_challenge_methodSchema) ]).optional(),
  code_challenge: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  provider_type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  provider_access_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  provider_refresh_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  authentication_method: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  auth_code_issued_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const identitiesWhereInputSchema: z.ZodType<Prisma.identitiesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => identitiesWhereInputSchema),z.lazy(() => identitiesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => identitiesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => identitiesWhereInputSchema),z.lazy(() => identitiesWhereInputSchema).array() ]).optional(),
  provider_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  identity_data: z.lazy(() => JsonFilterSchema).optional(),
  provider: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  last_sign_in_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict();

export const identitiesOrderByWithRelationInputSchema: z.ZodType<Prisma.identitiesOrderByWithRelationInput> = z.object({
  provider_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  identity_data: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  last_sign_in_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  users: z.lazy(() => usersOrderByWithRelationInputSchema).optional()
}).strict();

export const identitiesWhereUniqueInputSchema: z.ZodType<Prisma.identitiesWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    provider_id_provider: z.lazy(() => identitiesProvider_idProviderCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    provider_id_provider: z.lazy(() => identitiesProvider_idProviderCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  provider_id_provider: z.lazy(() => identitiesProvider_idProviderCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => identitiesWhereInputSchema),z.lazy(() => identitiesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => identitiesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => identitiesWhereInputSchema),z.lazy(() => identitiesWhereInputSchema).array() ]).optional(),
  provider_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  identity_data: z.lazy(() => JsonFilterSchema).optional(),
  provider: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  last_sign_in_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict());

export const identitiesOrderByWithAggregationInputSchema: z.ZodType<Prisma.identitiesOrderByWithAggregationInput> = z.object({
  provider_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  identity_data: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  last_sign_in_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => identitiesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => identitiesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => identitiesMinOrderByAggregateInputSchema).optional()
}).strict();

export const identitiesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.identitiesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => identitiesScalarWhereWithAggregatesInputSchema),z.lazy(() => identitiesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => identitiesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => identitiesScalarWhereWithAggregatesInputSchema),z.lazy(() => identitiesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  provider_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  identity_data: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  provider: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  last_sign_in_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const instancesWhereInputSchema: z.ZodType<Prisma.instancesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => instancesWhereInputSchema),z.lazy(() => instancesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => instancesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => instancesWhereInputSchema),z.lazy(() => instancesWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  uuid: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  raw_base_config: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const instancesOrderByWithRelationInputSchema: z.ZodType<Prisma.instancesOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  uuid: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raw_base_config: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const instancesWhereUniqueInputSchema: z.ZodType<Prisma.instancesWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => instancesWhereInputSchema),z.lazy(() => instancesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => instancesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => instancesWhereInputSchema),z.lazy(() => instancesWhereInputSchema).array() ]).optional(),
  uuid: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  raw_base_config: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict());

export const instancesOrderByWithAggregationInputSchema: z.ZodType<Prisma.instancesOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  uuid: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raw_base_config: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => instancesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => instancesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => instancesMinOrderByAggregateInputSchema).optional()
}).strict();

export const instancesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.instancesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => instancesScalarWhereWithAggregatesInputSchema),z.lazy(() => instancesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => instancesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => instancesScalarWhereWithAggregatesInputSchema),z.lazy(() => instancesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  uuid: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  raw_base_config: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const mfa_amr_claimsWhereInputSchema: z.ZodType<Prisma.mfa_amr_claimsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => mfa_amr_claimsWhereInputSchema),z.lazy(() => mfa_amr_claimsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => mfa_amr_claimsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => mfa_amr_claimsWhereInputSchema),z.lazy(() => mfa_amr_claimsWhereInputSchema).array() ]).optional(),
  session_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  authentication_method: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  sessions: z.union([ z.lazy(() => SessionsScalarRelationFilterSchema),z.lazy(() => sessionsWhereInputSchema) ]).optional(),
}).strict();

export const mfa_amr_claimsOrderByWithRelationInputSchema: z.ZodType<Prisma.mfa_amr_claimsOrderByWithRelationInput> = z.object({
  session_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  authentication_method: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  sessions: z.lazy(() => sessionsOrderByWithRelationInputSchema).optional()
}).strict();

export const mfa_amr_claimsWhereUniqueInputSchema: z.ZodType<Prisma.mfa_amr_claimsWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    session_id_authentication_method: z.lazy(() => mfa_amr_claimsSession_idAuthentication_methodCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    session_id_authentication_method: z.lazy(() => mfa_amr_claimsSession_idAuthentication_methodCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  session_id_authentication_method: z.lazy(() => mfa_amr_claimsSession_idAuthentication_methodCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => mfa_amr_claimsWhereInputSchema),z.lazy(() => mfa_amr_claimsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => mfa_amr_claimsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => mfa_amr_claimsWhereInputSchema),z.lazy(() => mfa_amr_claimsWhereInputSchema).array() ]).optional(),
  session_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  authentication_method: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessions: z.union([ z.lazy(() => SessionsScalarRelationFilterSchema),z.lazy(() => sessionsWhereInputSchema) ]).optional(),
}).strict());

export const mfa_amr_claimsOrderByWithAggregationInputSchema: z.ZodType<Prisma.mfa_amr_claimsOrderByWithAggregationInput> = z.object({
  session_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  authentication_method: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => mfa_amr_claimsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => mfa_amr_claimsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => mfa_amr_claimsMinOrderByAggregateInputSchema).optional()
}).strict();

export const mfa_amr_claimsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.mfa_amr_claimsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => mfa_amr_claimsScalarWhereWithAggregatesInputSchema),z.lazy(() => mfa_amr_claimsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => mfa_amr_claimsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => mfa_amr_claimsScalarWhereWithAggregatesInputSchema),z.lazy(() => mfa_amr_claimsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  session_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  authentication_method: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const mfa_challengesWhereInputSchema: z.ZodType<Prisma.mfa_challengesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => mfa_challengesWhereInputSchema),z.lazy(() => mfa_challengesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => mfa_challengesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => mfa_challengesWhereInputSchema),z.lazy(() => mfa_challengesWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  factor_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  verified_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  ip_address: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  otp_code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  web_authn_session_data: z.lazy(() => JsonNullableFilterSchema).optional(),
  mfa_factors: z.union([ z.lazy(() => Mfa_factorsScalarRelationFilterSchema),z.lazy(() => mfa_factorsWhereInputSchema) ]).optional(),
}).strict();

export const mfa_challengesOrderByWithRelationInputSchema: z.ZodType<Prisma.mfa_challengesOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  factor_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  verified_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ip_address: z.lazy(() => SortOrderSchema).optional(),
  otp_code: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  web_authn_session_data: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mfa_factors: z.lazy(() => mfa_factorsOrderByWithRelationInputSchema).optional()
}).strict();

export const mfa_challengesWhereUniqueInputSchema: z.ZodType<Prisma.mfa_challengesWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => mfa_challengesWhereInputSchema),z.lazy(() => mfa_challengesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => mfa_challengesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => mfa_challengesWhereInputSchema),z.lazy(() => mfa_challengesWhereInputSchema).array() ]).optional(),
  factor_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  verified_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  ip_address: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  otp_code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  web_authn_session_data: z.lazy(() => JsonNullableFilterSchema).optional(),
  mfa_factors: z.union([ z.lazy(() => Mfa_factorsScalarRelationFilterSchema),z.lazy(() => mfa_factorsWhereInputSchema) ]).optional(),
}).strict());

export const mfa_challengesOrderByWithAggregationInputSchema: z.ZodType<Prisma.mfa_challengesOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  factor_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  verified_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ip_address: z.lazy(() => SortOrderSchema).optional(),
  otp_code: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  web_authn_session_data: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => mfa_challengesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => mfa_challengesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => mfa_challengesMinOrderByAggregateInputSchema).optional()
}).strict();

export const mfa_challengesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.mfa_challengesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => mfa_challengesScalarWhereWithAggregatesInputSchema),z.lazy(() => mfa_challengesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => mfa_challengesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => mfa_challengesScalarWhereWithAggregatesInputSchema),z.lazy(() => mfa_challengesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  factor_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  verified_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  ip_address: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  otp_code: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  web_authn_session_data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional()
}).strict();

export const mfa_factorsWhereInputSchema: z.ZodType<Prisma.mfa_factorsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => mfa_factorsWhereInputSchema),z.lazy(() => mfa_factorsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => mfa_factorsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => mfa_factorsWhereInputSchema),z.lazy(() => mfa_factorsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  friendly_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  factor_type: z.union([ z.lazy(() => Enumfactor_typeFilterSchema),z.lazy(() => factor_typeSchema) ]).optional(),
  status: z.union([ z.lazy(() => Enumfactor_statusFilterSchema),z.lazy(() => factor_statusSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  secret: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  last_challenged_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  web_authn_credential: z.lazy(() => JsonNullableFilterSchema).optional(),
  web_authn_aaguid: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  mfa_challenges: z.lazy(() => Mfa_challengesListRelationFilterSchema).optional(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict();

export const mfa_factorsOrderByWithRelationInputSchema: z.ZodType<Prisma.mfa_factorsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  friendly_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  factor_type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  secret: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  last_challenged_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  web_authn_credential: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  web_authn_aaguid: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mfa_challenges: z.lazy(() => mfa_challengesOrderByRelationAggregateInputSchema).optional(),
  users: z.lazy(() => usersOrderByWithRelationInputSchema).optional()
}).strict();

export const mfa_factorsWhereUniqueInputSchema: z.ZodType<Prisma.mfa_factorsWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    last_challenged_at: z.coerce.date(),
    user_id_phone: z.lazy(() => mfa_factorsUser_idPhoneCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
    last_challenged_at: z.coerce.date(),
  }),
  z.object({
    id: z.string(),
    user_id_phone: z.lazy(() => mfa_factorsUser_idPhoneCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    last_challenged_at: z.coerce.date(),
    user_id_phone: z.lazy(() => mfa_factorsUser_idPhoneCompoundUniqueInputSchema),
  }),
  z.object({
    last_challenged_at: z.coerce.date(),
  }),
  z.object({
    user_id_phone: z.lazy(() => mfa_factorsUser_idPhoneCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  last_challenged_at: z.coerce.date().optional(),
  user_id_phone: z.lazy(() => mfa_factorsUser_idPhoneCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => mfa_factorsWhereInputSchema),z.lazy(() => mfa_factorsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => mfa_factorsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => mfa_factorsWhereInputSchema),z.lazy(() => mfa_factorsWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  friendly_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  factor_type: z.union([ z.lazy(() => Enumfactor_typeFilterSchema),z.lazy(() => factor_typeSchema) ]).optional(),
  status: z.union([ z.lazy(() => Enumfactor_statusFilterSchema),z.lazy(() => factor_statusSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  secret: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  web_authn_credential: z.lazy(() => JsonNullableFilterSchema).optional(),
  web_authn_aaguid: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  mfa_challenges: z.lazy(() => Mfa_challengesListRelationFilterSchema).optional(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict());

export const mfa_factorsOrderByWithAggregationInputSchema: z.ZodType<Prisma.mfa_factorsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  friendly_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  factor_type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  secret: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  last_challenged_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  web_authn_credential: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  web_authn_aaguid: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => mfa_factorsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => mfa_factorsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => mfa_factorsMinOrderByAggregateInputSchema).optional()
}).strict();

export const mfa_factorsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.mfa_factorsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => mfa_factorsScalarWhereWithAggregatesInputSchema),z.lazy(() => mfa_factorsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => mfa_factorsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => mfa_factorsScalarWhereWithAggregatesInputSchema),z.lazy(() => mfa_factorsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  friendly_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  factor_type: z.union([ z.lazy(() => Enumfactor_typeWithAggregatesFilterSchema),z.lazy(() => factor_typeSchema) ]).optional(),
  status: z.union([ z.lazy(() => Enumfactor_statusWithAggregatesFilterSchema),z.lazy(() => factor_statusSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  secret: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  last_challenged_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  web_authn_credential: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  web_authn_aaguid: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const one_time_tokensWhereInputSchema: z.ZodType<Prisma.one_time_tokensWhereInput> = z.object({
  AND: z.union([ z.lazy(() => one_time_tokensWhereInputSchema),z.lazy(() => one_time_tokensWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => one_time_tokensWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => one_time_tokensWhereInputSchema),z.lazy(() => one_time_tokensWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  token_type: z.union([ z.lazy(() => Enumone_time_token_typeFilterSchema),z.lazy(() => one_time_token_typeSchema) ]).optional(),
  token_hash: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  relates_to: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict();

export const one_time_tokensOrderByWithRelationInputSchema: z.ZodType<Prisma.one_time_tokensOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  token_hash: z.lazy(() => SortOrderSchema).optional(),
  relates_to: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  users: z.lazy(() => usersOrderByWithRelationInputSchema).optional()
}).strict();

export const one_time_tokensWhereUniqueInputSchema: z.ZodType<Prisma.one_time_tokensWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    user_id_token_type: z.lazy(() => one_time_tokensUser_idToken_typeCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    user_id_token_type: z.lazy(() => one_time_tokensUser_idToken_typeCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  user_id_token_type: z.lazy(() => one_time_tokensUser_idToken_typeCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => one_time_tokensWhereInputSchema),z.lazy(() => one_time_tokensWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => one_time_tokensWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => one_time_tokensWhereInputSchema),z.lazy(() => one_time_tokensWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  token_type: z.union([ z.lazy(() => Enumone_time_token_typeFilterSchema),z.lazy(() => one_time_token_typeSchema) ]).optional(),
  token_hash: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  relates_to: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict());

export const one_time_tokensOrderByWithAggregationInputSchema: z.ZodType<Prisma.one_time_tokensOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  token_hash: z.lazy(() => SortOrderSchema).optional(),
  relates_to: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => one_time_tokensCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => one_time_tokensMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => one_time_tokensMinOrderByAggregateInputSchema).optional()
}).strict();

export const one_time_tokensScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.one_time_tokensScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => one_time_tokensScalarWhereWithAggregatesInputSchema),z.lazy(() => one_time_tokensScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => one_time_tokensScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => one_time_tokensScalarWhereWithAggregatesInputSchema),z.lazy(() => one_time_tokensScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  token_type: z.union([ z.lazy(() => Enumone_time_token_typeWithAggregatesFilterSchema),z.lazy(() => one_time_token_typeSchema) ]).optional(),
  token_hash: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  relates_to: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const refresh_tokensWhereInputSchema: z.ZodType<Prisma.refresh_tokensWhereInput> = z.object({
  AND: z.union([ z.lazy(() => refresh_tokensWhereInputSchema),z.lazy(() => refresh_tokensWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => refresh_tokensWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => refresh_tokensWhereInputSchema),z.lazy(() => refresh_tokensWhereInputSchema).array() ]).optional(),
  instance_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  id: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  revoked: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  parent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  sessions: z.union([ z.lazy(() => SessionsNullableScalarRelationFilterSchema),z.lazy(() => sessionsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const refresh_tokensOrderByWithRelationInputSchema: z.ZodType<Prisma.refresh_tokensOrderByWithRelationInput> = z.object({
  instance_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  revoked: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  parent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  session_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sessions: z.lazy(() => sessionsOrderByWithRelationInputSchema).optional()
}).strict();

export const refresh_tokensWhereUniqueInputSchema: z.ZodType<Prisma.refresh_tokensWhereUniqueInput> = z.union([
  z.object({
    id: z.bigint(),
    token: z.string()
  }),
  z.object({
    id: z.bigint(),
  }),
  z.object({
    token: z.string(),
  }),
])
.and(z.object({
  id: z.bigint().optional(),
  token: z.string().optional(),
  AND: z.union([ z.lazy(() => refresh_tokensWhereInputSchema),z.lazy(() => refresh_tokensWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => refresh_tokensWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => refresh_tokensWhereInputSchema),z.lazy(() => refresh_tokensWhereInputSchema).array() ]).optional(),
  instance_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  revoked: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  parent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  sessions: z.union([ z.lazy(() => SessionsNullableScalarRelationFilterSchema),z.lazy(() => sessionsWhereInputSchema) ]).optional().nullable(),
}).strict());

export const refresh_tokensOrderByWithAggregationInputSchema: z.ZodType<Prisma.refresh_tokensOrderByWithAggregationInput> = z.object({
  instance_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  revoked: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  parent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  session_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => refresh_tokensCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => refresh_tokensAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => refresh_tokensMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => refresh_tokensMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => refresh_tokensSumOrderByAggregateInputSchema).optional()
}).strict();

export const refresh_tokensScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.refresh_tokensScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => refresh_tokensScalarWhereWithAggregatesInputSchema),z.lazy(() => refresh_tokensScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => refresh_tokensScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => refresh_tokensScalarWhereWithAggregatesInputSchema),z.lazy(() => refresh_tokensScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  instance_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  id: z.union([ z.lazy(() => BigIntWithAggregatesFilterSchema),z.bigint() ]).optional(),
  token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  revoked: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  parent: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  session_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const saml_providersWhereInputSchema: z.ZodType<Prisma.saml_providersWhereInput> = z.object({
  AND: z.union([ z.lazy(() => saml_providersWhereInputSchema),z.lazy(() => saml_providersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => saml_providersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => saml_providersWhereInputSchema),z.lazy(() => saml_providersWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  sso_provider_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  entity_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  metadata_xml: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  metadata_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  attribute_mapping: z.lazy(() => JsonNullableFilterSchema).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name_id_format: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sso_providers: z.union([ z.lazy(() => Sso_providersScalarRelationFilterSchema),z.lazy(() => sso_providersWhereInputSchema) ]).optional(),
}).strict();

export const saml_providersOrderByWithRelationInputSchema: z.ZodType<Prisma.saml_providersOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sso_provider_id: z.lazy(() => SortOrderSchema).optional(),
  entity_id: z.lazy(() => SortOrderSchema).optional(),
  metadata_xml: z.lazy(() => SortOrderSchema).optional(),
  metadata_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  attribute_mapping: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name_id_format: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sso_providers: z.lazy(() => sso_providersOrderByWithRelationInputSchema).optional()
}).strict();

export const saml_providersWhereUniqueInputSchema: z.ZodType<Prisma.saml_providersWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    entity_id: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    entity_id: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  entity_id: z.string().optional(),
  AND: z.union([ z.lazy(() => saml_providersWhereInputSchema),z.lazy(() => saml_providersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => saml_providersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => saml_providersWhereInputSchema),z.lazy(() => saml_providersWhereInputSchema).array() ]).optional(),
  sso_provider_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  metadata_xml: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  metadata_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  attribute_mapping: z.lazy(() => JsonNullableFilterSchema).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name_id_format: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sso_providers: z.union([ z.lazy(() => Sso_providersScalarRelationFilterSchema),z.lazy(() => sso_providersWhereInputSchema) ]).optional(),
}).strict());

export const saml_providersOrderByWithAggregationInputSchema: z.ZodType<Prisma.saml_providersOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sso_provider_id: z.lazy(() => SortOrderSchema).optional(),
  entity_id: z.lazy(() => SortOrderSchema).optional(),
  metadata_xml: z.lazy(() => SortOrderSchema).optional(),
  metadata_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  attribute_mapping: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name_id_format: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => saml_providersCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => saml_providersMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => saml_providersMinOrderByAggregateInputSchema).optional()
}).strict();

export const saml_providersScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.saml_providersScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => saml_providersScalarWhereWithAggregatesInputSchema),z.lazy(() => saml_providersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => saml_providersScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => saml_providersScalarWhereWithAggregatesInputSchema),z.lazy(() => saml_providersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  sso_provider_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  entity_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  metadata_xml: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  metadata_url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  attribute_mapping: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name_id_format: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const saml_relay_statesWhereInputSchema: z.ZodType<Prisma.saml_relay_statesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => saml_relay_statesWhereInputSchema),z.lazy(() => saml_relay_statesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => saml_relay_statesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => saml_relay_statesWhereInputSchema),z.lazy(() => saml_relay_statesWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  sso_provider_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  request_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  for_email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  redirect_to: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  flow_state_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  flow_state: z.union([ z.lazy(() => Flow_stateNullableScalarRelationFilterSchema),z.lazy(() => flow_stateWhereInputSchema) ]).optional().nullable(),
  sso_providers: z.union([ z.lazy(() => Sso_providersScalarRelationFilterSchema),z.lazy(() => sso_providersWhereInputSchema) ]).optional(),
}).strict();

export const saml_relay_statesOrderByWithRelationInputSchema: z.ZodType<Prisma.saml_relay_statesOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sso_provider_id: z.lazy(() => SortOrderSchema).optional(),
  request_id: z.lazy(() => SortOrderSchema).optional(),
  for_email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  redirect_to: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  flow_state_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  flow_state: z.lazy(() => flow_stateOrderByWithRelationInputSchema).optional(),
  sso_providers: z.lazy(() => sso_providersOrderByWithRelationInputSchema).optional()
}).strict();

export const saml_relay_statesWhereUniqueInputSchema: z.ZodType<Prisma.saml_relay_statesWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => saml_relay_statesWhereInputSchema),z.lazy(() => saml_relay_statesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => saml_relay_statesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => saml_relay_statesWhereInputSchema),z.lazy(() => saml_relay_statesWhereInputSchema).array() ]).optional(),
  sso_provider_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  request_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  for_email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  redirect_to: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  flow_state_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  flow_state: z.union([ z.lazy(() => Flow_stateNullableScalarRelationFilterSchema),z.lazy(() => flow_stateWhereInputSchema) ]).optional().nullable(),
  sso_providers: z.union([ z.lazy(() => Sso_providersScalarRelationFilterSchema),z.lazy(() => sso_providersWhereInputSchema) ]).optional(),
}).strict());

export const saml_relay_statesOrderByWithAggregationInputSchema: z.ZodType<Prisma.saml_relay_statesOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sso_provider_id: z.lazy(() => SortOrderSchema).optional(),
  request_id: z.lazy(() => SortOrderSchema).optional(),
  for_email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  redirect_to: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  flow_state_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => saml_relay_statesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => saml_relay_statesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => saml_relay_statesMinOrderByAggregateInputSchema).optional()
}).strict();

export const saml_relay_statesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.saml_relay_statesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => saml_relay_statesScalarWhereWithAggregatesInputSchema),z.lazy(() => saml_relay_statesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => saml_relay_statesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => saml_relay_statesScalarWhereWithAggregatesInputSchema),z.lazy(() => saml_relay_statesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  sso_provider_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  request_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  for_email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  redirect_to: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  flow_state_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const schema_migrationsWhereInputSchema: z.ZodType<Prisma.schema_migrationsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => schema_migrationsWhereInputSchema),z.lazy(() => schema_migrationsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => schema_migrationsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => schema_migrationsWhereInputSchema),z.lazy(() => schema_migrationsWhereInputSchema).array() ]).optional(),
  version: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const schema_migrationsOrderByWithRelationInputSchema: z.ZodType<Prisma.schema_migrationsOrderByWithRelationInput> = z.object({
  version: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const schema_migrationsWhereUniqueInputSchema: z.ZodType<Prisma.schema_migrationsWhereUniqueInput> = z.object({
  version: z.string()
})
.and(z.object({
  version: z.string().optional(),
  AND: z.union([ z.lazy(() => schema_migrationsWhereInputSchema),z.lazy(() => schema_migrationsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => schema_migrationsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => schema_migrationsWhereInputSchema),z.lazy(() => schema_migrationsWhereInputSchema).array() ]).optional(),
}).strict());

export const schema_migrationsOrderByWithAggregationInputSchema: z.ZodType<Prisma.schema_migrationsOrderByWithAggregationInput> = z.object({
  version: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => schema_migrationsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => schema_migrationsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => schema_migrationsMinOrderByAggregateInputSchema).optional()
}).strict();

export const schema_migrationsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.schema_migrationsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => schema_migrationsScalarWhereWithAggregatesInputSchema),z.lazy(() => schema_migrationsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => schema_migrationsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => schema_migrationsScalarWhereWithAggregatesInputSchema),z.lazy(() => schema_migrationsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  version: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const sessionsWhereInputSchema: z.ZodType<Prisma.sessionsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => sessionsWhereInputSchema),z.lazy(() => sessionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => sessionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sessionsWhereInputSchema),z.lazy(() => sessionsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  factor_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  aal: z.union([ z.lazy(() => Enumaal_levelNullableFilterSchema),z.lazy(() => aal_levelSchema) ]).optional().nullable(),
  not_after: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  user_agent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tag: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mfa_amr_claims: z.lazy(() => Mfa_amr_claimsListRelationFilterSchema).optional(),
  refresh_tokens: z.lazy(() => Refresh_tokensListRelationFilterSchema).optional(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict();

export const sessionsOrderByWithRelationInputSchema: z.ZodType<Prisma.sessionsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  factor_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  aal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  not_after: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refreshed_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user_agent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ip: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tag: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mfa_amr_claims: z.lazy(() => mfa_amr_claimsOrderByRelationAggregateInputSchema).optional(),
  refresh_tokens: z.lazy(() => refresh_tokensOrderByRelationAggregateInputSchema).optional(),
  users: z.lazy(() => usersOrderByWithRelationInputSchema).optional()
}).strict();

export const sessionsWhereUniqueInputSchema: z.ZodType<Prisma.sessionsWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => sessionsWhereInputSchema),z.lazy(() => sessionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => sessionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sessionsWhereInputSchema),z.lazy(() => sessionsWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  factor_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  aal: z.union([ z.lazy(() => Enumaal_levelNullableFilterSchema),z.lazy(() => aal_levelSchema) ]).optional().nullable(),
  not_after: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  user_agent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tag: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mfa_amr_claims: z.lazy(() => Mfa_amr_claimsListRelationFilterSchema).optional(),
  refresh_tokens: z.lazy(() => Refresh_tokensListRelationFilterSchema).optional(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict());

export const sessionsOrderByWithAggregationInputSchema: z.ZodType<Prisma.sessionsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  factor_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  aal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  not_after: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refreshed_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user_agent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ip: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tag: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => sessionsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => sessionsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => sessionsMinOrderByAggregateInputSchema).optional()
}).strict();

export const sessionsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.sessionsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => sessionsScalarWhereWithAggregatesInputSchema),z.lazy(() => sessionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => sessionsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sessionsScalarWhereWithAggregatesInputSchema),z.lazy(() => sessionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  factor_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  aal: z.union([ z.lazy(() => Enumaal_levelNullableWithAggregatesFilterSchema),z.lazy(() => aal_levelSchema) ]).optional().nullable(),
  not_after: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshed_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  user_agent: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ip: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tag: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const sso_domainsWhereInputSchema: z.ZodType<Prisma.sso_domainsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => sso_domainsWhereInputSchema),z.lazy(() => sso_domainsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => sso_domainsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sso_domainsWhereInputSchema),z.lazy(() => sso_domainsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  sso_provider_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  domain: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  sso_providers: z.union([ z.lazy(() => Sso_providersScalarRelationFilterSchema),z.lazy(() => sso_providersWhereInputSchema) ]).optional(),
}).strict();

export const sso_domainsOrderByWithRelationInputSchema: z.ZodType<Prisma.sso_domainsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sso_provider_id: z.lazy(() => SortOrderSchema).optional(),
  domain: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sso_providers: z.lazy(() => sso_providersOrderByWithRelationInputSchema).optional()
}).strict();

export const sso_domainsWhereUniqueInputSchema: z.ZodType<Prisma.sso_domainsWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => sso_domainsWhereInputSchema),z.lazy(() => sso_domainsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => sso_domainsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sso_domainsWhereInputSchema),z.lazy(() => sso_domainsWhereInputSchema).array() ]).optional(),
  sso_provider_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  domain: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  sso_providers: z.union([ z.lazy(() => Sso_providersScalarRelationFilterSchema),z.lazy(() => sso_providersWhereInputSchema) ]).optional(),
}).strict());

export const sso_domainsOrderByWithAggregationInputSchema: z.ZodType<Prisma.sso_domainsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sso_provider_id: z.lazy(() => SortOrderSchema).optional(),
  domain: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => sso_domainsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => sso_domainsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => sso_domainsMinOrderByAggregateInputSchema).optional()
}).strict();

export const sso_domainsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.sso_domainsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => sso_domainsScalarWhereWithAggregatesInputSchema),z.lazy(() => sso_domainsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => sso_domainsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sso_domainsScalarWhereWithAggregatesInputSchema),z.lazy(() => sso_domainsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  sso_provider_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  domain: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const sso_providersWhereInputSchema: z.ZodType<Prisma.sso_providersWhereInput> = z.object({
  AND: z.union([ z.lazy(() => sso_providersWhereInputSchema),z.lazy(() => sso_providersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => sso_providersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sso_providersWhereInputSchema),z.lazy(() => sso_providersWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  resource_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  saml_providers: z.lazy(() => Saml_providersListRelationFilterSchema).optional(),
  saml_relay_states: z.lazy(() => Saml_relay_statesListRelationFilterSchema).optional(),
  sso_domains: z.lazy(() => Sso_domainsListRelationFilterSchema).optional()
}).strict();

export const sso_providersOrderByWithRelationInputSchema: z.ZodType<Prisma.sso_providersOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  resource_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  saml_providers: z.lazy(() => saml_providersOrderByRelationAggregateInputSchema).optional(),
  saml_relay_states: z.lazy(() => saml_relay_statesOrderByRelationAggregateInputSchema).optional(),
  sso_domains: z.lazy(() => sso_domainsOrderByRelationAggregateInputSchema).optional()
}).strict();

export const sso_providersWhereUniqueInputSchema: z.ZodType<Prisma.sso_providersWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => sso_providersWhereInputSchema),z.lazy(() => sso_providersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => sso_providersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sso_providersWhereInputSchema),z.lazy(() => sso_providersWhereInputSchema).array() ]).optional(),
  resource_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  saml_providers: z.lazy(() => Saml_providersListRelationFilterSchema).optional(),
  saml_relay_states: z.lazy(() => Saml_relay_statesListRelationFilterSchema).optional(),
  sso_domains: z.lazy(() => Sso_domainsListRelationFilterSchema).optional()
}).strict());

export const sso_providersOrderByWithAggregationInputSchema: z.ZodType<Prisma.sso_providersOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  resource_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => sso_providersCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => sso_providersMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => sso_providersMinOrderByAggregateInputSchema).optional()
}).strict();

export const sso_providersScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.sso_providersScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => sso_providersScalarWhereWithAggregatesInputSchema),z.lazy(() => sso_providersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => sso_providersScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sso_providersScalarWhereWithAggregatesInputSchema),z.lazy(() => sso_providersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  resource_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const usersWhereInputSchema: z.ZodType<Prisma.usersWhereInput> = z.object({
  AND: z.union([ z.lazy(() => usersWhereInputSchema),z.lazy(() => usersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => usersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => usersWhereInputSchema),z.lazy(() => usersWhereInputSchema).array() ]).optional(),
  instance_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  aud: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  encrypted_password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email_confirmed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  invited_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  confirmation_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  recovery_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  recovery_sent_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  email_change_token_new: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email_change: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email_change_sent_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  last_sign_in_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  raw_app_meta_data: z.lazy(() => JsonNullableFilterSchema).optional(),
  raw_user_meta_data: z.lazy(() => JsonNullableFilterSchema).optional(),
  is_super_admin: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  phone_change: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone_change_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  confirmed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  email_change_token_current: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  banned_until: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  reauthentication_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  is_sso_user: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  is_anonymous: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  identities: z.lazy(() => IdentitiesListRelationFilterSchema).optional(),
  mfa_factors: z.lazy(() => Mfa_factorsListRelationFilterSchema).optional(),
  one_time_tokens: z.lazy(() => One_time_tokensListRelationFilterSchema).optional(),
  sessions: z.lazy(() => SessionsListRelationFilterSchema).optional(),
  categories: z.lazy(() => CategoriesListRelationFilterSchema).optional(),
  controller_admins: z.union([ z.lazy(() => Controller_adminsNullableScalarRelationFilterSchema),z.lazy(() => controller_adminsWhereInputSchema) ]).optional().nullable(),
  customers: z.lazy(() => CustomersListRelationFilterSchema).optional(),
  domain_owners: z.lazy(() => Domain_ownersListRelationFilterSchema).optional(),
  orders: z.lazy(() => OrdersListRelationFilterSchema).optional(),
  products: z.lazy(() => ProductsListRelationFilterSchema).optional(),
  profiles: z.union([ z.lazy(() => ProfilesNullableScalarRelationFilterSchema),z.lazy(() => profilesWhereInputSchema) ]).optional().nullable(),
  store_settings: z.union([ z.lazy(() => Store_settingsNullableScalarRelationFilterSchema),z.lazy(() => store_settingsWhereInputSchema) ]).optional().nullable(),
  stores: z.lazy(() => StoresListRelationFilterSchema).optional()
}).strict();

export const usersOrderByWithRelationInputSchema: z.ZodType<Prisma.usersOrderByWithRelationInput> = z.object({
  instance_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  aud: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  encrypted_password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email_confirmed_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  invited_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  confirmation_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  confirmation_sent_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  recovery_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  recovery_sent_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email_change_token_new: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email_change: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email_change_sent_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  last_sign_in_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raw_app_meta_data: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_super_admin: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone_confirmed_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone_change: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone_change_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone_change_sent_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  confirmed_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email_change_token_current: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email_change_confirm_status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banned_until: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  reauthentication_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  reauthentication_sent_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_sso_user: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_anonymous: z.lazy(() => SortOrderSchema).optional(),
  identities: z.lazy(() => identitiesOrderByRelationAggregateInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsOrderByRelationAggregateInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensOrderByRelationAggregateInputSchema).optional(),
  sessions: z.lazy(() => sessionsOrderByRelationAggregateInputSchema).optional(),
  categories: z.lazy(() => categoriesOrderByRelationAggregateInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsOrderByWithRelationInputSchema).optional(),
  customers: z.lazy(() => customersOrderByRelationAggregateInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersOrderByRelationAggregateInputSchema).optional(),
  orders: z.lazy(() => ordersOrderByRelationAggregateInputSchema).optional(),
  products: z.lazy(() => productsOrderByRelationAggregateInputSchema).optional(),
  profiles: z.lazy(() => profilesOrderByWithRelationInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsOrderByWithRelationInputSchema).optional(),
  stores: z.lazy(() => storesOrderByRelationAggregateInputSchema).optional()
}).strict();

export const usersWhereUniqueInputSchema: z.ZodType<Prisma.usersWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    phone: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    phone: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  phone: z.string().optional(),
  AND: z.union([ z.lazy(() => usersWhereInputSchema),z.lazy(() => usersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => usersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => usersWhereInputSchema),z.lazy(() => usersWhereInputSchema).array() ]).optional(),
  instance_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  aud: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  encrypted_password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email_confirmed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  invited_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  confirmation_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  recovery_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  recovery_sent_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  email_change_token_new: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email_change: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email_change_sent_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  last_sign_in_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  raw_app_meta_data: z.lazy(() => JsonNullableFilterSchema).optional(),
  raw_user_meta_data: z.lazy(() => JsonNullableFilterSchema).optional(),
  is_super_admin: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  phone_change: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone_change_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  confirmed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  email_change_token_current: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  banned_until: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  reauthentication_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  is_sso_user: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  is_anonymous: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  identities: z.lazy(() => IdentitiesListRelationFilterSchema).optional(),
  mfa_factors: z.lazy(() => Mfa_factorsListRelationFilterSchema).optional(),
  one_time_tokens: z.lazy(() => One_time_tokensListRelationFilterSchema).optional(),
  sessions: z.lazy(() => SessionsListRelationFilterSchema).optional(),
  categories: z.lazy(() => CategoriesListRelationFilterSchema).optional(),
  controller_admins: z.union([ z.lazy(() => Controller_adminsNullableScalarRelationFilterSchema),z.lazy(() => controller_adminsWhereInputSchema) ]).optional().nullable(),
  customers: z.lazy(() => CustomersListRelationFilterSchema).optional(),
  domain_owners: z.lazy(() => Domain_ownersListRelationFilterSchema).optional(),
  orders: z.lazy(() => OrdersListRelationFilterSchema).optional(),
  products: z.lazy(() => ProductsListRelationFilterSchema).optional(),
  profiles: z.union([ z.lazy(() => ProfilesNullableScalarRelationFilterSchema),z.lazy(() => profilesWhereInputSchema) ]).optional().nullable(),
  store_settings: z.union([ z.lazy(() => Store_settingsNullableScalarRelationFilterSchema),z.lazy(() => store_settingsWhereInputSchema) ]).optional().nullable(),
  stores: z.lazy(() => StoresListRelationFilterSchema).optional()
}).strict());

export const usersOrderByWithAggregationInputSchema: z.ZodType<Prisma.usersOrderByWithAggregationInput> = z.object({
  instance_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  aud: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  encrypted_password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email_confirmed_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  invited_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  confirmation_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  confirmation_sent_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  recovery_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  recovery_sent_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email_change_token_new: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email_change: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email_change_sent_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  last_sign_in_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raw_app_meta_data: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_super_admin: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone_confirmed_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone_change: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone_change_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone_change_sent_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  confirmed_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email_change_token_current: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email_change_confirm_status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banned_until: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  reauthentication_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  reauthentication_sent_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_sso_user: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_anonymous: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => usersCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => usersAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => usersMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => usersMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => usersSumOrderByAggregateInputSchema).optional()
}).strict();

export const usersScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.usersScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => usersScalarWhereWithAggregatesInputSchema),z.lazy(() => usersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => usersScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => usersScalarWhereWithAggregatesInputSchema),z.lazy(() => usersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  instance_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  aud: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  encrypted_password: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email_confirmed_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  invited_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  confirmation_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  recovery_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  recovery_sent_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  email_change_token_new: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email_change: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email_change_sent_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  last_sign_in_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  raw_app_meta_data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  raw_user_meta_data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  is_super_admin: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  phone_change: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone_change_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  confirmed_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  email_change_token_current: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  banned_until: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  reauthentication_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  is_sso_user: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  is_anonymous: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
}).strict();

export const cash_flowWhereInputSchema: z.ZodType<Prisma.cash_flowWhereInput> = z.object({
  AND: z.union([ z.lazy(() => cash_flowWhereInputSchema),z.lazy(() => cash_flowWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => cash_flowWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => cash_flowWhereInputSchema),z.lazy(() => cash_flowWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  payment_method: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const cash_flowOrderByWithRelationInputSchema: z.ZodType<Prisma.cash_flowOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  payment_method: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const cash_flowWhereUniqueInputSchema: z.ZodType<Prisma.cash_flowWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => cash_flowWhereInputSchema),z.lazy(() => cash_flowWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => cash_flowWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => cash_flowWhereInputSchema),z.lazy(() => cash_flowWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  payment_method: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const cash_flowOrderByWithAggregationInputSchema: z.ZodType<Prisma.cash_flowOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  payment_method: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => cash_flowCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => cash_flowAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => cash_flowMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => cash_flowMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => cash_flowSumOrderByAggregateInputSchema).optional()
}).strict();

export const cash_flowScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.cash_flowScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => cash_flowScalarWhereWithAggregatesInputSchema),z.lazy(() => cash_flowScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => cash_flowScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => cash_flowScalarWhereWithAggregatesInputSchema),z.lazy(() => cash_flowScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  store_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  payment_method: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const categoriesWhereInputSchema: z.ZodType<Prisma.categoriesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => categoriesWhereInputSchema),z.lazy(() => categoriesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => categoriesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => categoriesWhereInputSchema),z.lazy(() => categoriesWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  stores: z.union([ z.lazy(() => StoresNullableScalarRelationFilterSchema),z.lazy(() => storesWhereInputSchema) ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
  products: z.lazy(() => ProductsListRelationFilterSchema).optional()
}).strict();

export const categoriesOrderByWithRelationInputSchema: z.ZodType<Prisma.categoriesOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  color: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  store_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  stores: z.lazy(() => storesOrderByWithRelationInputSchema).optional(),
  users: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  products: z.lazy(() => productsOrderByRelationAggregateInputSchema).optional()
}).strict();

export const categoriesWhereUniqueInputSchema: z.ZodType<Prisma.categoriesWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => categoriesWhereInputSchema),z.lazy(() => categoriesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => categoriesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => categoriesWhereInputSchema),z.lazy(() => categoriesWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  stores: z.union([ z.lazy(() => StoresNullableScalarRelationFilterSchema),z.lazy(() => storesWhereInputSchema) ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
  products: z.lazy(() => ProductsListRelationFilterSchema).optional()
}).strict());

export const categoriesOrderByWithAggregationInputSchema: z.ZodType<Prisma.categoriesOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  color: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  store_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => categoriesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => categoriesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => categoriesMinOrderByAggregateInputSchema).optional()
}).strict();

export const categoriesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.categoriesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => categoriesScalarWhereWithAggregatesInputSchema),z.lazy(() => categoriesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => categoriesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => categoriesScalarWhereWithAggregatesInputSchema),z.lazy(() => categoriesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  color: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  image: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  store_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const controller_adminsWhereInputSchema: z.ZodType<Prisma.controller_adminsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => controller_adminsWhereInputSchema),z.lazy(() => controller_adminsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => controller_adminsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => controller_adminsWhereInputSchema),z.lazy(() => controller_adminsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict();

export const controller_adminsOrderByWithRelationInputSchema: z.ZodType<Prisma.controller_adminsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  users: z.lazy(() => usersOrderByWithRelationInputSchema).optional()
}).strict();

export const controller_adminsWhereUniqueInputSchema: z.ZodType<Prisma.controller_adminsWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    user_id: z.string(),
    email: z.string()
  }),
  z.object({
    id: z.string(),
    user_id: z.string(),
  }),
  z.object({
    id: z.string(),
    email: z.string(),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    user_id: z.string(),
    email: z.string(),
  }),
  z.object({
    user_id: z.string(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  user_id: z.string().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => controller_adminsWhereInputSchema),z.lazy(() => controller_adminsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => controller_adminsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => controller_adminsWhereInputSchema),z.lazy(() => controller_adminsWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict());

export const controller_adminsOrderByWithAggregationInputSchema: z.ZodType<Prisma.controller_adminsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => controller_adminsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => controller_adminsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => controller_adminsMinOrderByAggregateInputSchema).optional()
}).strict();

export const controller_adminsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.controller_adminsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => controller_adminsScalarWhereWithAggregatesInputSchema),z.lazy(() => controller_adminsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => controller_adminsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => controller_adminsScalarWhereWithAggregatesInputSchema),z.lazy(() => controller_adminsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const credit_accountsWhereInputSchema: z.ZodType<Prisma.credit_accountsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => credit_accountsWhereInputSchema),z.lazy(() => credit_accountsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => credit_accountsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => credit_accountsWhereInputSchema),z.lazy(() => credit_accountsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  customer_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customer_phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  total_debt: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  credit_transactions: z.lazy(() => Credit_transactionsListRelationFilterSchema).optional()
}).strict();

export const credit_accountsOrderByWithRelationInputSchema: z.ZodType<Prisma.credit_accountsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  customer_name: z.lazy(() => SortOrderSchema).optional(),
  customer_phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  total_debt: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  credit_transactions: z.lazy(() => credit_transactionsOrderByRelationAggregateInputSchema).optional()
}).strict();

export const credit_accountsWhereUniqueInputSchema: z.ZodType<Prisma.credit_accountsWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    customer_phone_user_id: z.lazy(() => credit_accountsCustomer_phoneUser_idCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    customer_phone_user_id: z.lazy(() => credit_accountsCustomer_phoneUser_idCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  customer_phone_user_id: z.lazy(() => credit_accountsCustomer_phoneUser_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => credit_accountsWhereInputSchema),z.lazy(() => credit_accountsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => credit_accountsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => credit_accountsWhereInputSchema),z.lazy(() => credit_accountsWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  customer_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customer_phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  total_debt: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  credit_transactions: z.lazy(() => Credit_transactionsListRelationFilterSchema).optional()
}).strict());

export const credit_accountsOrderByWithAggregationInputSchema: z.ZodType<Prisma.credit_accountsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  customer_name: z.lazy(() => SortOrderSchema).optional(),
  customer_phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  total_debt: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => credit_accountsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => credit_accountsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => credit_accountsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => credit_accountsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => credit_accountsSumOrderByAggregateInputSchema).optional()
}).strict();

export const credit_accountsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.credit_accountsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => credit_accountsScalarWhereWithAggregatesInputSchema),z.lazy(() => credit_accountsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => credit_accountsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => credit_accountsScalarWhereWithAggregatesInputSchema),z.lazy(() => credit_accountsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  store_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  customer_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  customer_phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  total_debt: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const credit_transactionsWhereInputSchema: z.ZodType<Prisma.credit_transactionsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => credit_transactionsWhereInputSchema),z.lazy(() => credit_transactionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => credit_transactionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => credit_transactionsWhereInputSchema),z.lazy(() => credit_transactionsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  credit_account_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  credit_accounts: z.union([ z.lazy(() => Credit_accountsScalarRelationFilterSchema),z.lazy(() => credit_accountsWhereInputSchema) ]).optional(),
}).strict();

export const credit_transactionsOrderByWithRelationInputSchema: z.ZodType<Prisma.credit_transactionsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  credit_account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  credit_accounts: z.lazy(() => credit_accountsOrderByWithRelationInputSchema).optional()
}).strict();

export const credit_transactionsWhereUniqueInputSchema: z.ZodType<Prisma.credit_transactionsWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => credit_transactionsWhereInputSchema),z.lazy(() => credit_transactionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => credit_transactionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => credit_transactionsWhereInputSchema),z.lazy(() => credit_transactionsWhereInputSchema).array() ]).optional(),
  credit_account_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  credit_accounts: z.union([ z.lazy(() => Credit_accountsScalarRelationFilterSchema),z.lazy(() => credit_accountsWhereInputSchema) ]).optional(),
}).strict());

export const credit_transactionsOrderByWithAggregationInputSchema: z.ZodType<Prisma.credit_transactionsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  credit_account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => credit_transactionsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => credit_transactionsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => credit_transactionsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => credit_transactionsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => credit_transactionsSumOrderByAggregateInputSchema).optional()
}).strict();

export const credit_transactionsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.credit_transactionsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => credit_transactionsScalarWhereWithAggregatesInputSchema),z.lazy(() => credit_transactionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => credit_transactionsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => credit_transactionsScalarWhereWithAggregatesInputSchema),z.lazy(() => credit_transactionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  credit_account_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const customersWhereInputSchema: z.ZodType<Prisma.customersWhereInput> = z.object({
  AND: z.union([ z.lazy(() => customersWhereInputSchema),z.lazy(() => customersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => customersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => customersWhereInputSchema),z.lazy(() => customersWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  store_owner_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  stores: z.union([ z.lazy(() => StoresNullableScalarRelationFilterSchema),z.lazy(() => storesWhereInputSchema) ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
  orders: z.lazy(() => OrdersListRelationFilterSchema).optional()
}).strict();

export const customersOrderByWithRelationInputSchema: z.ZodType<Prisma.customersOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  store_owner_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  store_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  stores: z.lazy(() => storesOrderByWithRelationInputSchema).optional(),
  users: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  orders: z.lazy(() => ordersOrderByRelationAggregateInputSchema).optional()
}).strict();

export const customersWhereUniqueInputSchema: z.ZodType<Prisma.customersWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => customersWhereInputSchema),z.lazy(() => customersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => customersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => customersWhereInputSchema),z.lazy(() => customersWhereInputSchema).array() ]).optional(),
  store_owner_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  stores: z.union([ z.lazy(() => StoresNullableScalarRelationFilterSchema),z.lazy(() => storesWhereInputSchema) ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
  orders: z.lazy(() => OrdersListRelationFilterSchema).optional()
}).strict());

export const customersOrderByWithAggregationInputSchema: z.ZodType<Prisma.customersOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  store_owner_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  store_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => customersCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => customersMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => customersMinOrderByAggregateInputSchema).optional()
}).strict();

export const customersScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.customersScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => customersScalarWhereWithAggregatesInputSchema),z.lazy(() => customersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => customersScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => customersScalarWhereWithAggregatesInputSchema),z.lazy(() => customersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  store_owner_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  store_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const domain_ownersWhereInputSchema: z.ZodType<Prisma.domain_ownersWhereInput> = z.object({
  AND: z.union([ z.lazy(() => domain_ownersWhereInputSchema),z.lazy(() => domain_ownersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => domain_ownersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => domain_ownersWhereInputSchema),z.lazy(() => domain_ownersWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  domain: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  domain_type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict();

export const domain_ownersOrderByWithRelationInputSchema: z.ZodType<Prisma.domain_ownersOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  domain: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  domain_type: z.lazy(() => SortOrderSchema).optional(),
  users: z.lazy(() => usersOrderByWithRelationInputSchema).optional()
}).strict();

export const domain_ownersWhereUniqueInputSchema: z.ZodType<Prisma.domain_ownersWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    domain: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    domain: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  domain: z.string().optional(),
  AND: z.union([ z.lazy(() => domain_ownersWhereInputSchema),z.lazy(() => domain_ownersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => domain_ownersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => domain_ownersWhereInputSchema),z.lazy(() => domain_ownersWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  domain_type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict());

export const domain_ownersOrderByWithAggregationInputSchema: z.ZodType<Prisma.domain_ownersOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  domain: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  domain_type: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => domain_ownersCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => domain_ownersMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => domain_ownersMinOrderByAggregateInputSchema).optional()
}).strict();

export const domain_ownersScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.domain_ownersScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => domain_ownersScalarWhereWithAggregatesInputSchema),z.lazy(() => domain_ownersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => domain_ownersScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => domain_ownersScalarWhereWithAggregatesInputSchema),z.lazy(() => domain_ownersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  domain: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  domain_type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const expensesWhereInputSchema: z.ZodType<Prisma.expensesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => expensesWhereInputSchema),z.lazy(() => expensesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => expensesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => expensesWhereInputSchema),z.lazy(() => expensesWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  due_date: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  is_recurring: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  recurring_frequency: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  paid_date: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const expensesOrderByWithRelationInputSchema: z.ZodType<Prisma.expensesOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  due_date: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_recurring: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  recurring_frequency: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  paid_date: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const expensesWhereUniqueInputSchema: z.ZodType<Prisma.expensesWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => expensesWhereInputSchema),z.lazy(() => expensesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => expensesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => expensesWhereInputSchema),z.lazy(() => expensesWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  due_date: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  is_recurring: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  recurring_frequency: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  paid_date: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const expensesOrderByWithAggregationInputSchema: z.ZodType<Prisma.expensesOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  due_date: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_recurring: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  recurring_frequency: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  paid_date: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => expensesCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => expensesAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => expensesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => expensesMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => expensesSumOrderByAggregateInputSchema).optional()
}).strict();

export const expensesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.expensesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => expensesScalarWhereWithAggregatesInputSchema),z.lazy(() => expensesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => expensesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => expensesScalarWhereWithAggregatesInputSchema),z.lazy(() => expensesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  store_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  due_date: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  is_recurring: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  recurring_frequency: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  paid_date: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const order_itemsWhereInputSchema: z.ZodType<Prisma.order_itemsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => order_itemsWhereInputSchema),z.lazy(() => order_itemsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => order_itemsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => order_itemsWhereInputSchema),z.lazy(() => order_itemsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  order_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  product_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  unit_price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  total_price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  orders: z.union([ z.lazy(() => OrdersScalarRelationFilterSchema),z.lazy(() => ordersWhereInputSchema) ]).optional(),
  products: z.union([ z.lazy(() => ProductsScalarRelationFilterSchema),z.lazy(() => productsWhereInputSchema) ]).optional(),
}).strict();

export const order_itemsOrderByWithRelationInputSchema: z.ZodType<Prisma.order_itemsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  order_id: z.lazy(() => SortOrderSchema).optional(),
  product_id: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  total_price: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  orders: z.lazy(() => ordersOrderByWithRelationInputSchema).optional(),
  products: z.lazy(() => productsOrderByWithRelationInputSchema).optional()
}).strict();

export const order_itemsWhereUniqueInputSchema: z.ZodType<Prisma.order_itemsWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => order_itemsWhereInputSchema),z.lazy(() => order_itemsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => order_itemsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => order_itemsWhereInputSchema),z.lazy(() => order_itemsWhereInputSchema).array() ]).optional(),
  order_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  product_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  unit_price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  total_price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  orders: z.union([ z.lazy(() => OrdersScalarRelationFilterSchema),z.lazy(() => ordersWhereInputSchema) ]).optional(),
  products: z.union([ z.lazy(() => ProductsScalarRelationFilterSchema),z.lazy(() => productsWhereInputSchema) ]).optional(),
}).strict());

export const order_itemsOrderByWithAggregationInputSchema: z.ZodType<Prisma.order_itemsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  order_id: z.lazy(() => SortOrderSchema).optional(),
  product_id: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  total_price: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => order_itemsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => order_itemsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => order_itemsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => order_itemsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => order_itemsSumOrderByAggregateInputSchema).optional()
}).strict();

export const order_itemsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.order_itemsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => order_itemsScalarWhereWithAggregatesInputSchema),z.lazy(() => order_itemsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => order_itemsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => order_itemsScalarWhereWithAggregatesInputSchema),z.lazy(() => order_itemsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  order_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  product_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  unit_price: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  total_price: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const ordersWhereInputSchema: z.ZodType<Prisma.ordersWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ordersWhereInputSchema),z.lazy(() => ordersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ordersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ordersWhereInputSchema),z.lazy(() => ordersWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  store_owner_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  customer_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  customer_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customer_email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  customer_phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  total_amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  order_items: z.lazy(() => Order_itemsListRelationFilterSchema).optional(),
  customers: z.union([ z.lazy(() => CustomersNullableScalarRelationFilterSchema),z.lazy(() => customersWhereInputSchema) ]).optional().nullable(),
  stores: z.union([ z.lazy(() => StoresNullableScalarRelationFilterSchema),z.lazy(() => storesWhereInputSchema) ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict();

export const ordersOrderByWithRelationInputSchema: z.ZodType<Prisma.ordersOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  store_owner_id: z.lazy(() => SortOrderSchema).optional(),
  customer_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  customer_name: z.lazy(() => SortOrderSchema).optional(),
  customer_email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  customer_phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  total_amount: z.lazy(() => SortOrderSchema).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  store_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  order_items: z.lazy(() => order_itemsOrderByRelationAggregateInputSchema).optional(),
  customers: z.lazy(() => customersOrderByWithRelationInputSchema).optional(),
  stores: z.lazy(() => storesOrderByWithRelationInputSchema).optional(),
  users: z.lazy(() => usersOrderByWithRelationInputSchema).optional()
}).strict();

export const ordersWhereUniqueInputSchema: z.ZodType<Prisma.ordersWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => ordersWhereInputSchema),z.lazy(() => ordersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ordersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ordersWhereInputSchema),z.lazy(() => ordersWhereInputSchema).array() ]).optional(),
  store_owner_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  customer_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  customer_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customer_email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  customer_phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  total_amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  order_items: z.lazy(() => Order_itemsListRelationFilterSchema).optional(),
  customers: z.union([ z.lazy(() => CustomersNullableScalarRelationFilterSchema),z.lazy(() => customersWhereInputSchema) ]).optional().nullable(),
  stores: z.union([ z.lazy(() => StoresNullableScalarRelationFilterSchema),z.lazy(() => storesWhereInputSchema) ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict());

export const ordersOrderByWithAggregationInputSchema: z.ZodType<Prisma.ordersOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  store_owner_id: z.lazy(() => SortOrderSchema).optional(),
  customer_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  customer_name: z.lazy(() => SortOrderSchema).optional(),
  customer_email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  customer_phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  total_amount: z.lazy(() => SortOrderSchema).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  store_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ordersCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ordersAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ordersMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ordersMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ordersSumOrderByAggregateInputSchema).optional()
}).strict();

export const ordersScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ordersScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ordersScalarWhereWithAggregatesInputSchema),z.lazy(() => ordersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ordersScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ordersScalarWhereWithAggregatesInputSchema),z.lazy(() => ordersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  store_owner_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  customer_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  customer_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  customer_email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  customer_phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  total_amount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  status: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  store_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const product_costsWhereInputSchema: z.ZodType<Prisma.product_costsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => product_costsWhereInputSchema),z.lazy(() => product_costsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => product_costsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => product_costsWhereInputSchema),z.lazy(() => product_costsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  product_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cost_price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  desired_margin: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  suggested_price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const product_costsOrderByWithRelationInputSchema: z.ZodType<Prisma.product_costsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  product_name: z.lazy(() => SortOrderSchema).optional(),
  cost_price: z.lazy(() => SortOrderSchema).optional(),
  desired_margin: z.lazy(() => SortOrderSchema).optional(),
  suggested_price: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const product_costsWhereUniqueInputSchema: z.ZodType<Prisma.product_costsWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => product_costsWhereInputSchema),z.lazy(() => product_costsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => product_costsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => product_costsWhereInputSchema),z.lazy(() => product_costsWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  product_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cost_price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  desired_margin: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  suggested_price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const product_costsOrderByWithAggregationInputSchema: z.ZodType<Prisma.product_costsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  product_name: z.lazy(() => SortOrderSchema).optional(),
  cost_price: z.lazy(() => SortOrderSchema).optional(),
  desired_margin: z.lazy(() => SortOrderSchema).optional(),
  suggested_price: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => product_costsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => product_costsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => product_costsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => product_costsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => product_costsSumOrderByAggregateInputSchema).optional()
}).strict();

export const product_costsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.product_costsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => product_costsScalarWhereWithAggregatesInputSchema),z.lazy(() => product_costsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => product_costsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => product_costsScalarWhereWithAggregatesInputSchema),z.lazy(() => product_costsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  store_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  product_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  cost_price: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  desired_margin: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  suggested_price: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const productsWhereInputSchema: z.ZodType<Prisma.productsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => productsWhereInputSchema),z.lazy(() => productsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => productsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => productsWhereInputSchema),z.lazy(() => productsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  category_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  stock: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  is_active: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  images: z.lazy(() => StringNullableListFilterSchema).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  order_items: z.lazy(() => Order_itemsListRelationFilterSchema).optional(),
  categories: z.union([ z.lazy(() => CategoriesNullableScalarRelationFilterSchema),z.lazy(() => categoriesWhereInputSchema) ]).optional().nullable(),
  stores: z.union([ z.lazy(() => StoresNullableScalarRelationFilterSchema),z.lazy(() => storesWhereInputSchema) ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict();

export const productsOrderByWithRelationInputSchema: z.ZodType<Prisma.productsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  category_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  stock: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  images: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  store_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  order_items: z.lazy(() => order_itemsOrderByRelationAggregateInputSchema).optional(),
  categories: z.lazy(() => categoriesOrderByWithRelationInputSchema).optional(),
  stores: z.lazy(() => storesOrderByWithRelationInputSchema).optional(),
  users: z.lazy(() => usersOrderByWithRelationInputSchema).optional()
}).strict();

export const productsWhereUniqueInputSchema: z.ZodType<Prisma.productsWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => productsWhereInputSchema),z.lazy(() => productsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => productsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => productsWhereInputSchema),z.lazy(() => productsWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  category_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  stock: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  is_active: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  images: z.lazy(() => StringNullableListFilterSchema).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  order_items: z.lazy(() => Order_itemsListRelationFilterSchema).optional(),
  categories: z.union([ z.lazy(() => CategoriesNullableScalarRelationFilterSchema),z.lazy(() => categoriesWhereInputSchema) ]).optional().nullable(),
  stores: z.union([ z.lazy(() => StoresNullableScalarRelationFilterSchema),z.lazy(() => storesWhereInputSchema) ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict());

export const productsOrderByWithAggregationInputSchema: z.ZodType<Prisma.productsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  category_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  stock: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  images: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  store_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => productsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => productsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => productsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => productsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => productsSumOrderByAggregateInputSchema).optional()
}).strict();

export const productsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.productsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => productsScalarWhereWithAggregatesInputSchema),z.lazy(() => productsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => productsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => productsScalarWhereWithAggregatesInputSchema),z.lazy(() => productsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  category_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  price: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  stock: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  is_active: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  image: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  images: z.lazy(() => StringNullableListFilterSchema).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  store_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const profilesWhereInputSchema: z.ZodType<Prisma.profilesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => profilesWhereInputSchema),z.lazy(() => profilesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => profilesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => profilesWhereInputSchema),z.lazy(() => profilesWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  full_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict();

export const profilesOrderByWithRelationInputSchema: z.ZodType<Prisma.profilesOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  full_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  users: z.lazy(() => usersOrderByWithRelationInputSchema).optional()
}).strict();

export const profilesWhereUniqueInputSchema: z.ZodType<Prisma.profilesWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => profilesWhereInputSchema),z.lazy(() => profilesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => profilesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => profilesWhereInputSchema),z.lazy(() => profilesWhereInputSchema).array() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  full_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict());

export const profilesOrderByWithAggregationInputSchema: z.ZodType<Prisma.profilesOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  full_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => profilesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => profilesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => profilesMinOrderByAggregateInputSchema).optional()
}).strict();

export const profilesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.profilesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => profilesScalarWhereWithAggregatesInputSchema),z.lazy(() => profilesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => profilesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => profilesScalarWhereWithAggregatesInputSchema),z.lazy(() => profilesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  full_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const salesWhereInputSchema: z.ZodType<Prisma.salesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => salesWhereInputSchema),z.lazy(() => salesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => salesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => salesWhereInputSchema),z.lazy(() => salesWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  product_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  unit_price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  total_price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  sale_date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  stores: z.union([ z.lazy(() => StoresNullableScalarRelationFilterSchema),z.lazy(() => storesWhereInputSchema) ]).optional().nullable(),
}).strict();

export const salesOrderByWithRelationInputSchema: z.ZodType<Prisma.salesOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  product_name: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  total_price: z.lazy(() => SortOrderSchema).optional(),
  sale_date: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  stores: z.lazy(() => storesOrderByWithRelationInputSchema).optional()
}).strict();

export const salesWhereUniqueInputSchema: z.ZodType<Prisma.salesWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => salesWhereInputSchema),z.lazy(() => salesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => salesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => salesWhereInputSchema),z.lazy(() => salesWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  product_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  unit_price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  total_price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  sale_date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  stores: z.union([ z.lazy(() => StoresNullableScalarRelationFilterSchema),z.lazy(() => storesWhereInputSchema) ]).optional().nullable(),
}).strict());

export const salesOrderByWithAggregationInputSchema: z.ZodType<Prisma.salesOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  product_name: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  total_price: z.lazy(() => SortOrderSchema).optional(),
  sale_date: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => salesCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => salesAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => salesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => salesMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => salesSumOrderByAggregateInputSchema).optional()
}).strict();

export const salesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.salesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => salesScalarWhereWithAggregatesInputSchema),z.lazy(() => salesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => salesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => salesScalarWhereWithAggregatesInputSchema),z.lazy(() => salesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  product_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  unit_price: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  total_price: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  sale_date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  store_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const store_settingsWhereInputSchema: z.ZodType<Prisma.store_settingsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => store_settingsWhereInputSchema),z.lazy(() => store_settingsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => store_settingsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => store_settingsWhereInputSchema),z.lazy(() => store_settingsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  store_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  store_description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mobile_logo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  desktop_banner: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mobile_banner_color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mobile_banner_image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  store_subtitle: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  instagram_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  whatsapp_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict();

export const store_settingsOrderByWithRelationInputSchema: z.ZodType<Prisma.store_settingsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_name: z.lazy(() => SortOrderSchema).optional(),
  store_description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mobile_logo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  desktop_banner: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mobile_banner_color: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mobile_banner_image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  store_subtitle: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  instagram_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  whatsapp_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  users: z.lazy(() => usersOrderByWithRelationInputSchema).optional()
}).strict();

export const store_settingsWhereUniqueInputSchema: z.ZodType<Prisma.store_settingsWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    user_id: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    user_id: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  user_id: z.string().optional(),
  AND: z.union([ z.lazy(() => store_settingsWhereInputSchema),z.lazy(() => store_settingsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => store_settingsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => store_settingsWhereInputSchema),z.lazy(() => store_settingsWhereInputSchema).array() ]).optional(),
  store_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  store_description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mobile_logo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  desktop_banner: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mobile_banner_color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mobile_banner_image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  store_subtitle: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  instagram_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  whatsapp_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict());

export const store_settingsOrderByWithAggregationInputSchema: z.ZodType<Prisma.store_settingsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_name: z.lazy(() => SortOrderSchema).optional(),
  store_description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mobile_logo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  desktop_banner: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mobile_banner_color: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mobile_banner_image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  store_subtitle: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  instagram_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  whatsapp_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => store_settingsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => store_settingsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => store_settingsMinOrderByAggregateInputSchema).optional()
}).strict();

export const store_settingsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.store_settingsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => store_settingsScalarWhereWithAggregatesInputSchema),z.lazy(() => store_settingsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => store_settingsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => store_settingsScalarWhereWithAggregatesInputSchema),z.lazy(() => store_settingsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  store_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  store_description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  mobile_logo: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  desktop_banner: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  mobile_banner_color: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  mobile_banner_image: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  store_subtitle: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  instagram_url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  whatsapp_number: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const storesWhereInputSchema: z.ZodType<Prisma.storesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => storesWhereInputSchema),z.lazy(() => storesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => storesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => storesWhereInputSchema),z.lazy(() => storesWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  domain: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  logo_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  banner_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  whatsapp_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  instagram_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  theme_color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  categories: z.lazy(() => CategoriesListRelationFilterSchema).optional(),
  customers: z.lazy(() => CustomersListRelationFilterSchema).optional(),
  orders: z.lazy(() => OrdersListRelationFilterSchema).optional(),
  products: z.lazy(() => ProductsListRelationFilterSchema).optional(),
  sales: z.lazy(() => SalesListRelationFilterSchema).optional(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict();

export const storesOrderByWithRelationInputSchema: z.ZodType<Prisma.storesOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  domain: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  logo_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banner_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  whatsapp_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  instagram_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  theme_color: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  categories: z.lazy(() => categoriesOrderByRelationAggregateInputSchema).optional(),
  customers: z.lazy(() => customersOrderByRelationAggregateInputSchema).optional(),
  orders: z.lazy(() => ordersOrderByRelationAggregateInputSchema).optional(),
  products: z.lazy(() => productsOrderByRelationAggregateInputSchema).optional(),
  sales: z.lazy(() => salesOrderByRelationAggregateInputSchema).optional(),
  users: z.lazy(() => usersOrderByWithRelationInputSchema).optional()
}).strict();

export const storesWhereUniqueInputSchema: z.ZodType<Prisma.storesWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    slug: z.string(),
    domain: z.string()
  }),
  z.object({
    id: z.string(),
    slug: z.string(),
  }),
  z.object({
    id: z.string(),
    domain: z.string(),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    slug: z.string(),
    domain: z.string(),
  }),
  z.object({
    slug: z.string(),
  }),
  z.object({
    domain: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  slug: z.string().optional(),
  domain: z.string().optional(),
  AND: z.union([ z.lazy(() => storesWhereInputSchema),z.lazy(() => storesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => storesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => storesWhereInputSchema),z.lazy(() => storesWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  logo_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  banner_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  whatsapp_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  instagram_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  theme_color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  categories: z.lazy(() => CategoriesListRelationFilterSchema).optional(),
  customers: z.lazy(() => CustomersListRelationFilterSchema).optional(),
  orders: z.lazy(() => OrdersListRelationFilterSchema).optional(),
  products: z.lazy(() => ProductsListRelationFilterSchema).optional(),
  sales: z.lazy(() => SalesListRelationFilterSchema).optional(),
  users: z.union([ z.lazy(() => UsersScalarRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict());

export const storesOrderByWithAggregationInputSchema: z.ZodType<Prisma.storesOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  domain: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  logo_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banner_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  whatsapp_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  instagram_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  theme_color: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => storesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => storesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => storesMinOrderByAggregateInputSchema).optional()
}).strict();

export const storesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.storesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => storesScalarWhereWithAggregatesInputSchema),z.lazy(() => storesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => storesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => storesScalarWhereWithAggregatesInputSchema),z.lazy(() => storesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  domain: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  logo_url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  banner_url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  whatsapp_number: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  instagram_url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  theme_color: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  domains: z.lazy(() => DomainListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  domains: z.lazy(() => DomainOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    email: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  domains: z.lazy(() => DomainListRelationFilterSchema).optional()
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const DomainWhereInputSchema: z.ZodType<Prisma.DomainWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DomainWhereInputSchema),z.lazy(() => DomainWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DomainWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DomainWhereInputSchema),z.lazy(() => DomainWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  products: z.lazy(() => ProductListRelationFilterSchema).optional()
}).strict();

export const DomainOrderByWithRelationInputSchema: z.ZodType<Prisma.DomainOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  products: z.lazy(() => ProductOrderByRelationAggregateInputSchema).optional()
}).strict();

export const DomainWhereUniqueInputSchema: z.ZodType<Prisma.DomainWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    slug: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    slug: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  slug: z.string().optional(),
  AND: z.union([ z.lazy(() => DomainWhereInputSchema),z.lazy(() => DomainWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DomainWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DomainWhereInputSchema),z.lazy(() => DomainWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  products: z.lazy(() => ProductListRelationFilterSchema).optional()
}).strict());

export const DomainOrderByWithAggregationInputSchema: z.ZodType<Prisma.DomainOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => DomainCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => DomainMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => DomainMinOrderByAggregateInputSchema).optional()
}).strict();

export const DomainScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.DomainScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => DomainScalarWhereWithAggregatesInputSchema),z.lazy(() => DomainScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => DomainScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DomainScalarWhereWithAggregatesInputSchema),z.lazy(() => DomainScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProductWhereInputSchema: z.ZodType<Prisma.ProductWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProductWhereInputSchema),z.lazy(() => ProductWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductWhereInputSchema),z.lazy(() => ProductWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  imageUrl: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  domainId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  domain: z.union([ z.lazy(() => DomainScalarRelationFilterSchema),z.lazy(() => DomainWhereInputSchema) ]).optional(),
}).strict();

export const ProductOrderByWithRelationInputSchema: z.ZodType<Prisma.ProductOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.lazy(() => SortOrderSchema).optional(),
  domainId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  domain: z.lazy(() => DomainOrderByWithRelationInputSchema).optional()
}).strict();

export const ProductWhereUniqueInputSchema: z.ZodType<Prisma.ProductWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => ProductWhereInputSchema),z.lazy(() => ProductWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductWhereInputSchema),z.lazy(() => ProductWhereInputSchema).array() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  imageUrl: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  domainId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  domain: z.union([ z.lazy(() => DomainScalarRelationFilterSchema),z.lazy(() => DomainWhereInputSchema) ]).optional(),
}).strict());

export const ProductOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProductOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.lazy(() => SortOrderSchema).optional(),
  domainId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProductCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ProductAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProductMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProductMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ProductSumOrderByAggregateInputSchema).optional()
}).strict();

export const ProductScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProductScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProductScalarWhereWithAggregatesInputSchema),z.lazy(() => ProductScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductScalarWhereWithAggregatesInputSchema),z.lazy(() => ProductScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  imageUrl: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  domainId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const audit_log_entriesCreateInputSchema: z.ZodType<Prisma.audit_log_entriesCreateInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  payload: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  ip_address: z.string().optional()
}).strict();

export const audit_log_entriesUncheckedCreateInputSchema: z.ZodType<Prisma.audit_log_entriesUncheckedCreateInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  payload: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  ip_address: z.string().optional()
}).strict();

export const audit_log_entriesUpdateInputSchema: z.ZodType<Prisma.audit_log_entriesUpdateInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  payload: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const audit_log_entriesUncheckedUpdateInputSchema: z.ZodType<Prisma.audit_log_entriesUncheckedUpdateInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  payload: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const audit_log_entriesCreateManyInputSchema: z.ZodType<Prisma.audit_log_entriesCreateManyInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  payload: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  ip_address: z.string().optional()
}).strict();

export const audit_log_entriesUpdateManyMutationInputSchema: z.ZodType<Prisma.audit_log_entriesUpdateManyMutationInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  payload: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const audit_log_entriesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.audit_log_entriesUncheckedUpdateManyInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  payload: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const flow_stateCreateInputSchema: z.ZodType<Prisma.flow_stateCreateInput> = z.object({
  id: z.string(),
  user_id: z.string().optional().nullable(),
  auth_code: z.string(),
  code_challenge_method: z.lazy(() => code_challenge_methodSchema),
  code_challenge: z.string(),
  provider_type: z.string(),
  provider_access_token: z.string().optional().nullable(),
  provider_refresh_token: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  authentication_method: z.string(),
  auth_code_issued_at: z.coerce.date().optional().nullable(),
  saml_relay_states: z.lazy(() => saml_relay_statesCreateNestedManyWithoutFlow_stateInputSchema).optional()
}).strict();

export const flow_stateUncheckedCreateInputSchema: z.ZodType<Prisma.flow_stateUncheckedCreateInput> = z.object({
  id: z.string(),
  user_id: z.string().optional().nullable(),
  auth_code: z.string(),
  code_challenge_method: z.lazy(() => code_challenge_methodSchema),
  code_challenge: z.string(),
  provider_type: z.string(),
  provider_access_token: z.string().optional().nullable(),
  provider_refresh_token: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  authentication_method: z.string(),
  auth_code_issued_at: z.coerce.date().optional().nullable(),
  saml_relay_states: z.lazy(() => saml_relay_statesUncheckedCreateNestedManyWithoutFlow_stateInputSchema).optional()
}).strict();

export const flow_stateUpdateInputSchema: z.ZodType<Prisma.flow_stateUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code_challenge_method: z.union([ z.lazy(() => code_challenge_methodSchema),z.lazy(() => Enumcode_challenge_methodFieldUpdateOperationsInputSchema) ]).optional(),
  code_challenge: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider_access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  provider_refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  authentication_method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  auth_code_issued_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  saml_relay_states: z.lazy(() => saml_relay_statesUpdateManyWithoutFlow_stateNestedInputSchema).optional()
}).strict();

export const flow_stateUncheckedUpdateInputSchema: z.ZodType<Prisma.flow_stateUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code_challenge_method: z.union([ z.lazy(() => code_challenge_methodSchema),z.lazy(() => Enumcode_challenge_methodFieldUpdateOperationsInputSchema) ]).optional(),
  code_challenge: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider_access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  provider_refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  authentication_method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  auth_code_issued_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  saml_relay_states: z.lazy(() => saml_relay_statesUncheckedUpdateManyWithoutFlow_stateNestedInputSchema).optional()
}).strict();

export const flow_stateCreateManyInputSchema: z.ZodType<Prisma.flow_stateCreateManyInput> = z.object({
  id: z.string(),
  user_id: z.string().optional().nullable(),
  auth_code: z.string(),
  code_challenge_method: z.lazy(() => code_challenge_methodSchema),
  code_challenge: z.string(),
  provider_type: z.string(),
  provider_access_token: z.string().optional().nullable(),
  provider_refresh_token: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  authentication_method: z.string(),
  auth_code_issued_at: z.coerce.date().optional().nullable()
}).strict();

export const flow_stateUpdateManyMutationInputSchema: z.ZodType<Prisma.flow_stateUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code_challenge_method: z.union([ z.lazy(() => code_challenge_methodSchema),z.lazy(() => Enumcode_challenge_methodFieldUpdateOperationsInputSchema) ]).optional(),
  code_challenge: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider_access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  provider_refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  authentication_method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  auth_code_issued_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const flow_stateUncheckedUpdateManyInputSchema: z.ZodType<Prisma.flow_stateUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code_challenge_method: z.union([ z.lazy(() => code_challenge_methodSchema),z.lazy(() => Enumcode_challenge_methodFieldUpdateOperationsInputSchema) ]).optional(),
  code_challenge: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider_access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  provider_refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  authentication_method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  auth_code_issued_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const identitiesCreateInputSchema: z.ZodType<Prisma.identitiesCreateInput> = z.object({
  provider_id: z.string(),
  identity_data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  provider: z.string(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  id: z.string().optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutIdentitiesInputSchema)
}).strict();

export const identitiesUncheckedCreateInputSchema: z.ZodType<Prisma.identitiesUncheckedCreateInput> = z.object({
  provider_id: z.string(),
  user_id: z.string(),
  identity_data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  provider: z.string(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  id: z.string().optional()
}).strict();

export const identitiesUpdateInputSchema: z.ZodType<Prisma.identitiesUpdateInput> = z.object({
  provider_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identity_data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutIdentitiesNestedInputSchema).optional()
}).strict();

export const identitiesUncheckedUpdateInputSchema: z.ZodType<Prisma.identitiesUncheckedUpdateInput> = z.object({
  provider_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identity_data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const identitiesCreateManyInputSchema: z.ZodType<Prisma.identitiesCreateManyInput> = z.object({
  provider_id: z.string(),
  user_id: z.string(),
  identity_data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  provider: z.string(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  id: z.string().optional()
}).strict();

export const identitiesUpdateManyMutationInputSchema: z.ZodType<Prisma.identitiesUpdateManyMutationInput> = z.object({
  provider_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identity_data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const identitiesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.identitiesUncheckedUpdateManyInput> = z.object({
  provider_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identity_data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const instancesCreateInputSchema: z.ZodType<Prisma.instancesCreateInput> = z.object({
  id: z.string(),
  uuid: z.string().optional().nullable(),
  raw_base_config: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable()
}).strict();

export const instancesUncheckedCreateInputSchema: z.ZodType<Prisma.instancesUncheckedCreateInput> = z.object({
  id: z.string(),
  uuid: z.string().optional().nullable(),
  raw_base_config: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable()
}).strict();

export const instancesUpdateInputSchema: z.ZodType<Prisma.instancesUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uuid: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_base_config: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const instancesUncheckedUpdateInputSchema: z.ZodType<Prisma.instancesUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uuid: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_base_config: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const instancesCreateManyInputSchema: z.ZodType<Prisma.instancesCreateManyInput> = z.object({
  id: z.string(),
  uuid: z.string().optional().nullable(),
  raw_base_config: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable()
}).strict();

export const instancesUpdateManyMutationInputSchema: z.ZodType<Prisma.instancesUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uuid: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_base_config: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const instancesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.instancesUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uuid: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_base_config: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const mfa_amr_claimsCreateInputSchema: z.ZodType<Prisma.mfa_amr_claimsCreateInput> = z.object({
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  authentication_method: z.string(),
  id: z.string(),
  sessions: z.lazy(() => sessionsCreateNestedOneWithoutMfa_amr_claimsInputSchema)
}).strict();

export const mfa_amr_claimsUncheckedCreateInputSchema: z.ZodType<Prisma.mfa_amr_claimsUncheckedCreateInput> = z.object({
  session_id: z.string(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  authentication_method: z.string(),
  id: z.string()
}).strict();

export const mfa_amr_claimsUpdateInputSchema: z.ZodType<Prisma.mfa_amr_claimsUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  authentication_method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessions: z.lazy(() => sessionsUpdateOneRequiredWithoutMfa_amr_claimsNestedInputSchema).optional()
}).strict();

export const mfa_amr_claimsUncheckedUpdateInputSchema: z.ZodType<Prisma.mfa_amr_claimsUncheckedUpdateInput> = z.object({
  session_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  authentication_method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const mfa_amr_claimsCreateManyInputSchema: z.ZodType<Prisma.mfa_amr_claimsCreateManyInput> = z.object({
  session_id: z.string(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  authentication_method: z.string(),
  id: z.string()
}).strict();

export const mfa_amr_claimsUpdateManyMutationInputSchema: z.ZodType<Prisma.mfa_amr_claimsUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  authentication_method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const mfa_amr_claimsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.mfa_amr_claimsUncheckedUpdateManyInput> = z.object({
  session_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  authentication_method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const mfa_challengesCreateInputSchema: z.ZodType<Prisma.mfa_challengesCreateInput> = z.object({
  id: z.string(),
  created_at: z.coerce.date(),
  verified_at: z.coerce.date().optional().nullable(),
  ip_address: z.string(),
  otp_code: z.string().optional().nullable(),
  web_authn_session_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  mfa_factors: z.lazy(() => mfa_factorsCreateNestedOneWithoutMfa_challengesInputSchema)
}).strict();

export const mfa_challengesUncheckedCreateInputSchema: z.ZodType<Prisma.mfa_challengesUncheckedCreateInput> = z.object({
  id: z.string(),
  factor_id: z.string(),
  created_at: z.coerce.date(),
  verified_at: z.coerce.date().optional().nullable(),
  ip_address: z.string(),
  otp_code: z.string().optional().nullable(),
  web_authn_session_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const mfa_challengesUpdateInputSchema: z.ZodType<Prisma.mfa_challengesUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  verified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  otp_code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_authn_session_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUpdateOneRequiredWithoutMfa_challengesNestedInputSchema).optional()
}).strict();

export const mfa_challengesUncheckedUpdateInputSchema: z.ZodType<Prisma.mfa_challengesUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  factor_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  verified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  otp_code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_authn_session_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const mfa_challengesCreateManyInputSchema: z.ZodType<Prisma.mfa_challengesCreateManyInput> = z.object({
  id: z.string(),
  factor_id: z.string(),
  created_at: z.coerce.date(),
  verified_at: z.coerce.date().optional().nullable(),
  ip_address: z.string(),
  otp_code: z.string().optional().nullable(),
  web_authn_session_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const mfa_challengesUpdateManyMutationInputSchema: z.ZodType<Prisma.mfa_challengesUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  verified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  otp_code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_authn_session_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const mfa_challengesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.mfa_challengesUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  factor_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  verified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  otp_code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_authn_session_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const mfa_factorsCreateInputSchema: z.ZodType<Prisma.mfa_factorsCreateInput> = z.object({
  id: z.string(),
  friendly_name: z.string().optional().nullable(),
  factor_type: z.lazy(() => factor_typeSchema),
  status: z.lazy(() => factor_statusSchema),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  secret: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  last_challenged_at: z.coerce.date().optional().nullable(),
  web_authn_credential: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  web_authn_aaguid: z.string().optional().nullable(),
  mfa_challenges: z.lazy(() => mfa_challengesCreateNestedManyWithoutMfa_factorsInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutMfa_factorsInputSchema)
}).strict();

export const mfa_factorsUncheckedCreateInputSchema: z.ZodType<Prisma.mfa_factorsUncheckedCreateInput> = z.object({
  id: z.string(),
  user_id: z.string(),
  friendly_name: z.string().optional().nullable(),
  factor_type: z.lazy(() => factor_typeSchema),
  status: z.lazy(() => factor_statusSchema),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  secret: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  last_challenged_at: z.coerce.date().optional().nullable(),
  web_authn_credential: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  web_authn_aaguid: z.string().optional().nullable(),
  mfa_challenges: z.lazy(() => mfa_challengesUncheckedCreateNestedManyWithoutMfa_factorsInputSchema).optional()
}).strict();

export const mfa_factorsUpdateInputSchema: z.ZodType<Prisma.mfa_factorsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friendly_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  factor_type: z.union([ z.lazy(() => factor_typeSchema),z.lazy(() => Enumfactor_typeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => factor_statusSchema),z.lazy(() => Enumfactor_statusFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_challenged_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_authn_credential: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  web_authn_aaguid: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mfa_challenges: z.lazy(() => mfa_challengesUpdateManyWithoutMfa_factorsNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutMfa_factorsNestedInputSchema).optional()
}).strict();

export const mfa_factorsUncheckedUpdateInputSchema: z.ZodType<Prisma.mfa_factorsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friendly_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  factor_type: z.union([ z.lazy(() => factor_typeSchema),z.lazy(() => Enumfactor_typeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => factor_statusSchema),z.lazy(() => Enumfactor_statusFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_challenged_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_authn_credential: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  web_authn_aaguid: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mfa_challenges: z.lazy(() => mfa_challengesUncheckedUpdateManyWithoutMfa_factorsNestedInputSchema).optional()
}).strict();

export const mfa_factorsCreateManyInputSchema: z.ZodType<Prisma.mfa_factorsCreateManyInput> = z.object({
  id: z.string(),
  user_id: z.string(),
  friendly_name: z.string().optional().nullable(),
  factor_type: z.lazy(() => factor_typeSchema),
  status: z.lazy(() => factor_statusSchema),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  secret: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  last_challenged_at: z.coerce.date().optional().nullable(),
  web_authn_credential: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  web_authn_aaguid: z.string().optional().nullable()
}).strict();

export const mfa_factorsUpdateManyMutationInputSchema: z.ZodType<Prisma.mfa_factorsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friendly_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  factor_type: z.union([ z.lazy(() => factor_typeSchema),z.lazy(() => Enumfactor_typeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => factor_statusSchema),z.lazy(() => Enumfactor_statusFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_challenged_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_authn_credential: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  web_authn_aaguid: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const mfa_factorsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.mfa_factorsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friendly_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  factor_type: z.union([ z.lazy(() => factor_typeSchema),z.lazy(() => Enumfactor_typeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => factor_statusSchema),z.lazy(() => Enumfactor_statusFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_challenged_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_authn_credential: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  web_authn_aaguid: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const one_time_tokensCreateInputSchema: z.ZodType<Prisma.one_time_tokensCreateInput> = z.object({
  id: z.string(),
  token_type: z.lazy(() => one_time_token_typeSchema),
  token_hash: z.string(),
  relates_to: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutOne_time_tokensInputSchema)
}).strict();

export const one_time_tokensUncheckedCreateInputSchema: z.ZodType<Prisma.one_time_tokensUncheckedCreateInput> = z.object({
  id: z.string(),
  user_id: z.string(),
  token_type: z.lazy(() => one_time_token_typeSchema),
  token_hash: z.string(),
  relates_to: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const one_time_tokensUpdateInputSchema: z.ZodType<Prisma.one_time_tokensUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token_type: z.union([ z.lazy(() => one_time_token_typeSchema),z.lazy(() => Enumone_time_token_typeFieldUpdateOperationsInputSchema) ]).optional(),
  token_hash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relates_to: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutOne_time_tokensNestedInputSchema).optional()
}).strict();

export const one_time_tokensUncheckedUpdateInputSchema: z.ZodType<Prisma.one_time_tokensUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token_type: z.union([ z.lazy(() => one_time_token_typeSchema),z.lazy(() => Enumone_time_token_typeFieldUpdateOperationsInputSchema) ]).optional(),
  token_hash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relates_to: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const one_time_tokensCreateManyInputSchema: z.ZodType<Prisma.one_time_tokensCreateManyInput> = z.object({
  id: z.string(),
  user_id: z.string(),
  token_type: z.lazy(() => one_time_token_typeSchema),
  token_hash: z.string(),
  relates_to: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const one_time_tokensUpdateManyMutationInputSchema: z.ZodType<Prisma.one_time_tokensUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token_type: z.union([ z.lazy(() => one_time_token_typeSchema),z.lazy(() => Enumone_time_token_typeFieldUpdateOperationsInputSchema) ]).optional(),
  token_hash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relates_to: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const one_time_tokensUncheckedUpdateManyInputSchema: z.ZodType<Prisma.one_time_tokensUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token_type: z.union([ z.lazy(() => one_time_token_typeSchema),z.lazy(() => Enumone_time_token_typeFieldUpdateOperationsInputSchema) ]).optional(),
  token_hash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relates_to: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const refresh_tokensCreateInputSchema: z.ZodType<Prisma.refresh_tokensCreateInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.bigint().optional(),
  token: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
  revoked: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  parent: z.string().optional().nullable(),
  sessions: z.lazy(() => sessionsCreateNestedOneWithoutRefresh_tokensInputSchema).optional()
}).strict();

export const refresh_tokensUncheckedCreateInputSchema: z.ZodType<Prisma.refresh_tokensUncheckedCreateInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.bigint().optional(),
  token: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
  revoked: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  parent: z.string().optional().nullable(),
  session_id: z.string().optional().nullable()
}).strict();

export const refresh_tokensUpdateInputSchema: z.ZodType<Prisma.refresh_tokensUpdateInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  revoked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => sessionsUpdateOneWithoutRefresh_tokensNestedInputSchema).optional()
}).strict();

export const refresh_tokensUncheckedUpdateInputSchema: z.ZodType<Prisma.refresh_tokensUncheckedUpdateInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  revoked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const refresh_tokensCreateManyInputSchema: z.ZodType<Prisma.refresh_tokensCreateManyInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.bigint().optional(),
  token: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
  revoked: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  parent: z.string().optional().nullable(),
  session_id: z.string().optional().nullable()
}).strict();

export const refresh_tokensUpdateManyMutationInputSchema: z.ZodType<Prisma.refresh_tokensUpdateManyMutationInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  revoked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const refresh_tokensUncheckedUpdateManyInputSchema: z.ZodType<Prisma.refresh_tokensUncheckedUpdateManyInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  revoked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const saml_providersCreateInputSchema: z.ZodType<Prisma.saml_providersCreateInput> = z.object({
  id: z.string(),
  entity_id: z.string(),
  metadata_xml: z.string(),
  metadata_url: z.string().optional().nullable(),
  attribute_mapping: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  name_id_format: z.string().optional().nullable(),
  sso_providers: z.lazy(() => sso_providersCreateNestedOneWithoutSaml_providersInputSchema)
}).strict();

export const saml_providersUncheckedCreateInputSchema: z.ZodType<Prisma.saml_providersUncheckedCreateInput> = z.object({
  id: z.string(),
  sso_provider_id: z.string(),
  entity_id: z.string(),
  metadata_xml: z.string(),
  metadata_url: z.string().optional().nullable(),
  attribute_mapping: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  name_id_format: z.string().optional().nullable()
}).strict();

export const saml_providersUpdateInputSchema: z.ZodType<Prisma.saml_providersUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata_xml: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribute_mapping: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_id_format: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sso_providers: z.lazy(() => sso_providersUpdateOneRequiredWithoutSaml_providersNestedInputSchema).optional()
}).strict();

export const saml_providersUncheckedUpdateInputSchema: z.ZodType<Prisma.saml_providersUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sso_provider_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata_xml: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribute_mapping: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_id_format: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const saml_providersCreateManyInputSchema: z.ZodType<Prisma.saml_providersCreateManyInput> = z.object({
  id: z.string(),
  sso_provider_id: z.string(),
  entity_id: z.string(),
  metadata_xml: z.string(),
  metadata_url: z.string().optional().nullable(),
  attribute_mapping: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  name_id_format: z.string().optional().nullable()
}).strict();

export const saml_providersUpdateManyMutationInputSchema: z.ZodType<Prisma.saml_providersUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata_xml: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribute_mapping: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_id_format: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const saml_providersUncheckedUpdateManyInputSchema: z.ZodType<Prisma.saml_providersUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sso_provider_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata_xml: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribute_mapping: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_id_format: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const saml_relay_statesCreateInputSchema: z.ZodType<Prisma.saml_relay_statesCreateInput> = z.object({
  id: z.string(),
  request_id: z.string(),
  for_email: z.string().optional().nullable(),
  redirect_to: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  flow_state: z.lazy(() => flow_stateCreateNestedOneWithoutSaml_relay_statesInputSchema).optional(),
  sso_providers: z.lazy(() => sso_providersCreateNestedOneWithoutSaml_relay_statesInputSchema)
}).strict();

export const saml_relay_statesUncheckedCreateInputSchema: z.ZodType<Prisma.saml_relay_statesUncheckedCreateInput> = z.object({
  id: z.string(),
  sso_provider_id: z.string(),
  request_id: z.string(),
  for_email: z.string().optional().nullable(),
  redirect_to: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  flow_state_id: z.string().optional().nullable()
}).strict();

export const saml_relay_statesUpdateInputSchema: z.ZodType<Prisma.saml_relay_statesUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  request_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  for_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  redirect_to: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  flow_state: z.lazy(() => flow_stateUpdateOneWithoutSaml_relay_statesNestedInputSchema).optional(),
  sso_providers: z.lazy(() => sso_providersUpdateOneRequiredWithoutSaml_relay_statesNestedInputSchema).optional()
}).strict();

export const saml_relay_statesUncheckedUpdateInputSchema: z.ZodType<Prisma.saml_relay_statesUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sso_provider_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  request_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  for_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  redirect_to: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  flow_state_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const saml_relay_statesCreateManyInputSchema: z.ZodType<Prisma.saml_relay_statesCreateManyInput> = z.object({
  id: z.string(),
  sso_provider_id: z.string(),
  request_id: z.string(),
  for_email: z.string().optional().nullable(),
  redirect_to: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  flow_state_id: z.string().optional().nullable()
}).strict();

export const saml_relay_statesUpdateManyMutationInputSchema: z.ZodType<Prisma.saml_relay_statesUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  request_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  for_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  redirect_to: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const saml_relay_statesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.saml_relay_statesUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sso_provider_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  request_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  for_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  redirect_to: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  flow_state_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const schema_migrationsCreateInputSchema: z.ZodType<Prisma.schema_migrationsCreateInput> = z.object({
  version: z.string()
}).strict();

export const schema_migrationsUncheckedCreateInputSchema: z.ZodType<Prisma.schema_migrationsUncheckedCreateInput> = z.object({
  version: z.string()
}).strict();

export const schema_migrationsUpdateInputSchema: z.ZodType<Prisma.schema_migrationsUpdateInput> = z.object({
  version: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const schema_migrationsUncheckedUpdateInputSchema: z.ZodType<Prisma.schema_migrationsUncheckedUpdateInput> = z.object({
  version: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const schema_migrationsCreateManyInputSchema: z.ZodType<Prisma.schema_migrationsCreateManyInput> = z.object({
  version: z.string()
}).strict();

export const schema_migrationsUpdateManyMutationInputSchema: z.ZodType<Prisma.schema_migrationsUpdateManyMutationInput> = z.object({
  version: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const schema_migrationsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.schema_migrationsUncheckedUpdateManyInput> = z.object({
  version: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const sessionsCreateInputSchema: z.ZodType<Prisma.sessionsCreateInput> = z.object({
  id: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  factor_id: z.string().optional().nullable(),
  aal: z.lazy(() => aal_levelSchema).optional().nullable(),
  not_after: z.coerce.date().optional().nullable(),
  refreshed_at: z.coerce.date().optional().nullable(),
  user_agent: z.string().optional().nullable(),
  ip: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  mfa_amr_claims: z.lazy(() => mfa_amr_claimsCreateNestedManyWithoutSessionsInputSchema).optional(),
  refresh_tokens: z.lazy(() => refresh_tokensCreateNestedManyWithoutSessionsInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutSessionsInputSchema)
}).strict();

export const sessionsUncheckedCreateInputSchema: z.ZodType<Prisma.sessionsUncheckedCreateInput> = z.object({
  id: z.string(),
  user_id: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  factor_id: z.string().optional().nullable(),
  aal: z.lazy(() => aal_levelSchema).optional().nullable(),
  not_after: z.coerce.date().optional().nullable(),
  refreshed_at: z.coerce.date().optional().nullable(),
  user_agent: z.string().optional().nullable(),
  ip: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  mfa_amr_claims: z.lazy(() => mfa_amr_claimsUncheckedCreateNestedManyWithoutSessionsInputSchema).optional(),
  refresh_tokens: z.lazy(() => refresh_tokensUncheckedCreateNestedManyWithoutSessionsInputSchema).optional()
}).strict();

export const sessionsUpdateInputSchema: z.ZodType<Prisma.sessionsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  factor_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aal: z.union([ z.lazy(() => aal_levelSchema),z.lazy(() => NullableEnumaal_levelFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  not_after: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_agent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mfa_amr_claims: z.lazy(() => mfa_amr_claimsUpdateManyWithoutSessionsNestedInputSchema).optional(),
  refresh_tokens: z.lazy(() => refresh_tokensUpdateManyWithoutSessionsNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutSessionsNestedInputSchema).optional()
}).strict();

export const sessionsUncheckedUpdateInputSchema: z.ZodType<Prisma.sessionsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  factor_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aal: z.union([ z.lazy(() => aal_levelSchema),z.lazy(() => NullableEnumaal_levelFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  not_after: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_agent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mfa_amr_claims: z.lazy(() => mfa_amr_claimsUncheckedUpdateManyWithoutSessionsNestedInputSchema).optional(),
  refresh_tokens: z.lazy(() => refresh_tokensUncheckedUpdateManyWithoutSessionsNestedInputSchema).optional()
}).strict();

export const sessionsCreateManyInputSchema: z.ZodType<Prisma.sessionsCreateManyInput> = z.object({
  id: z.string(),
  user_id: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  factor_id: z.string().optional().nullable(),
  aal: z.lazy(() => aal_levelSchema).optional().nullable(),
  not_after: z.coerce.date().optional().nullable(),
  refreshed_at: z.coerce.date().optional().nullable(),
  user_agent: z.string().optional().nullable(),
  ip: z.string().optional().nullable(),
  tag: z.string().optional().nullable()
}).strict();

export const sessionsUpdateManyMutationInputSchema: z.ZodType<Prisma.sessionsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  factor_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aal: z.union([ z.lazy(() => aal_levelSchema),z.lazy(() => NullableEnumaal_levelFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  not_after: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_agent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const sessionsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.sessionsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  factor_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aal: z.union([ z.lazy(() => aal_levelSchema),z.lazy(() => NullableEnumaal_levelFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  not_after: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_agent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const sso_domainsCreateInputSchema: z.ZodType<Prisma.sso_domainsCreateInput> = z.object({
  id: z.string(),
  domain: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  sso_providers: z.lazy(() => sso_providersCreateNestedOneWithoutSso_domainsInputSchema)
}).strict();

export const sso_domainsUncheckedCreateInputSchema: z.ZodType<Prisma.sso_domainsUncheckedCreateInput> = z.object({
  id: z.string(),
  sso_provider_id: z.string(),
  domain: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable()
}).strict();

export const sso_domainsUpdateInputSchema: z.ZodType<Prisma.sso_domainsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sso_providers: z.lazy(() => sso_providersUpdateOneRequiredWithoutSso_domainsNestedInputSchema).optional()
}).strict();

export const sso_domainsUncheckedUpdateInputSchema: z.ZodType<Prisma.sso_domainsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sso_provider_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const sso_domainsCreateManyInputSchema: z.ZodType<Prisma.sso_domainsCreateManyInput> = z.object({
  id: z.string(),
  sso_provider_id: z.string(),
  domain: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable()
}).strict();

export const sso_domainsUpdateManyMutationInputSchema: z.ZodType<Prisma.sso_domainsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const sso_domainsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.sso_domainsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sso_provider_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const sso_providersCreateInputSchema: z.ZodType<Prisma.sso_providersCreateInput> = z.object({
  id: z.string(),
  resource_id: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  saml_providers: z.lazy(() => saml_providersCreateNestedManyWithoutSso_providersInputSchema).optional(),
  saml_relay_states: z.lazy(() => saml_relay_statesCreateNestedManyWithoutSso_providersInputSchema).optional(),
  sso_domains: z.lazy(() => sso_domainsCreateNestedManyWithoutSso_providersInputSchema).optional()
}).strict();

export const sso_providersUncheckedCreateInputSchema: z.ZodType<Prisma.sso_providersUncheckedCreateInput> = z.object({
  id: z.string(),
  resource_id: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  saml_providers: z.lazy(() => saml_providersUncheckedCreateNestedManyWithoutSso_providersInputSchema).optional(),
  saml_relay_states: z.lazy(() => saml_relay_statesUncheckedCreateNestedManyWithoutSso_providersInputSchema).optional(),
  sso_domains: z.lazy(() => sso_domainsUncheckedCreateNestedManyWithoutSso_providersInputSchema).optional()
}).strict();

export const sso_providersUpdateInputSchema: z.ZodType<Prisma.sso_providersUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resource_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  saml_providers: z.lazy(() => saml_providersUpdateManyWithoutSso_providersNestedInputSchema).optional(),
  saml_relay_states: z.lazy(() => saml_relay_statesUpdateManyWithoutSso_providersNestedInputSchema).optional(),
  sso_domains: z.lazy(() => sso_domainsUpdateManyWithoutSso_providersNestedInputSchema).optional()
}).strict();

export const sso_providersUncheckedUpdateInputSchema: z.ZodType<Prisma.sso_providersUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resource_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  saml_providers: z.lazy(() => saml_providersUncheckedUpdateManyWithoutSso_providersNestedInputSchema).optional(),
  saml_relay_states: z.lazy(() => saml_relay_statesUncheckedUpdateManyWithoutSso_providersNestedInputSchema).optional(),
  sso_domains: z.lazy(() => sso_domainsUncheckedUpdateManyWithoutSso_providersNestedInputSchema).optional()
}).strict();

export const sso_providersCreateManyInputSchema: z.ZodType<Prisma.sso_providersCreateManyInput> = z.object({
  id: z.string(),
  resource_id: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable()
}).strict();

export const sso_providersUpdateManyMutationInputSchema: z.ZodType<Prisma.sso_providersUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resource_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const sso_providersUncheckedUpdateManyInputSchema: z.ZodType<Prisma.sso_providersUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resource_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const usersCreateInputSchema: z.ZodType<Prisma.usersCreateInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersUncheckedCreateInputSchema: z.ZodType<Prisma.usersUncheckedCreateInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersUpdateInputSchema: z.ZodType<Prisma.usersUpdateInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateInputSchema: z.ZodType<Prisma.usersUncheckedUpdateInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const usersCreateManyInputSchema: z.ZodType<Prisma.usersCreateManyInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional()
}).strict();

export const usersUpdateManyMutationInputSchema: z.ZodType<Prisma.usersUpdateManyMutationInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const usersUncheckedUpdateManyInputSchema: z.ZodType<Prisma.usersUncheckedUpdateManyInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const cash_flowCreateInputSchema: z.ZodType<Prisma.cash_flowCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  store_id: z.string().optional().nullable(),
  type: z.string(),
  category: z.string(),
  description: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  date: z.coerce.date().optional(),
  payment_method: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const cash_flowUncheckedCreateInputSchema: z.ZodType<Prisma.cash_flowUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  store_id: z.string().optional().nullable(),
  type: z.string(),
  category: z.string(),
  description: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  date: z.coerce.date().optional(),
  payment_method: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const cash_flowUpdateInputSchema: z.ZodType<Prisma.cash_flowUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payment_method: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const cash_flowUncheckedUpdateInputSchema: z.ZodType<Prisma.cash_flowUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payment_method: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const cash_flowCreateManyInputSchema: z.ZodType<Prisma.cash_flowCreateManyInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  store_id: z.string().optional().nullable(),
  type: z.string(),
  category: z.string(),
  description: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  date: z.coerce.date().optional(),
  payment_method: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const cash_flowUpdateManyMutationInputSchema: z.ZodType<Prisma.cash_flowUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payment_method: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const cash_flowUncheckedUpdateManyInputSchema: z.ZodType<Prisma.cash_flowUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payment_method: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const categoriesCreateInputSchema: z.ZodType<Prisma.categoriesCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  color: z.string().optional().nullable(),
  image: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  stores: z.lazy(() => storesCreateNestedOneWithoutCategoriesInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutCategoriesInputSchema),
  products: z.lazy(() => productsCreateNestedManyWithoutCategoriesInputSchema).optional()
}).strict();

export const categoriesUncheckedCreateInputSchema: z.ZodType<Prisma.categoriesUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  name: z.string(),
  color: z.string().optional().nullable(),
  image: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutCategoriesInputSchema).optional()
}).strict();

export const categoriesUpdateInputSchema: z.ZodType<Prisma.categoriesUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stores: z.lazy(() => storesUpdateOneWithoutCategoriesNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutCategoriesNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutCategoriesNestedInputSchema).optional()
}).strict();

export const categoriesUncheckedUpdateInputSchema: z.ZodType<Prisma.categoriesUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutCategoriesNestedInputSchema).optional()
}).strict();

export const categoriesCreateManyInputSchema: z.ZodType<Prisma.categoriesCreateManyInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  name: z.string(),
  color: z.string().optional().nullable(),
  image: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable()
}).strict();

export const categoriesUpdateManyMutationInputSchema: z.ZodType<Prisma.categoriesUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const categoriesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.categoriesUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const controller_adminsCreateInputSchema: z.ZodType<Prisma.controller_adminsCreateInput> = z.object({
  id: z.string().optional(),
  email: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutController_adminsInputSchema)
}).strict();

export const controller_adminsUncheckedCreateInputSchema: z.ZodType<Prisma.controller_adminsUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  email: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const controller_adminsUpdateInputSchema: z.ZodType<Prisma.controller_adminsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutController_adminsNestedInputSchema).optional()
}).strict();

export const controller_adminsUncheckedUpdateInputSchema: z.ZodType<Prisma.controller_adminsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const controller_adminsCreateManyInputSchema: z.ZodType<Prisma.controller_adminsCreateManyInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  email: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const controller_adminsUpdateManyMutationInputSchema: z.ZodType<Prisma.controller_adminsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const controller_adminsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.controller_adminsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const credit_accountsCreateInputSchema: z.ZodType<Prisma.credit_accountsCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  store_id: z.string().optional().nullable(),
  customer_name: z.string(),
  customer_phone: z.string().optional().nullable(),
  total_debt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  status: z.string().optional(),
  credit_transactions: z.lazy(() => credit_transactionsCreateNestedManyWithoutCredit_accountsInputSchema).optional()
}).strict();

export const credit_accountsUncheckedCreateInputSchema: z.ZodType<Prisma.credit_accountsUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  store_id: z.string().optional().nullable(),
  customer_name: z.string(),
  customer_phone: z.string().optional().nullable(),
  total_debt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  status: z.string().optional(),
  credit_transactions: z.lazy(() => credit_transactionsUncheckedCreateNestedManyWithoutCredit_accountsInputSchema).optional()
}).strict();

export const credit_accountsUpdateInputSchema: z.ZodType<Prisma.credit_accountsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_debt: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credit_transactions: z.lazy(() => credit_transactionsUpdateManyWithoutCredit_accountsNestedInputSchema).optional()
}).strict();

export const credit_accountsUncheckedUpdateInputSchema: z.ZodType<Prisma.credit_accountsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_debt: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credit_transactions: z.lazy(() => credit_transactionsUncheckedUpdateManyWithoutCredit_accountsNestedInputSchema).optional()
}).strict();

export const credit_accountsCreateManyInputSchema: z.ZodType<Prisma.credit_accountsCreateManyInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  store_id: z.string().optional().nullable(),
  customer_name: z.string(),
  customer_phone: z.string().optional().nullable(),
  total_debt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  status: z.string().optional()
}).strict();

export const credit_accountsUpdateManyMutationInputSchema: z.ZodType<Prisma.credit_accountsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_debt: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const credit_accountsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.credit_accountsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_debt: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const credit_transactionsCreateInputSchema: z.ZodType<Prisma.credit_transactionsCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  created_at: z.coerce.date().optional(),
  credit_accounts: z.lazy(() => credit_accountsCreateNestedOneWithoutCredit_transactionsInputSchema)
}).strict();

export const credit_transactionsUncheckedCreateInputSchema: z.ZodType<Prisma.credit_transactionsUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  credit_account_id: z.string(),
  user_id: z.string(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  created_at: z.coerce.date().optional()
}).strict();

export const credit_transactionsUpdateInputSchema: z.ZodType<Prisma.credit_transactionsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  credit_accounts: z.lazy(() => credit_accountsUpdateOneRequiredWithoutCredit_transactionsNestedInputSchema).optional()
}).strict();

export const credit_transactionsUncheckedUpdateInputSchema: z.ZodType<Prisma.credit_transactionsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credit_account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const credit_transactionsCreateManyInputSchema: z.ZodType<Prisma.credit_transactionsCreateManyInput> = z.object({
  id: z.string().optional(),
  credit_account_id: z.string(),
  user_id: z.string(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  created_at: z.coerce.date().optional()
}).strict();

export const credit_transactionsUpdateManyMutationInputSchema: z.ZodType<Prisma.credit_transactionsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const credit_transactionsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.credit_transactionsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credit_account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const customersCreateInputSchema: z.ZodType<Prisma.customersCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  stores: z.lazy(() => storesCreateNestedOneWithoutCustomersInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutCustomersInputSchema),
  orders: z.lazy(() => ordersCreateNestedManyWithoutCustomersInputSchema).optional()
}).strict();

export const customersUncheckedCreateInputSchema: z.ZodType<Prisma.customersUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  store_owner_id: z.string(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutCustomersInputSchema).optional()
}).strict();

export const customersUpdateInputSchema: z.ZodType<Prisma.customersUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stores: z.lazy(() => storesUpdateOneWithoutCustomersNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutCustomersNestedInputSchema).optional()
}).strict();

export const customersUncheckedUpdateInputSchema: z.ZodType<Prisma.customersUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutCustomersNestedInputSchema).optional()
}).strict();

export const customersCreateManyInputSchema: z.ZodType<Prisma.customersCreateManyInput> = z.object({
  id: z.string().optional(),
  store_owner_id: z.string(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable()
}).strict();

export const customersUpdateManyMutationInputSchema: z.ZodType<Prisma.customersUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const customersUncheckedUpdateManyInputSchema: z.ZodType<Prisma.customersUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const domain_ownersCreateInputSchema: z.ZodType<Prisma.domain_ownersCreateInput> = z.object({
  id: z.string().optional(),
  domain: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  domain_type: z.string().optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutDomain_ownersInputSchema)
}).strict();

export const domain_ownersUncheckedCreateInputSchema: z.ZodType<Prisma.domain_ownersUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  domain: z.string(),
  user_id: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  domain_type: z.string().optional()
}).strict();

export const domain_ownersUpdateInputSchema: z.ZodType<Prisma.domain_ownersUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  domain_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutDomain_ownersNestedInputSchema).optional()
}).strict();

export const domain_ownersUncheckedUpdateInputSchema: z.ZodType<Prisma.domain_ownersUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  domain_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const domain_ownersCreateManyInputSchema: z.ZodType<Prisma.domain_ownersCreateManyInput> = z.object({
  id: z.string().optional(),
  domain: z.string(),
  user_id: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  domain_type: z.string().optional()
}).strict();

export const domain_ownersUpdateManyMutationInputSchema: z.ZodType<Prisma.domain_ownersUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  domain_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const domain_ownersUncheckedUpdateManyInputSchema: z.ZodType<Prisma.domain_ownersUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  domain_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const expensesCreateInputSchema: z.ZodType<Prisma.expensesCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  store_id: z.string().optional().nullable(),
  name: z.string(),
  category: z.string(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  due_date: z.coerce.date().optional().nullable(),
  is_recurring: z.boolean().optional().nullable(),
  recurring_frequency: z.string().optional().nullable(),
  status: z.string().optional().nullable(),
  paid_date: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const expensesUncheckedCreateInputSchema: z.ZodType<Prisma.expensesUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  store_id: z.string().optional().nullable(),
  name: z.string(),
  category: z.string(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  due_date: z.coerce.date().optional().nullable(),
  is_recurring: z.boolean().optional().nullable(),
  recurring_frequency: z.string().optional().nullable(),
  status: z.string().optional().nullable(),
  paid_date: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const expensesUpdateInputSchema: z.ZodType<Prisma.expensesUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  due_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_recurring: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recurring_frequency: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paid_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const expensesUncheckedUpdateInputSchema: z.ZodType<Prisma.expensesUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  due_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_recurring: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recurring_frequency: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paid_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const expensesCreateManyInputSchema: z.ZodType<Prisma.expensesCreateManyInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  store_id: z.string().optional().nullable(),
  name: z.string(),
  category: z.string(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  due_date: z.coerce.date().optional().nullable(),
  is_recurring: z.boolean().optional().nullable(),
  recurring_frequency: z.string().optional().nullable(),
  status: z.string().optional().nullable(),
  paid_date: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const expensesUpdateManyMutationInputSchema: z.ZodType<Prisma.expensesUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  due_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_recurring: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recurring_frequency: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paid_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const expensesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.expensesUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  due_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_recurring: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recurring_frequency: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paid_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const order_itemsCreateInputSchema: z.ZodType<Prisma.order_itemsCreateInput> = z.object({
  id: z.string().optional(),
  quantity: z.number().int().optional(),
  unit_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  total_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  created_at: z.coerce.date().optional().nullable(),
  orders: z.lazy(() => ordersCreateNestedOneWithoutOrder_itemsInputSchema),
  products: z.lazy(() => productsCreateNestedOneWithoutOrder_itemsInputSchema)
}).strict();

export const order_itemsUncheckedCreateInputSchema: z.ZodType<Prisma.order_itemsUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  order_id: z.string(),
  product_id: z.string(),
  quantity: z.number().int().optional(),
  unit_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  total_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  created_at: z.coerce.date().optional().nullable()
}).strict();

export const order_itemsUpdateInputSchema: z.ZodType<Prisma.order_itemsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  total_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  orders: z.lazy(() => ordersUpdateOneRequiredWithoutOrder_itemsNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateOneRequiredWithoutOrder_itemsNestedInputSchema).optional()
}).strict();

export const order_itemsUncheckedUpdateInputSchema: z.ZodType<Prisma.order_itemsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  product_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  total_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const order_itemsCreateManyInputSchema: z.ZodType<Prisma.order_itemsCreateManyInput> = z.object({
  id: z.string().optional(),
  order_id: z.string(),
  product_id: z.string(),
  quantity: z.number().int().optional(),
  unit_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  total_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  created_at: z.coerce.date().optional().nullable()
}).strict();

export const order_itemsUpdateManyMutationInputSchema: z.ZodType<Prisma.order_itemsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  total_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const order_itemsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.order_itemsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  product_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  total_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ordersCreateInputSchema: z.ZodType<Prisma.ordersCreateInput> = z.object({
  id: z.string().optional(),
  customer_name: z.string(),
  customer_email: z.string().optional().nullable(),
  customer_phone: z.string().optional().nullable(),
  total_amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  order_items: z.lazy(() => order_itemsCreateNestedManyWithoutOrdersInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedOneWithoutOrdersInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedOneWithoutOrdersInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutOrdersInputSchema)
}).strict();

export const ordersUncheckedCreateInputSchema: z.ZodType<Prisma.ordersUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  store_owner_id: z.string(),
  customer_id: z.string().optional().nullable(),
  customer_name: z.string(),
  customer_email: z.string().optional().nullable(),
  customer_phone: z.string().optional().nullable(),
  total_amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable(),
  order_items: z.lazy(() => order_itemsUncheckedCreateNestedManyWithoutOrdersInputSchema).optional()
}).strict();

export const ordersUpdateInputSchema: z.ZodType<Prisma.ordersUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order_items: z.lazy(() => order_itemsUpdateManyWithoutOrdersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateOneWithoutOrdersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateOneWithoutOrdersNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutOrdersNestedInputSchema).optional()
}).strict();

export const ordersUncheckedUpdateInputSchema: z.ZodType<Prisma.ordersUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order_items: z.lazy(() => order_itemsUncheckedUpdateManyWithoutOrdersNestedInputSchema).optional()
}).strict();

export const ordersCreateManyInputSchema: z.ZodType<Prisma.ordersCreateManyInput> = z.object({
  id: z.string().optional(),
  store_owner_id: z.string(),
  customer_id: z.string().optional().nullable(),
  customer_name: z.string(),
  customer_email: z.string().optional().nullable(),
  customer_phone: z.string().optional().nullable(),
  total_amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable()
}).strict();

export const ordersUpdateManyMutationInputSchema: z.ZodType<Prisma.ordersUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ordersUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ordersUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const product_costsCreateInputSchema: z.ZodType<Prisma.product_costsCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  store_id: z.string().optional().nullable(),
  product_name: z.string(),
  cost_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  desired_margin: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  suggested_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const product_costsUncheckedCreateInputSchema: z.ZodType<Prisma.product_costsUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  store_id: z.string().optional().nullable(),
  product_name: z.string(),
  cost_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  desired_margin: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  suggested_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const product_costsUpdateInputSchema: z.ZodType<Prisma.product_costsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  product_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cost_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  desired_margin: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  suggested_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const product_costsUncheckedUpdateInputSchema: z.ZodType<Prisma.product_costsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  product_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cost_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  desired_margin: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  suggested_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const product_costsCreateManyInputSchema: z.ZodType<Prisma.product_costsCreateManyInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  store_id: z.string().optional().nullable(),
  product_name: z.string(),
  cost_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  desired_margin: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  suggested_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const product_costsUpdateManyMutationInputSchema: z.ZodType<Prisma.product_costsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  product_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cost_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  desired_margin: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  suggested_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const product_costsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.product_costsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  product_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cost_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  desired_margin: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  suggested_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const productsCreateInputSchema: z.ZodType<Prisma.productsCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  stock: z.number().int().optional(),
  is_active: z.boolean().optional().nullable(),
  image: z.string().optional().nullable(),
  images: z.union([ z.lazy(() => productsCreateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  order_items: z.lazy(() => order_itemsCreateNestedManyWithoutProductsInputSchema).optional(),
  categories: z.lazy(() => categoriesCreateNestedOneWithoutProductsInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedOneWithoutProductsInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutProductsInputSchema)
}).strict();

export const productsUncheckedCreateInputSchema: z.ZodType<Prisma.productsUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  category_id: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  stock: z.number().int().optional(),
  is_active: z.boolean().optional().nullable(),
  image: z.string().optional().nullable(),
  images: z.union([ z.lazy(() => productsCreateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable(),
  order_items: z.lazy(() => order_itemsUncheckedCreateNestedManyWithoutProductsInputSchema).optional()
}).strict();

export const productsUpdateInputSchema: z.ZodType<Prisma.productsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  images: z.union([ z.lazy(() => productsUpdateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order_items: z.lazy(() => order_itemsUpdateManyWithoutProductsNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUpdateOneWithoutProductsNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateOneWithoutProductsNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutProductsNestedInputSchema).optional()
}).strict();

export const productsUncheckedUpdateInputSchema: z.ZodType<Prisma.productsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  images: z.union([ z.lazy(() => productsUpdateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order_items: z.lazy(() => order_itemsUncheckedUpdateManyWithoutProductsNestedInputSchema).optional()
}).strict();

export const productsCreateManyInputSchema: z.ZodType<Prisma.productsCreateManyInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  category_id: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  stock: z.number().int().optional(),
  is_active: z.boolean().optional().nullable(),
  image: z.string().optional().nullable(),
  images: z.union([ z.lazy(() => productsCreateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable()
}).strict();

export const productsUpdateManyMutationInputSchema: z.ZodType<Prisma.productsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  images: z.union([ z.lazy(() => productsUpdateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const productsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.productsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  images: z.union([ z.lazy(() => productsUpdateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const profilesCreateInputSchema: z.ZodType<Prisma.profilesCreateInput> = z.object({
  email: z.string(),
  full_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  users: z.lazy(() => usersCreateNestedOneWithoutProfilesInputSchema)
}).strict();

export const profilesUncheckedCreateInputSchema: z.ZodType<Prisma.profilesUncheckedCreateInput> = z.object({
  id: z.string(),
  email: z.string(),
  full_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable()
}).strict();

export const profilesUpdateInputSchema: z.ZodType<Prisma.profilesUpdateInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  full_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutProfilesNestedInputSchema).optional()
}).strict();

export const profilesUncheckedUpdateInputSchema: z.ZodType<Prisma.profilesUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  full_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const profilesCreateManyInputSchema: z.ZodType<Prisma.profilesCreateManyInput> = z.object({
  id: z.string(),
  email: z.string(),
  full_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable()
}).strict();

export const profilesUpdateManyMutationInputSchema: z.ZodType<Prisma.profilesUpdateManyMutationInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  full_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const profilesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.profilesUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  full_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const salesCreateInputSchema: z.ZodType<Prisma.salesCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  product_name: z.string(),
  quantity: z.number().int().optional(),
  unit_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  total_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  sale_date: z.coerce.date(),
  status: z.string().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  stores: z.lazy(() => storesCreateNestedOneWithoutSalesInputSchema).optional()
}).strict();

export const salesUncheckedCreateInputSchema: z.ZodType<Prisma.salesUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  product_name: z.string(),
  quantity: z.number().int().optional(),
  unit_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  total_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  sale_date: z.coerce.date(),
  status: z.string().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  store_id: z.string().optional().nullable()
}).strict();

export const salesUpdateInputSchema: z.ZodType<Prisma.salesUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  product_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  total_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  sale_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  stores: z.lazy(() => storesUpdateOneWithoutSalesNestedInputSchema).optional()
}).strict();

export const salesUncheckedUpdateInputSchema: z.ZodType<Prisma.salesUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  product_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  total_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  sale_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const salesCreateManyInputSchema: z.ZodType<Prisma.salesCreateManyInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  product_name: z.string(),
  quantity: z.number().int().optional(),
  unit_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  total_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  sale_date: z.coerce.date(),
  status: z.string().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  store_id: z.string().optional().nullable()
}).strict();

export const salesUpdateManyMutationInputSchema: z.ZodType<Prisma.salesUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  product_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  total_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  sale_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const salesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.salesUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  product_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  total_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  sale_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const store_settingsCreateInputSchema: z.ZodType<Prisma.store_settingsCreateInput> = z.object({
  id: z.string().optional(),
  store_name: z.string().optional(),
  store_description: z.string().optional().nullable(),
  mobile_logo: z.string().optional().nullable(),
  desktop_banner: z.string().optional().nullable(),
  mobile_banner_color: z.string().optional().nullable(),
  mobile_banner_image: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_subtitle: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable(),
  users: z.lazy(() => usersCreateNestedOneWithoutStore_settingsInputSchema)
}).strict();

export const store_settingsUncheckedCreateInputSchema: z.ZodType<Prisma.store_settingsUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  store_name: z.string().optional(),
  store_description: z.string().optional().nullable(),
  mobile_logo: z.string().optional().nullable(),
  desktop_banner: z.string().optional().nullable(),
  mobile_banner_color: z.string().optional().nullable(),
  mobile_banner_image: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_subtitle: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable()
}).strict();

export const store_settingsUpdateInputSchema: z.ZodType<Prisma.store_settingsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile_logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  desktop_banner: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile_banner_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile_banner_image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_subtitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutStore_settingsNestedInputSchema).optional()
}).strict();

export const store_settingsUncheckedUpdateInputSchema: z.ZodType<Prisma.store_settingsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile_logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  desktop_banner: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile_banner_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile_banner_image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_subtitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const store_settingsCreateManyInputSchema: z.ZodType<Prisma.store_settingsCreateManyInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  store_name: z.string().optional(),
  store_description: z.string().optional().nullable(),
  mobile_logo: z.string().optional().nullable(),
  desktop_banner: z.string().optional().nullable(),
  mobile_banner_color: z.string().optional().nullable(),
  mobile_banner_image: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_subtitle: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable()
}).strict();

export const store_settingsUpdateManyMutationInputSchema: z.ZodType<Prisma.store_settingsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile_logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  desktop_banner: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile_banner_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile_banner_image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_subtitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const store_settingsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.store_settingsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile_logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  desktop_banner: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile_banner_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile_banner_image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_subtitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const storesCreateInputSchema: z.ZodType<Prisma.storesCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  domain: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  logo_url: z.string().optional().nullable(),
  banner_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  theme_color: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  categories: z.lazy(() => categoriesCreateNestedManyWithoutStoresInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedManyWithoutStoresInputSchema).optional(),
  orders: z.lazy(() => ordersCreateNestedManyWithoutStoresInputSchema).optional(),
  products: z.lazy(() => productsCreateNestedManyWithoutStoresInputSchema).optional(),
  sales: z.lazy(() => salesCreateNestedManyWithoutStoresInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutStoresInputSchema)
}).strict();

export const storesUncheckedCreateInputSchema: z.ZodType<Prisma.storesUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  domain: z.string().optional().nullable(),
  user_id: z.string(),
  description: z.string().optional().nullable(),
  logo_url: z.string().optional().nullable(),
  banner_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  theme_color: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  categories: z.lazy(() => categoriesUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  sales: z.lazy(() => salesUncheckedCreateNestedManyWithoutStoresInputSchema).optional()
}).strict();

export const storesUpdateInputSchema: z.ZodType<Prisma.storesUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banner_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  theme_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categories: z.lazy(() => categoriesUpdateManyWithoutStoresNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateManyWithoutStoresNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutStoresNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutStoresNestedInputSchema).optional(),
  sales: z.lazy(() => salesUpdateManyWithoutStoresNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutStoresNestedInputSchema).optional()
}).strict();

export const storesUncheckedUpdateInputSchema: z.ZodType<Prisma.storesUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banner_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  theme_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categories: z.lazy(() => categoriesUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  sales: z.lazy(() => salesUncheckedUpdateManyWithoutStoresNestedInputSchema).optional()
}).strict();

export const storesCreateManyInputSchema: z.ZodType<Prisma.storesCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  domain: z.string().optional().nullable(),
  user_id: z.string(),
  description: z.string().optional().nullable(),
  logo_url: z.string().optional().nullable(),
  banner_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  theme_color: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable()
}).strict();

export const storesUpdateManyMutationInputSchema: z.ZodType<Prisma.storesUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banner_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  theme_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const storesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.storesUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banner_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  theme_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  id: z.string().uuid().optional(),
  email: z.string(),
  password: z.string(),
  createdAt: z.coerce.date().optional(),
  domains: z.lazy(() => DomainCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  email: z.string(),
  password: z.string(),
  createdAt: z.coerce.date().optional(),
  domains: z.lazy(() => DomainUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  domains: z.lazy(() => DomainUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  domains: z.lazy(() => DomainUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  email: z.string(),
  password: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DomainCreateInputSchema: z.ZodType<Prisma.DomainCreateInput> = z.object({
  id: z.string().uuid().optional(),
  slug: z.string(),
  createdAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutDomainsInputSchema),
  products: z.lazy(() => ProductCreateNestedManyWithoutDomainInputSchema).optional()
}).strict();

export const DomainUncheckedCreateInputSchema: z.ZodType<Prisma.DomainUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  slug: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutDomainInputSchema).optional()
}).strict();

export const DomainUpdateInputSchema: z.ZodType<Prisma.DomainUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutDomainsNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutDomainNestedInputSchema).optional()
}).strict();

export const DomainUncheckedUpdateInputSchema: z.ZodType<Prisma.DomainUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutDomainNestedInputSchema).optional()
}).strict();

export const DomainCreateManyInputSchema: z.ZodType<Prisma.DomainCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  slug: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const DomainUpdateManyMutationInputSchema: z.ZodType<Prisma.DomainUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DomainUncheckedUpdateManyInputSchema: z.ZodType<Prisma.DomainUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductCreateInputSchema: z.ZodType<Prisma.ProductCreateInput> = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  description: z.string(),
  price: z.number(),
  imageUrl: z.string(),
  createdAt: z.coerce.date().optional(),
  domain: z.lazy(() => DomainCreateNestedOneWithoutProductsInputSchema)
}).strict();

export const ProductUncheckedCreateInputSchema: z.ZodType<Prisma.ProductUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  description: z.string(),
  price: z.number(),
  imageUrl: z.string(),
  domainId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const ProductUpdateInputSchema: z.ZodType<Prisma.ProductUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.lazy(() => DomainUpdateOneRequiredWithoutProductsNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domainId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductCreateManyInputSchema: z.ZodType<Prisma.ProductCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  description: z.string(),
  price: z.number(),
  imageUrl: z.string(),
  domainId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const ProductUpdateManyMutationInputSchema: z.ZodType<Prisma.ProductUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domainId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UuidNullableFilterSchema: z.ZodType<Prisma.UuidNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const UuidFilterSchema: z.ZodType<Prisma.UuidFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidFilterSchema) ]).optional(),
}).strict();

export const JsonNullableFilterSchema: z.ZodType<Prisma.JsonNullableFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const audit_log_entriesCountOrderByAggregateInputSchema: z.ZodType<Prisma.audit_log_entriesCountOrderByAggregateInput> = z.object({
  instance_id: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  payload: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  ip_address: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const audit_log_entriesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.audit_log_entriesMaxOrderByAggregateInput> = z.object({
  instance_id: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  ip_address: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const audit_log_entriesMinOrderByAggregateInputSchema: z.ZodType<Prisma.audit_log_entriesMinOrderByAggregateInput> = z.object({
  instance_id: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  ip_address: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UuidNullableWithAggregatesFilterSchema: z.ZodType<Prisma.UuidNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const UuidWithAggregatesFilterSchema: z.ZodType<Prisma.UuidWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const JsonNullableWithAggregatesFilterSchema: z.ZodType<Prisma.JsonNullableWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonNullableFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const Enumcode_challenge_methodFilterSchema: z.ZodType<Prisma.Enumcode_challenge_methodFilter> = z.object({
  equals: z.lazy(() => code_challenge_methodSchema).optional(),
  in: z.lazy(() => code_challenge_methodSchema).array().optional(),
  notIn: z.lazy(() => code_challenge_methodSchema).array().optional(),
  not: z.union([ z.lazy(() => code_challenge_methodSchema),z.lazy(() => NestedEnumcode_challenge_methodFilterSchema) ]).optional(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const Saml_relay_statesListRelationFilterSchema: z.ZodType<Prisma.Saml_relay_statesListRelationFilter> = z.object({
  every: z.lazy(() => saml_relay_statesWhereInputSchema).optional(),
  some: z.lazy(() => saml_relay_statesWhereInputSchema).optional(),
  none: z.lazy(() => saml_relay_statesWhereInputSchema).optional()
}).strict();

export const saml_relay_statesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.saml_relay_statesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const flow_stateCountOrderByAggregateInputSchema: z.ZodType<Prisma.flow_stateCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  auth_code: z.lazy(() => SortOrderSchema).optional(),
  code_challenge_method: z.lazy(() => SortOrderSchema).optional(),
  code_challenge: z.lazy(() => SortOrderSchema).optional(),
  provider_type: z.lazy(() => SortOrderSchema).optional(),
  provider_access_token: z.lazy(() => SortOrderSchema).optional(),
  provider_refresh_token: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  authentication_method: z.lazy(() => SortOrderSchema).optional(),
  auth_code_issued_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const flow_stateMaxOrderByAggregateInputSchema: z.ZodType<Prisma.flow_stateMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  auth_code: z.lazy(() => SortOrderSchema).optional(),
  code_challenge_method: z.lazy(() => SortOrderSchema).optional(),
  code_challenge: z.lazy(() => SortOrderSchema).optional(),
  provider_type: z.lazy(() => SortOrderSchema).optional(),
  provider_access_token: z.lazy(() => SortOrderSchema).optional(),
  provider_refresh_token: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  authentication_method: z.lazy(() => SortOrderSchema).optional(),
  auth_code_issued_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const flow_stateMinOrderByAggregateInputSchema: z.ZodType<Prisma.flow_stateMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  auth_code: z.lazy(() => SortOrderSchema).optional(),
  code_challenge_method: z.lazy(() => SortOrderSchema).optional(),
  code_challenge: z.lazy(() => SortOrderSchema).optional(),
  provider_type: z.lazy(() => SortOrderSchema).optional(),
  provider_access_token: z.lazy(() => SortOrderSchema).optional(),
  provider_refresh_token: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  authentication_method: z.lazy(() => SortOrderSchema).optional(),
  auth_code_issued_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumcode_challenge_methodWithAggregatesFilterSchema: z.ZodType<Prisma.Enumcode_challenge_methodWithAggregatesFilter> = z.object({
  equals: z.lazy(() => code_challenge_methodSchema).optional(),
  in: z.lazy(() => code_challenge_methodSchema).array().optional(),
  notIn: z.lazy(() => code_challenge_methodSchema).array().optional(),
  not: z.union([ z.lazy(() => code_challenge_methodSchema),z.lazy(() => NestedEnumcode_challenge_methodWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumcode_challenge_methodFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumcode_challenge_methodFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const JsonFilterSchema: z.ZodType<Prisma.JsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const UsersScalarRelationFilterSchema: z.ZodType<Prisma.UsersScalarRelationFilter> = z.object({
  is: z.lazy(() => usersWhereInputSchema).optional(),
  isNot: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const identitiesProvider_idProviderCompoundUniqueInputSchema: z.ZodType<Prisma.identitiesProvider_idProviderCompoundUniqueInput> = z.object({
  provider_id: z.string(),
  provider: z.string()
}).strict();

export const identitiesCountOrderByAggregateInputSchema: z.ZodType<Prisma.identitiesCountOrderByAggregateInput> = z.object({
  provider_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  identity_data: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  last_sign_in_at: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const identitiesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.identitiesMaxOrderByAggregateInput> = z.object({
  provider_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  last_sign_in_at: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const identitiesMinOrderByAggregateInputSchema: z.ZodType<Prisma.identitiesMinOrderByAggregateInput> = z.object({
  provider_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  last_sign_in_at: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const JsonWithAggregatesFilterSchema: z.ZodType<Prisma.JsonWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonFilterSchema).optional()
}).strict();

export const instancesCountOrderByAggregateInputSchema: z.ZodType<Prisma.instancesCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  uuid: z.lazy(() => SortOrderSchema).optional(),
  raw_base_config: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const instancesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.instancesMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  uuid: z.lazy(() => SortOrderSchema).optional(),
  raw_base_config: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const instancesMinOrderByAggregateInputSchema: z.ZodType<Prisma.instancesMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  uuid: z.lazy(() => SortOrderSchema).optional(),
  raw_base_config: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const SessionsScalarRelationFilterSchema: z.ZodType<Prisma.SessionsScalarRelationFilter> = z.object({
  is: z.lazy(() => sessionsWhereInputSchema).optional(),
  isNot: z.lazy(() => sessionsWhereInputSchema).optional()
}).strict();

export const mfa_amr_claimsSession_idAuthentication_methodCompoundUniqueInputSchema: z.ZodType<Prisma.mfa_amr_claimsSession_idAuthentication_methodCompoundUniqueInput> = z.object({
  session_id: z.string(),
  authentication_method: z.string()
}).strict();

export const mfa_amr_claimsCountOrderByAggregateInputSchema: z.ZodType<Prisma.mfa_amr_claimsCountOrderByAggregateInput> = z.object({
  session_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  authentication_method: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const mfa_amr_claimsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.mfa_amr_claimsMaxOrderByAggregateInput> = z.object({
  session_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  authentication_method: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const mfa_amr_claimsMinOrderByAggregateInputSchema: z.ZodType<Prisma.mfa_amr_claimsMinOrderByAggregateInput> = z.object({
  session_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  authentication_method: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const Mfa_factorsScalarRelationFilterSchema: z.ZodType<Prisma.Mfa_factorsScalarRelationFilter> = z.object({
  is: z.lazy(() => mfa_factorsWhereInputSchema).optional(),
  isNot: z.lazy(() => mfa_factorsWhereInputSchema).optional()
}).strict();

export const mfa_challengesCountOrderByAggregateInputSchema: z.ZodType<Prisma.mfa_challengesCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  factor_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  verified_at: z.lazy(() => SortOrderSchema).optional(),
  ip_address: z.lazy(() => SortOrderSchema).optional(),
  otp_code: z.lazy(() => SortOrderSchema).optional(),
  web_authn_session_data: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const mfa_challengesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.mfa_challengesMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  factor_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  verified_at: z.lazy(() => SortOrderSchema).optional(),
  ip_address: z.lazy(() => SortOrderSchema).optional(),
  otp_code: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const mfa_challengesMinOrderByAggregateInputSchema: z.ZodType<Prisma.mfa_challengesMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  factor_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  verified_at: z.lazy(() => SortOrderSchema).optional(),
  ip_address: z.lazy(() => SortOrderSchema).optional(),
  otp_code: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumfactor_typeFilterSchema: z.ZodType<Prisma.Enumfactor_typeFilter> = z.object({
  equals: z.lazy(() => factor_typeSchema).optional(),
  in: z.lazy(() => factor_typeSchema).array().optional(),
  notIn: z.lazy(() => factor_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => factor_typeSchema),z.lazy(() => NestedEnumfactor_typeFilterSchema) ]).optional(),
}).strict();

export const Enumfactor_statusFilterSchema: z.ZodType<Prisma.Enumfactor_statusFilter> = z.object({
  equals: z.lazy(() => factor_statusSchema).optional(),
  in: z.lazy(() => factor_statusSchema).array().optional(),
  notIn: z.lazy(() => factor_statusSchema).array().optional(),
  not: z.union([ z.lazy(() => factor_statusSchema),z.lazy(() => NestedEnumfactor_statusFilterSchema) ]).optional(),
}).strict();

export const Mfa_challengesListRelationFilterSchema: z.ZodType<Prisma.Mfa_challengesListRelationFilter> = z.object({
  every: z.lazy(() => mfa_challengesWhereInputSchema).optional(),
  some: z.lazy(() => mfa_challengesWhereInputSchema).optional(),
  none: z.lazy(() => mfa_challengesWhereInputSchema).optional()
}).strict();

export const mfa_challengesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.mfa_challengesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const mfa_factorsUser_idPhoneCompoundUniqueInputSchema: z.ZodType<Prisma.mfa_factorsUser_idPhoneCompoundUniqueInput> = z.object({
  user_id: z.string(),
  phone: z.string()
}).strict();

export const mfa_factorsCountOrderByAggregateInputSchema: z.ZodType<Prisma.mfa_factorsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  friendly_name: z.lazy(() => SortOrderSchema).optional(),
  factor_type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  last_challenged_at: z.lazy(() => SortOrderSchema).optional(),
  web_authn_credential: z.lazy(() => SortOrderSchema).optional(),
  web_authn_aaguid: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const mfa_factorsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.mfa_factorsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  friendly_name: z.lazy(() => SortOrderSchema).optional(),
  factor_type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  last_challenged_at: z.lazy(() => SortOrderSchema).optional(),
  web_authn_aaguid: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const mfa_factorsMinOrderByAggregateInputSchema: z.ZodType<Prisma.mfa_factorsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  friendly_name: z.lazy(() => SortOrderSchema).optional(),
  factor_type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  last_challenged_at: z.lazy(() => SortOrderSchema).optional(),
  web_authn_aaguid: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumfactor_typeWithAggregatesFilterSchema: z.ZodType<Prisma.Enumfactor_typeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => factor_typeSchema).optional(),
  in: z.lazy(() => factor_typeSchema).array().optional(),
  notIn: z.lazy(() => factor_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => factor_typeSchema),z.lazy(() => NestedEnumfactor_typeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumfactor_typeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumfactor_typeFilterSchema).optional()
}).strict();

export const Enumfactor_statusWithAggregatesFilterSchema: z.ZodType<Prisma.Enumfactor_statusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => factor_statusSchema).optional(),
  in: z.lazy(() => factor_statusSchema).array().optional(),
  notIn: z.lazy(() => factor_statusSchema).array().optional(),
  not: z.union([ z.lazy(() => factor_statusSchema),z.lazy(() => NestedEnumfactor_statusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumfactor_statusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumfactor_statusFilterSchema).optional()
}).strict();

export const Enumone_time_token_typeFilterSchema: z.ZodType<Prisma.Enumone_time_token_typeFilter> = z.object({
  equals: z.lazy(() => one_time_token_typeSchema).optional(),
  in: z.lazy(() => one_time_token_typeSchema).array().optional(),
  notIn: z.lazy(() => one_time_token_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => one_time_token_typeSchema),z.lazy(() => NestedEnumone_time_token_typeFilterSchema) ]).optional(),
}).strict();

export const one_time_tokensUser_idToken_typeCompoundUniqueInputSchema: z.ZodType<Prisma.one_time_tokensUser_idToken_typeCompoundUniqueInput> = z.object({
  user_id: z.string(),
  token_type: z.lazy(() => one_time_token_typeSchema)
}).strict();

export const one_time_tokensCountOrderByAggregateInputSchema: z.ZodType<Prisma.one_time_tokensCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  token_hash: z.lazy(() => SortOrderSchema).optional(),
  relates_to: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const one_time_tokensMaxOrderByAggregateInputSchema: z.ZodType<Prisma.one_time_tokensMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  token_hash: z.lazy(() => SortOrderSchema).optional(),
  relates_to: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const one_time_tokensMinOrderByAggregateInputSchema: z.ZodType<Prisma.one_time_tokensMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  token_hash: z.lazy(() => SortOrderSchema).optional(),
  relates_to: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumone_time_token_typeWithAggregatesFilterSchema: z.ZodType<Prisma.Enumone_time_token_typeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => one_time_token_typeSchema).optional(),
  in: z.lazy(() => one_time_token_typeSchema).array().optional(),
  notIn: z.lazy(() => one_time_token_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => one_time_token_typeSchema),z.lazy(() => NestedEnumone_time_token_typeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumone_time_token_typeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumone_time_token_typeFilterSchema).optional()
}).strict();

export const BigIntFilterSchema: z.ZodType<Prisma.BigIntFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntFilterSchema) ]).optional(),
}).strict();

export const BoolNullableFilterSchema: z.ZodType<Prisma.BoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const SessionsNullableScalarRelationFilterSchema: z.ZodType<Prisma.SessionsNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => sessionsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => sessionsWhereInputSchema).optional().nullable()
}).strict();

export const refresh_tokensCountOrderByAggregateInputSchema: z.ZodType<Prisma.refresh_tokensCountOrderByAggregateInput> = z.object({
  instance_id: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  revoked: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  parent: z.lazy(() => SortOrderSchema).optional(),
  session_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const refresh_tokensAvgOrderByAggregateInputSchema: z.ZodType<Prisma.refresh_tokensAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const refresh_tokensMaxOrderByAggregateInputSchema: z.ZodType<Prisma.refresh_tokensMaxOrderByAggregateInput> = z.object({
  instance_id: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  revoked: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  parent: z.lazy(() => SortOrderSchema).optional(),
  session_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const refresh_tokensMinOrderByAggregateInputSchema: z.ZodType<Prisma.refresh_tokensMinOrderByAggregateInput> = z.object({
  instance_id: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  revoked: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  parent: z.lazy(() => SortOrderSchema).optional(),
  session_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const refresh_tokensSumOrderByAggregateInputSchema: z.ZodType<Prisma.refresh_tokensSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BigIntWithAggregatesFilterSchema: z.ZodType<Prisma.BigIntWithAggregatesFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _max: z.lazy(() => NestedBigIntFilterSchema).optional()
}).strict();

export const BoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.BoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const Sso_providersScalarRelationFilterSchema: z.ZodType<Prisma.Sso_providersScalarRelationFilter> = z.object({
  is: z.lazy(() => sso_providersWhereInputSchema).optional(),
  isNot: z.lazy(() => sso_providersWhereInputSchema).optional()
}).strict();

export const saml_providersCountOrderByAggregateInputSchema: z.ZodType<Prisma.saml_providersCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sso_provider_id: z.lazy(() => SortOrderSchema).optional(),
  entity_id: z.lazy(() => SortOrderSchema).optional(),
  metadata_xml: z.lazy(() => SortOrderSchema).optional(),
  metadata_url: z.lazy(() => SortOrderSchema).optional(),
  attribute_mapping: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  name_id_format: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const saml_providersMaxOrderByAggregateInputSchema: z.ZodType<Prisma.saml_providersMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sso_provider_id: z.lazy(() => SortOrderSchema).optional(),
  entity_id: z.lazy(() => SortOrderSchema).optional(),
  metadata_xml: z.lazy(() => SortOrderSchema).optional(),
  metadata_url: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  name_id_format: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const saml_providersMinOrderByAggregateInputSchema: z.ZodType<Prisma.saml_providersMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sso_provider_id: z.lazy(() => SortOrderSchema).optional(),
  entity_id: z.lazy(() => SortOrderSchema).optional(),
  metadata_xml: z.lazy(() => SortOrderSchema).optional(),
  metadata_url: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  name_id_format: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Flow_stateNullableScalarRelationFilterSchema: z.ZodType<Prisma.Flow_stateNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => flow_stateWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => flow_stateWhereInputSchema).optional().nullable()
}).strict();

export const saml_relay_statesCountOrderByAggregateInputSchema: z.ZodType<Prisma.saml_relay_statesCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sso_provider_id: z.lazy(() => SortOrderSchema).optional(),
  request_id: z.lazy(() => SortOrderSchema).optional(),
  for_email: z.lazy(() => SortOrderSchema).optional(),
  redirect_to: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  flow_state_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const saml_relay_statesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.saml_relay_statesMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sso_provider_id: z.lazy(() => SortOrderSchema).optional(),
  request_id: z.lazy(() => SortOrderSchema).optional(),
  for_email: z.lazy(() => SortOrderSchema).optional(),
  redirect_to: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  flow_state_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const saml_relay_statesMinOrderByAggregateInputSchema: z.ZodType<Prisma.saml_relay_statesMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sso_provider_id: z.lazy(() => SortOrderSchema).optional(),
  request_id: z.lazy(() => SortOrderSchema).optional(),
  for_email: z.lazy(() => SortOrderSchema).optional(),
  redirect_to: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  flow_state_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const schema_migrationsCountOrderByAggregateInputSchema: z.ZodType<Prisma.schema_migrationsCountOrderByAggregateInput> = z.object({
  version: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const schema_migrationsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.schema_migrationsMaxOrderByAggregateInput> = z.object({
  version: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const schema_migrationsMinOrderByAggregateInputSchema: z.ZodType<Prisma.schema_migrationsMinOrderByAggregateInput> = z.object({
  version: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumaal_levelNullableFilterSchema: z.ZodType<Prisma.Enumaal_levelNullableFilter> = z.object({
  equals: z.lazy(() => aal_levelSchema).optional().nullable(),
  in: z.lazy(() => aal_levelSchema).array().optional().nullable(),
  notIn: z.lazy(() => aal_levelSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => aal_levelSchema),z.lazy(() => NestedEnumaal_levelNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const Mfa_amr_claimsListRelationFilterSchema: z.ZodType<Prisma.Mfa_amr_claimsListRelationFilter> = z.object({
  every: z.lazy(() => mfa_amr_claimsWhereInputSchema).optional(),
  some: z.lazy(() => mfa_amr_claimsWhereInputSchema).optional(),
  none: z.lazy(() => mfa_amr_claimsWhereInputSchema).optional()
}).strict();

export const Refresh_tokensListRelationFilterSchema: z.ZodType<Prisma.Refresh_tokensListRelationFilter> = z.object({
  every: z.lazy(() => refresh_tokensWhereInputSchema).optional(),
  some: z.lazy(() => refresh_tokensWhereInputSchema).optional(),
  none: z.lazy(() => refresh_tokensWhereInputSchema).optional()
}).strict();

export const mfa_amr_claimsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.mfa_amr_claimsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const refresh_tokensOrderByRelationAggregateInputSchema: z.ZodType<Prisma.refresh_tokensOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sessionsCountOrderByAggregateInputSchema: z.ZodType<Prisma.sessionsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  factor_id: z.lazy(() => SortOrderSchema).optional(),
  aal: z.lazy(() => SortOrderSchema).optional(),
  not_after: z.lazy(() => SortOrderSchema).optional(),
  refreshed_at: z.lazy(() => SortOrderSchema).optional(),
  user_agent: z.lazy(() => SortOrderSchema).optional(),
  ip: z.lazy(() => SortOrderSchema).optional(),
  tag: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sessionsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.sessionsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  factor_id: z.lazy(() => SortOrderSchema).optional(),
  aal: z.lazy(() => SortOrderSchema).optional(),
  not_after: z.lazy(() => SortOrderSchema).optional(),
  refreshed_at: z.lazy(() => SortOrderSchema).optional(),
  user_agent: z.lazy(() => SortOrderSchema).optional(),
  ip: z.lazy(() => SortOrderSchema).optional(),
  tag: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sessionsMinOrderByAggregateInputSchema: z.ZodType<Prisma.sessionsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  factor_id: z.lazy(() => SortOrderSchema).optional(),
  aal: z.lazy(() => SortOrderSchema).optional(),
  not_after: z.lazy(() => SortOrderSchema).optional(),
  refreshed_at: z.lazy(() => SortOrderSchema).optional(),
  user_agent: z.lazy(() => SortOrderSchema).optional(),
  ip: z.lazy(() => SortOrderSchema).optional(),
  tag: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumaal_levelNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumaal_levelNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => aal_levelSchema).optional().nullable(),
  in: z.lazy(() => aal_levelSchema).array().optional().nullable(),
  notIn: z.lazy(() => aal_levelSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => aal_levelSchema),z.lazy(() => NestedEnumaal_levelNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumaal_levelNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumaal_levelNullableFilterSchema).optional()
}).strict();

export const sso_domainsCountOrderByAggregateInputSchema: z.ZodType<Prisma.sso_domainsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sso_provider_id: z.lazy(() => SortOrderSchema).optional(),
  domain: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sso_domainsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.sso_domainsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sso_provider_id: z.lazy(() => SortOrderSchema).optional(),
  domain: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sso_domainsMinOrderByAggregateInputSchema: z.ZodType<Prisma.sso_domainsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sso_provider_id: z.lazy(() => SortOrderSchema).optional(),
  domain: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Saml_providersListRelationFilterSchema: z.ZodType<Prisma.Saml_providersListRelationFilter> = z.object({
  every: z.lazy(() => saml_providersWhereInputSchema).optional(),
  some: z.lazy(() => saml_providersWhereInputSchema).optional(),
  none: z.lazy(() => saml_providersWhereInputSchema).optional()
}).strict();

export const Sso_domainsListRelationFilterSchema: z.ZodType<Prisma.Sso_domainsListRelationFilter> = z.object({
  every: z.lazy(() => sso_domainsWhereInputSchema).optional(),
  some: z.lazy(() => sso_domainsWhereInputSchema).optional(),
  none: z.lazy(() => sso_domainsWhereInputSchema).optional()
}).strict();

export const saml_providersOrderByRelationAggregateInputSchema: z.ZodType<Prisma.saml_providersOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sso_domainsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.sso_domainsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sso_providersCountOrderByAggregateInputSchema: z.ZodType<Prisma.sso_providersCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  resource_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sso_providersMaxOrderByAggregateInputSchema: z.ZodType<Prisma.sso_providersMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  resource_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sso_providersMinOrderByAggregateInputSchema: z.ZodType<Prisma.sso_providersMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  resource_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const IdentitiesListRelationFilterSchema: z.ZodType<Prisma.IdentitiesListRelationFilter> = z.object({
  every: z.lazy(() => identitiesWhereInputSchema).optional(),
  some: z.lazy(() => identitiesWhereInputSchema).optional(),
  none: z.lazy(() => identitiesWhereInputSchema).optional()
}).strict();

export const Mfa_factorsListRelationFilterSchema: z.ZodType<Prisma.Mfa_factorsListRelationFilter> = z.object({
  every: z.lazy(() => mfa_factorsWhereInputSchema).optional(),
  some: z.lazy(() => mfa_factorsWhereInputSchema).optional(),
  none: z.lazy(() => mfa_factorsWhereInputSchema).optional()
}).strict();

export const One_time_tokensListRelationFilterSchema: z.ZodType<Prisma.One_time_tokensListRelationFilter> = z.object({
  every: z.lazy(() => one_time_tokensWhereInputSchema).optional(),
  some: z.lazy(() => one_time_tokensWhereInputSchema).optional(),
  none: z.lazy(() => one_time_tokensWhereInputSchema).optional()
}).strict();

export const SessionsListRelationFilterSchema: z.ZodType<Prisma.SessionsListRelationFilter> = z.object({
  every: z.lazy(() => sessionsWhereInputSchema).optional(),
  some: z.lazy(() => sessionsWhereInputSchema).optional(),
  none: z.lazy(() => sessionsWhereInputSchema).optional()
}).strict();

export const CategoriesListRelationFilterSchema: z.ZodType<Prisma.CategoriesListRelationFilter> = z.object({
  every: z.lazy(() => categoriesWhereInputSchema).optional(),
  some: z.lazy(() => categoriesWhereInputSchema).optional(),
  none: z.lazy(() => categoriesWhereInputSchema).optional()
}).strict();

export const Controller_adminsNullableScalarRelationFilterSchema: z.ZodType<Prisma.Controller_adminsNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => controller_adminsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => controller_adminsWhereInputSchema).optional().nullable()
}).strict();

export const CustomersListRelationFilterSchema: z.ZodType<Prisma.CustomersListRelationFilter> = z.object({
  every: z.lazy(() => customersWhereInputSchema).optional(),
  some: z.lazy(() => customersWhereInputSchema).optional(),
  none: z.lazy(() => customersWhereInputSchema).optional()
}).strict();

export const Domain_ownersListRelationFilterSchema: z.ZodType<Prisma.Domain_ownersListRelationFilter> = z.object({
  every: z.lazy(() => domain_ownersWhereInputSchema).optional(),
  some: z.lazy(() => domain_ownersWhereInputSchema).optional(),
  none: z.lazy(() => domain_ownersWhereInputSchema).optional()
}).strict();

export const OrdersListRelationFilterSchema: z.ZodType<Prisma.OrdersListRelationFilter> = z.object({
  every: z.lazy(() => ordersWhereInputSchema).optional(),
  some: z.lazy(() => ordersWhereInputSchema).optional(),
  none: z.lazy(() => ordersWhereInputSchema).optional()
}).strict();

export const ProductsListRelationFilterSchema: z.ZodType<Prisma.ProductsListRelationFilter> = z.object({
  every: z.lazy(() => productsWhereInputSchema).optional(),
  some: z.lazy(() => productsWhereInputSchema).optional(),
  none: z.lazy(() => productsWhereInputSchema).optional()
}).strict();

export const ProfilesNullableScalarRelationFilterSchema: z.ZodType<Prisma.ProfilesNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => profilesWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => profilesWhereInputSchema).optional().nullable()
}).strict();

export const Store_settingsNullableScalarRelationFilterSchema: z.ZodType<Prisma.Store_settingsNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => store_settingsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => store_settingsWhereInputSchema).optional().nullable()
}).strict();

export const StoresListRelationFilterSchema: z.ZodType<Prisma.StoresListRelationFilter> = z.object({
  every: z.lazy(() => storesWhereInputSchema).optional(),
  some: z.lazy(() => storesWhereInputSchema).optional(),
  none: z.lazy(() => storesWhereInputSchema).optional()
}).strict();

export const identitiesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.identitiesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const mfa_factorsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.mfa_factorsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const one_time_tokensOrderByRelationAggregateInputSchema: z.ZodType<Prisma.one_time_tokensOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sessionsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.sessionsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const categoriesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.categoriesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const customersOrderByRelationAggregateInputSchema: z.ZodType<Prisma.customersOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const domain_ownersOrderByRelationAggregateInputSchema: z.ZodType<Prisma.domain_ownersOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ordersOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ordersOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const productsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.productsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const storesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.storesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const usersCountOrderByAggregateInputSchema: z.ZodType<Prisma.usersCountOrderByAggregateInput> = z.object({
  instance_id: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  aud: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  encrypted_password: z.lazy(() => SortOrderSchema).optional(),
  email_confirmed_at: z.lazy(() => SortOrderSchema).optional(),
  invited_at: z.lazy(() => SortOrderSchema).optional(),
  confirmation_token: z.lazy(() => SortOrderSchema).optional(),
  confirmation_sent_at: z.lazy(() => SortOrderSchema).optional(),
  recovery_token: z.lazy(() => SortOrderSchema).optional(),
  recovery_sent_at: z.lazy(() => SortOrderSchema).optional(),
  email_change_token_new: z.lazy(() => SortOrderSchema).optional(),
  email_change: z.lazy(() => SortOrderSchema).optional(),
  email_change_sent_at: z.lazy(() => SortOrderSchema).optional(),
  last_sign_in_at: z.lazy(() => SortOrderSchema).optional(),
  raw_app_meta_data: z.lazy(() => SortOrderSchema).optional(),
  raw_user_meta_data: z.lazy(() => SortOrderSchema).optional(),
  is_super_admin: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  phone_confirmed_at: z.lazy(() => SortOrderSchema).optional(),
  phone_change: z.lazy(() => SortOrderSchema).optional(),
  phone_change_token: z.lazy(() => SortOrderSchema).optional(),
  phone_change_sent_at: z.lazy(() => SortOrderSchema).optional(),
  confirmed_at: z.lazy(() => SortOrderSchema).optional(),
  email_change_token_current: z.lazy(() => SortOrderSchema).optional(),
  email_change_confirm_status: z.lazy(() => SortOrderSchema).optional(),
  banned_until: z.lazy(() => SortOrderSchema).optional(),
  reauthentication_token: z.lazy(() => SortOrderSchema).optional(),
  reauthentication_sent_at: z.lazy(() => SortOrderSchema).optional(),
  is_sso_user: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  is_anonymous: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const usersAvgOrderByAggregateInputSchema: z.ZodType<Prisma.usersAvgOrderByAggregateInput> = z.object({
  email_change_confirm_status: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const usersMaxOrderByAggregateInputSchema: z.ZodType<Prisma.usersMaxOrderByAggregateInput> = z.object({
  instance_id: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  aud: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  encrypted_password: z.lazy(() => SortOrderSchema).optional(),
  email_confirmed_at: z.lazy(() => SortOrderSchema).optional(),
  invited_at: z.lazy(() => SortOrderSchema).optional(),
  confirmation_token: z.lazy(() => SortOrderSchema).optional(),
  confirmation_sent_at: z.lazy(() => SortOrderSchema).optional(),
  recovery_token: z.lazy(() => SortOrderSchema).optional(),
  recovery_sent_at: z.lazy(() => SortOrderSchema).optional(),
  email_change_token_new: z.lazy(() => SortOrderSchema).optional(),
  email_change: z.lazy(() => SortOrderSchema).optional(),
  email_change_sent_at: z.lazy(() => SortOrderSchema).optional(),
  last_sign_in_at: z.lazy(() => SortOrderSchema).optional(),
  is_super_admin: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  phone_confirmed_at: z.lazy(() => SortOrderSchema).optional(),
  phone_change: z.lazy(() => SortOrderSchema).optional(),
  phone_change_token: z.lazy(() => SortOrderSchema).optional(),
  phone_change_sent_at: z.lazy(() => SortOrderSchema).optional(),
  confirmed_at: z.lazy(() => SortOrderSchema).optional(),
  email_change_token_current: z.lazy(() => SortOrderSchema).optional(),
  email_change_confirm_status: z.lazy(() => SortOrderSchema).optional(),
  banned_until: z.lazy(() => SortOrderSchema).optional(),
  reauthentication_token: z.lazy(() => SortOrderSchema).optional(),
  reauthentication_sent_at: z.lazy(() => SortOrderSchema).optional(),
  is_sso_user: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  is_anonymous: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const usersMinOrderByAggregateInputSchema: z.ZodType<Prisma.usersMinOrderByAggregateInput> = z.object({
  instance_id: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  aud: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  encrypted_password: z.lazy(() => SortOrderSchema).optional(),
  email_confirmed_at: z.lazy(() => SortOrderSchema).optional(),
  invited_at: z.lazy(() => SortOrderSchema).optional(),
  confirmation_token: z.lazy(() => SortOrderSchema).optional(),
  confirmation_sent_at: z.lazy(() => SortOrderSchema).optional(),
  recovery_token: z.lazy(() => SortOrderSchema).optional(),
  recovery_sent_at: z.lazy(() => SortOrderSchema).optional(),
  email_change_token_new: z.lazy(() => SortOrderSchema).optional(),
  email_change: z.lazy(() => SortOrderSchema).optional(),
  email_change_sent_at: z.lazy(() => SortOrderSchema).optional(),
  last_sign_in_at: z.lazy(() => SortOrderSchema).optional(),
  is_super_admin: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  phone_confirmed_at: z.lazy(() => SortOrderSchema).optional(),
  phone_change: z.lazy(() => SortOrderSchema).optional(),
  phone_change_token: z.lazy(() => SortOrderSchema).optional(),
  phone_change_sent_at: z.lazy(() => SortOrderSchema).optional(),
  confirmed_at: z.lazy(() => SortOrderSchema).optional(),
  email_change_token_current: z.lazy(() => SortOrderSchema).optional(),
  email_change_confirm_status: z.lazy(() => SortOrderSchema).optional(),
  banned_until: z.lazy(() => SortOrderSchema).optional(),
  reauthentication_token: z.lazy(() => SortOrderSchema).optional(),
  reauthentication_sent_at: z.lazy(() => SortOrderSchema).optional(),
  is_sso_user: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  is_anonymous: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const usersSumOrderByAggregateInputSchema: z.ZodType<Prisma.usersSumOrderByAggregateInput> = z.object({
  email_change_confirm_status: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const DecimalFilterSchema: z.ZodType<Prisma.DecimalFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalFilterSchema) ]).optional(),
}).strict();

export const cash_flowCountOrderByAggregateInputSchema: z.ZodType<Prisma.cash_flowCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  payment_method: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const cash_flowAvgOrderByAggregateInputSchema: z.ZodType<Prisma.cash_flowAvgOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const cash_flowMaxOrderByAggregateInputSchema: z.ZodType<Prisma.cash_flowMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  payment_method: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const cash_flowMinOrderByAggregateInputSchema: z.ZodType<Prisma.cash_flowMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  payment_method: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const cash_flowSumOrderByAggregateInputSchema: z.ZodType<Prisma.cash_flowSumOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DecimalWithAggregatesFilterSchema: z.ZodType<Prisma.DecimalWithAggregatesFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _sum: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _min: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _max: z.lazy(() => NestedDecimalFilterSchema).optional()
}).strict();

export const StoresNullableScalarRelationFilterSchema: z.ZodType<Prisma.StoresNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => storesWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => storesWhereInputSchema).optional().nullable()
}).strict();

export const categoriesCountOrderByAggregateInputSchema: z.ZodType<Prisma.categoriesCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const categoriesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.categoriesMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const categoriesMinOrderByAggregateInputSchema: z.ZodType<Prisma.categoriesMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const controller_adminsCountOrderByAggregateInputSchema: z.ZodType<Prisma.controller_adminsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const controller_adminsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.controller_adminsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const controller_adminsMinOrderByAggregateInputSchema: z.ZodType<Prisma.controller_adminsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Credit_transactionsListRelationFilterSchema: z.ZodType<Prisma.Credit_transactionsListRelationFilter> = z.object({
  every: z.lazy(() => credit_transactionsWhereInputSchema).optional(),
  some: z.lazy(() => credit_transactionsWhereInputSchema).optional(),
  none: z.lazy(() => credit_transactionsWhereInputSchema).optional()
}).strict();

export const credit_transactionsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.credit_transactionsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const credit_accountsCustomer_phoneUser_idCompoundUniqueInputSchema: z.ZodType<Prisma.credit_accountsCustomer_phoneUser_idCompoundUniqueInput> = z.object({
  customer_phone: z.string(),
  user_id: z.string()
}).strict();

export const credit_accountsCountOrderByAggregateInputSchema: z.ZodType<Prisma.credit_accountsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional(),
  customer_name: z.lazy(() => SortOrderSchema).optional(),
  customer_phone: z.lazy(() => SortOrderSchema).optional(),
  total_debt: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const credit_accountsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.credit_accountsAvgOrderByAggregateInput> = z.object({
  total_debt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const credit_accountsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.credit_accountsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional(),
  customer_name: z.lazy(() => SortOrderSchema).optional(),
  customer_phone: z.lazy(() => SortOrderSchema).optional(),
  total_debt: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const credit_accountsMinOrderByAggregateInputSchema: z.ZodType<Prisma.credit_accountsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional(),
  customer_name: z.lazy(() => SortOrderSchema).optional(),
  customer_phone: z.lazy(() => SortOrderSchema).optional(),
  total_debt: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const credit_accountsSumOrderByAggregateInputSchema: z.ZodType<Prisma.credit_accountsSumOrderByAggregateInput> = z.object({
  total_debt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Credit_accountsScalarRelationFilterSchema: z.ZodType<Prisma.Credit_accountsScalarRelationFilter> = z.object({
  is: z.lazy(() => credit_accountsWhereInputSchema).optional(),
  isNot: z.lazy(() => credit_accountsWhereInputSchema).optional()
}).strict();

export const credit_transactionsCountOrderByAggregateInputSchema: z.ZodType<Prisma.credit_transactionsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  credit_account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const credit_transactionsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.credit_transactionsAvgOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const credit_transactionsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.credit_transactionsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  credit_account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const credit_transactionsMinOrderByAggregateInputSchema: z.ZodType<Prisma.credit_transactionsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  credit_account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const credit_transactionsSumOrderByAggregateInputSchema: z.ZodType<Prisma.credit_transactionsSumOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const customersCountOrderByAggregateInputSchema: z.ZodType<Prisma.customersCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  store_owner_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const customersMaxOrderByAggregateInputSchema: z.ZodType<Prisma.customersMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  store_owner_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const customersMinOrderByAggregateInputSchema: z.ZodType<Prisma.customersMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  store_owner_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const domain_ownersCountOrderByAggregateInputSchema: z.ZodType<Prisma.domain_ownersCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  domain: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  domain_type: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const domain_ownersMaxOrderByAggregateInputSchema: z.ZodType<Prisma.domain_ownersMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  domain: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  domain_type: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const domain_ownersMinOrderByAggregateInputSchema: z.ZodType<Prisma.domain_ownersMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  domain: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  domain_type: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const expensesCountOrderByAggregateInputSchema: z.ZodType<Prisma.expensesCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  due_date: z.lazy(() => SortOrderSchema).optional(),
  is_recurring: z.lazy(() => SortOrderSchema).optional(),
  recurring_frequency: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  paid_date: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const expensesAvgOrderByAggregateInputSchema: z.ZodType<Prisma.expensesAvgOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const expensesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.expensesMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  due_date: z.lazy(() => SortOrderSchema).optional(),
  is_recurring: z.lazy(() => SortOrderSchema).optional(),
  recurring_frequency: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  paid_date: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const expensesMinOrderByAggregateInputSchema: z.ZodType<Prisma.expensesMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  due_date: z.lazy(() => SortOrderSchema).optional(),
  is_recurring: z.lazy(() => SortOrderSchema).optional(),
  recurring_frequency: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  paid_date: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const expensesSumOrderByAggregateInputSchema: z.ZodType<Prisma.expensesSumOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const OrdersScalarRelationFilterSchema: z.ZodType<Prisma.OrdersScalarRelationFilter> = z.object({
  is: z.lazy(() => ordersWhereInputSchema).optional(),
  isNot: z.lazy(() => ordersWhereInputSchema).optional()
}).strict();

export const ProductsScalarRelationFilterSchema: z.ZodType<Prisma.ProductsScalarRelationFilter> = z.object({
  is: z.lazy(() => productsWhereInputSchema).optional(),
  isNot: z.lazy(() => productsWhereInputSchema).optional()
}).strict();

export const order_itemsCountOrderByAggregateInputSchema: z.ZodType<Prisma.order_itemsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  order_id: z.lazy(() => SortOrderSchema).optional(),
  product_id: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  total_price: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const order_itemsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.order_itemsAvgOrderByAggregateInput> = z.object({
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  total_price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const order_itemsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.order_itemsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  order_id: z.lazy(() => SortOrderSchema).optional(),
  product_id: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  total_price: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const order_itemsMinOrderByAggregateInputSchema: z.ZodType<Prisma.order_itemsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  order_id: z.lazy(() => SortOrderSchema).optional(),
  product_id: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  total_price: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const order_itemsSumOrderByAggregateInputSchema: z.ZodType<Prisma.order_itemsSumOrderByAggregateInput> = z.object({
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  total_price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const Order_itemsListRelationFilterSchema: z.ZodType<Prisma.Order_itemsListRelationFilter> = z.object({
  every: z.lazy(() => order_itemsWhereInputSchema).optional(),
  some: z.lazy(() => order_itemsWhereInputSchema).optional(),
  none: z.lazy(() => order_itemsWhereInputSchema).optional()
}).strict();

export const CustomersNullableScalarRelationFilterSchema: z.ZodType<Prisma.CustomersNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => customersWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => customersWhereInputSchema).optional().nullable()
}).strict();

export const order_itemsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.order_itemsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ordersCountOrderByAggregateInputSchema: z.ZodType<Prisma.ordersCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  store_owner_id: z.lazy(() => SortOrderSchema).optional(),
  customer_id: z.lazy(() => SortOrderSchema).optional(),
  customer_name: z.lazy(() => SortOrderSchema).optional(),
  customer_email: z.lazy(() => SortOrderSchema).optional(),
  customer_phone: z.lazy(() => SortOrderSchema).optional(),
  total_amount: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ordersAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ordersAvgOrderByAggregateInput> = z.object({
  total_amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ordersMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ordersMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  store_owner_id: z.lazy(() => SortOrderSchema).optional(),
  customer_id: z.lazy(() => SortOrderSchema).optional(),
  customer_name: z.lazy(() => SortOrderSchema).optional(),
  customer_email: z.lazy(() => SortOrderSchema).optional(),
  customer_phone: z.lazy(() => SortOrderSchema).optional(),
  total_amount: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ordersMinOrderByAggregateInputSchema: z.ZodType<Prisma.ordersMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  store_owner_id: z.lazy(() => SortOrderSchema).optional(),
  customer_id: z.lazy(() => SortOrderSchema).optional(),
  customer_name: z.lazy(() => SortOrderSchema).optional(),
  customer_email: z.lazy(() => SortOrderSchema).optional(),
  customer_phone: z.lazy(() => SortOrderSchema).optional(),
  total_amount: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ordersSumOrderByAggregateInputSchema: z.ZodType<Prisma.ordersSumOrderByAggregateInput> = z.object({
  total_amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const product_costsCountOrderByAggregateInputSchema: z.ZodType<Prisma.product_costsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional(),
  product_name: z.lazy(() => SortOrderSchema).optional(),
  cost_price: z.lazy(() => SortOrderSchema).optional(),
  desired_margin: z.lazy(() => SortOrderSchema).optional(),
  suggested_price: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const product_costsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.product_costsAvgOrderByAggregateInput> = z.object({
  cost_price: z.lazy(() => SortOrderSchema).optional(),
  desired_margin: z.lazy(() => SortOrderSchema).optional(),
  suggested_price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const product_costsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.product_costsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional(),
  product_name: z.lazy(() => SortOrderSchema).optional(),
  cost_price: z.lazy(() => SortOrderSchema).optional(),
  desired_margin: z.lazy(() => SortOrderSchema).optional(),
  suggested_price: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const product_costsMinOrderByAggregateInputSchema: z.ZodType<Prisma.product_costsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional(),
  product_name: z.lazy(() => SortOrderSchema).optional(),
  cost_price: z.lazy(() => SortOrderSchema).optional(),
  desired_margin: z.lazy(() => SortOrderSchema).optional(),
  suggested_price: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const product_costsSumOrderByAggregateInputSchema: z.ZodType<Prisma.product_costsSumOrderByAggregateInput> = z.object({
  cost_price: z.lazy(() => SortOrderSchema).optional(),
  desired_margin: z.lazy(() => SortOrderSchema).optional(),
  suggested_price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringNullableListFilterSchema: z.ZodType<Prisma.StringNullableListFilter> = z.object({
  equals: z.string().array().optional().nullable(),
  has: z.string().optional().nullable(),
  hasEvery: z.string().array().optional(),
  hasSome: z.string().array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const CategoriesNullableScalarRelationFilterSchema: z.ZodType<Prisma.CategoriesNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => categoriesWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => categoriesWhereInputSchema).optional().nullable()
}).strict();

export const productsCountOrderByAggregateInputSchema: z.ZodType<Prisma.productsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  category_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  stock: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  images: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const productsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.productsAvgOrderByAggregateInput> = z.object({
  price: z.lazy(() => SortOrderSchema).optional(),
  stock: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const productsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.productsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  category_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  stock: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const productsMinOrderByAggregateInputSchema: z.ZodType<Prisma.productsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  category_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  stock: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const productsSumOrderByAggregateInputSchema: z.ZodType<Prisma.productsSumOrderByAggregateInput> = z.object({
  price: z.lazy(() => SortOrderSchema).optional(),
  stock: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const profilesCountOrderByAggregateInputSchema: z.ZodType<Prisma.profilesCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  full_name: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const profilesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.profilesMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  full_name: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const profilesMinOrderByAggregateInputSchema: z.ZodType<Prisma.profilesMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  full_name: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const salesCountOrderByAggregateInputSchema: z.ZodType<Prisma.salesCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  product_name: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  total_price: z.lazy(() => SortOrderSchema).optional(),
  sale_date: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const salesAvgOrderByAggregateInputSchema: z.ZodType<Prisma.salesAvgOrderByAggregateInput> = z.object({
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  total_price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const salesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.salesMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  product_name: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  total_price: z.lazy(() => SortOrderSchema).optional(),
  sale_date: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const salesMinOrderByAggregateInputSchema: z.ZodType<Prisma.salesMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  product_name: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  total_price: z.lazy(() => SortOrderSchema).optional(),
  sale_date: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  store_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const salesSumOrderByAggregateInputSchema: z.ZodType<Prisma.salesSumOrderByAggregateInput> = z.object({
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  total_price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const store_settingsCountOrderByAggregateInputSchema: z.ZodType<Prisma.store_settingsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_name: z.lazy(() => SortOrderSchema).optional(),
  store_description: z.lazy(() => SortOrderSchema).optional(),
  mobile_logo: z.lazy(() => SortOrderSchema).optional(),
  desktop_banner: z.lazy(() => SortOrderSchema).optional(),
  mobile_banner_color: z.lazy(() => SortOrderSchema).optional(),
  mobile_banner_image: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  store_subtitle: z.lazy(() => SortOrderSchema).optional(),
  instagram_url: z.lazy(() => SortOrderSchema).optional(),
  whatsapp_number: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const store_settingsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.store_settingsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_name: z.lazy(() => SortOrderSchema).optional(),
  store_description: z.lazy(() => SortOrderSchema).optional(),
  mobile_logo: z.lazy(() => SortOrderSchema).optional(),
  desktop_banner: z.lazy(() => SortOrderSchema).optional(),
  mobile_banner_color: z.lazy(() => SortOrderSchema).optional(),
  mobile_banner_image: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  store_subtitle: z.lazy(() => SortOrderSchema).optional(),
  instagram_url: z.lazy(() => SortOrderSchema).optional(),
  whatsapp_number: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const store_settingsMinOrderByAggregateInputSchema: z.ZodType<Prisma.store_settingsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  store_name: z.lazy(() => SortOrderSchema).optional(),
  store_description: z.lazy(() => SortOrderSchema).optional(),
  mobile_logo: z.lazy(() => SortOrderSchema).optional(),
  desktop_banner: z.lazy(() => SortOrderSchema).optional(),
  mobile_banner_color: z.lazy(() => SortOrderSchema).optional(),
  mobile_banner_image: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  store_subtitle: z.lazy(() => SortOrderSchema).optional(),
  instagram_url: z.lazy(() => SortOrderSchema).optional(),
  whatsapp_number: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SalesListRelationFilterSchema: z.ZodType<Prisma.SalesListRelationFilter> = z.object({
  every: z.lazy(() => salesWhereInputSchema).optional(),
  some: z.lazy(() => salesWhereInputSchema).optional(),
  none: z.lazy(() => salesWhereInputSchema).optional()
}).strict();

export const salesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.salesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const storesCountOrderByAggregateInputSchema: z.ZodType<Prisma.storesCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  domain: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  logo_url: z.lazy(() => SortOrderSchema).optional(),
  banner_url: z.lazy(() => SortOrderSchema).optional(),
  whatsapp_number: z.lazy(() => SortOrderSchema).optional(),
  instagram_url: z.lazy(() => SortOrderSchema).optional(),
  theme_color: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const storesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.storesMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  domain: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  logo_url: z.lazy(() => SortOrderSchema).optional(),
  banner_url: z.lazy(() => SortOrderSchema).optional(),
  whatsapp_number: z.lazy(() => SortOrderSchema).optional(),
  instagram_url: z.lazy(() => SortOrderSchema).optional(),
  theme_color: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const storesMinOrderByAggregateInputSchema: z.ZodType<Prisma.storesMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  domain: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  logo_url: z.lazy(() => SortOrderSchema).optional(),
  banner_url: z.lazy(() => SortOrderSchema).optional(),
  whatsapp_number: z.lazy(() => SortOrderSchema).optional(),
  instagram_url: z.lazy(() => SortOrderSchema).optional(),
  theme_color: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DomainListRelationFilterSchema: z.ZodType<Prisma.DomainListRelationFilter> = z.object({
  every: z.lazy(() => DomainWhereInputSchema).optional(),
  some: z.lazy(() => DomainWhereInputSchema).optional(),
  none: z.lazy(() => DomainWhereInputSchema).optional()
}).strict();

export const DomainOrderByRelationAggregateInputSchema: z.ZodType<Prisma.DomainOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserScalarRelationFilterSchema: z.ZodType<Prisma.UserScalarRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const ProductListRelationFilterSchema: z.ZodType<Prisma.ProductListRelationFilter> = z.object({
  every: z.lazy(() => ProductWhereInputSchema).optional(),
  some: z.lazy(() => ProductWhereInputSchema).optional(),
  none: z.lazy(() => ProductWhereInputSchema).optional()
}).strict();

export const ProductOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProductOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DomainCountOrderByAggregateInputSchema: z.ZodType<Prisma.DomainCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DomainMaxOrderByAggregateInputSchema: z.ZodType<Prisma.DomainMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DomainMinOrderByAggregateInputSchema: z.ZodType<Prisma.DomainMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FloatFilterSchema: z.ZodType<Prisma.FloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const DomainScalarRelationFilterSchema: z.ZodType<Prisma.DomainScalarRelationFilter> = z.object({
  is: z.lazy(() => DomainWhereInputSchema).optional(),
  isNot: z.lazy(() => DomainWhereInputSchema).optional()
}).strict();

export const ProductCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProductCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.lazy(() => SortOrderSchema).optional(),
  domainId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ProductAvgOrderByAggregateInput> = z.object({
  price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProductMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.lazy(() => SortOrderSchema).optional(),
  domainId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProductMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.lazy(() => SortOrderSchema).optional(),
  domainId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductSumOrderByAggregateInputSchema: z.ZodType<Prisma.ProductSumOrderByAggregateInput> = z.object({
  price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FloatWithAggregatesFilterSchema: z.ZodType<Prisma.FloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const saml_relay_statesCreateNestedManyWithoutFlow_stateInputSchema: z.ZodType<Prisma.saml_relay_statesCreateNestedManyWithoutFlow_stateInput> = z.object({
  create: z.union([ z.lazy(() => saml_relay_statesCreateWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesCreateWithoutFlow_stateInputSchema).array(),z.lazy(() => saml_relay_statesUncheckedCreateWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesUncheckedCreateWithoutFlow_stateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => saml_relay_statesCreateOrConnectWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesCreateOrConnectWithoutFlow_stateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => saml_relay_statesCreateManyFlow_stateInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => saml_relay_statesWhereUniqueInputSchema),z.lazy(() => saml_relay_statesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const saml_relay_statesUncheckedCreateNestedManyWithoutFlow_stateInputSchema: z.ZodType<Prisma.saml_relay_statesUncheckedCreateNestedManyWithoutFlow_stateInput> = z.object({
  create: z.union([ z.lazy(() => saml_relay_statesCreateWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesCreateWithoutFlow_stateInputSchema).array(),z.lazy(() => saml_relay_statesUncheckedCreateWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesUncheckedCreateWithoutFlow_stateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => saml_relay_statesCreateOrConnectWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesCreateOrConnectWithoutFlow_stateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => saml_relay_statesCreateManyFlow_stateInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => saml_relay_statesWhereUniqueInputSchema),z.lazy(() => saml_relay_statesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Enumcode_challenge_methodFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumcode_challenge_methodFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => code_challenge_methodSchema).optional()
}).strict();

export const saml_relay_statesUpdateManyWithoutFlow_stateNestedInputSchema: z.ZodType<Prisma.saml_relay_statesUpdateManyWithoutFlow_stateNestedInput> = z.object({
  create: z.union([ z.lazy(() => saml_relay_statesCreateWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesCreateWithoutFlow_stateInputSchema).array(),z.lazy(() => saml_relay_statesUncheckedCreateWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesUncheckedCreateWithoutFlow_stateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => saml_relay_statesCreateOrConnectWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesCreateOrConnectWithoutFlow_stateInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => saml_relay_statesUpsertWithWhereUniqueWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesUpsertWithWhereUniqueWithoutFlow_stateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => saml_relay_statesCreateManyFlow_stateInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => saml_relay_statesWhereUniqueInputSchema),z.lazy(() => saml_relay_statesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => saml_relay_statesWhereUniqueInputSchema),z.lazy(() => saml_relay_statesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => saml_relay_statesWhereUniqueInputSchema),z.lazy(() => saml_relay_statesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => saml_relay_statesWhereUniqueInputSchema),z.lazy(() => saml_relay_statesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => saml_relay_statesUpdateWithWhereUniqueWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesUpdateWithWhereUniqueWithoutFlow_stateInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => saml_relay_statesUpdateManyWithWhereWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesUpdateManyWithWhereWithoutFlow_stateInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => saml_relay_statesScalarWhereInputSchema),z.lazy(() => saml_relay_statesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const saml_relay_statesUncheckedUpdateManyWithoutFlow_stateNestedInputSchema: z.ZodType<Prisma.saml_relay_statesUncheckedUpdateManyWithoutFlow_stateNestedInput> = z.object({
  create: z.union([ z.lazy(() => saml_relay_statesCreateWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesCreateWithoutFlow_stateInputSchema).array(),z.lazy(() => saml_relay_statesUncheckedCreateWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesUncheckedCreateWithoutFlow_stateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => saml_relay_statesCreateOrConnectWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesCreateOrConnectWithoutFlow_stateInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => saml_relay_statesUpsertWithWhereUniqueWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesUpsertWithWhereUniqueWithoutFlow_stateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => saml_relay_statesCreateManyFlow_stateInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => saml_relay_statesWhereUniqueInputSchema),z.lazy(() => saml_relay_statesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => saml_relay_statesWhereUniqueInputSchema),z.lazy(() => saml_relay_statesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => saml_relay_statesWhereUniqueInputSchema),z.lazy(() => saml_relay_statesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => saml_relay_statesWhereUniqueInputSchema),z.lazy(() => saml_relay_statesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => saml_relay_statesUpdateWithWhereUniqueWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesUpdateWithWhereUniqueWithoutFlow_stateInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => saml_relay_statesUpdateManyWithWhereWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesUpdateManyWithWhereWithoutFlow_stateInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => saml_relay_statesScalarWhereInputSchema),z.lazy(() => saml_relay_statesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const usersCreateNestedOneWithoutIdentitiesInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutIdentitiesInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutIdentitiesInputSchema),z.lazy(() => usersUncheckedCreateWithoutIdentitiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutIdentitiesInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const usersUpdateOneRequiredWithoutIdentitiesNestedInputSchema: z.ZodType<Prisma.usersUpdateOneRequiredWithoutIdentitiesNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutIdentitiesInputSchema),z.lazy(() => usersUncheckedCreateWithoutIdentitiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutIdentitiesInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutIdentitiesInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutIdentitiesInputSchema),z.lazy(() => usersUpdateWithoutIdentitiesInputSchema),z.lazy(() => usersUncheckedUpdateWithoutIdentitiesInputSchema) ]).optional(),
}).strict();

export const sessionsCreateNestedOneWithoutMfa_amr_claimsInputSchema: z.ZodType<Prisma.sessionsCreateNestedOneWithoutMfa_amr_claimsInput> = z.object({
  create: z.union([ z.lazy(() => sessionsCreateWithoutMfa_amr_claimsInputSchema),z.lazy(() => sessionsUncheckedCreateWithoutMfa_amr_claimsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => sessionsCreateOrConnectWithoutMfa_amr_claimsInputSchema).optional(),
  connect: z.lazy(() => sessionsWhereUniqueInputSchema).optional()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const sessionsUpdateOneRequiredWithoutMfa_amr_claimsNestedInputSchema: z.ZodType<Prisma.sessionsUpdateOneRequiredWithoutMfa_amr_claimsNestedInput> = z.object({
  create: z.union([ z.lazy(() => sessionsCreateWithoutMfa_amr_claimsInputSchema),z.lazy(() => sessionsUncheckedCreateWithoutMfa_amr_claimsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => sessionsCreateOrConnectWithoutMfa_amr_claimsInputSchema).optional(),
  upsert: z.lazy(() => sessionsUpsertWithoutMfa_amr_claimsInputSchema).optional(),
  connect: z.lazy(() => sessionsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => sessionsUpdateToOneWithWhereWithoutMfa_amr_claimsInputSchema),z.lazy(() => sessionsUpdateWithoutMfa_amr_claimsInputSchema),z.lazy(() => sessionsUncheckedUpdateWithoutMfa_amr_claimsInputSchema) ]).optional(),
}).strict();

export const mfa_factorsCreateNestedOneWithoutMfa_challengesInputSchema: z.ZodType<Prisma.mfa_factorsCreateNestedOneWithoutMfa_challengesInput> = z.object({
  create: z.union([ z.lazy(() => mfa_factorsCreateWithoutMfa_challengesInputSchema),z.lazy(() => mfa_factorsUncheckedCreateWithoutMfa_challengesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => mfa_factorsCreateOrConnectWithoutMfa_challengesInputSchema).optional(),
  connect: z.lazy(() => mfa_factorsWhereUniqueInputSchema).optional()
}).strict();

export const mfa_factorsUpdateOneRequiredWithoutMfa_challengesNestedInputSchema: z.ZodType<Prisma.mfa_factorsUpdateOneRequiredWithoutMfa_challengesNestedInput> = z.object({
  create: z.union([ z.lazy(() => mfa_factorsCreateWithoutMfa_challengesInputSchema),z.lazy(() => mfa_factorsUncheckedCreateWithoutMfa_challengesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => mfa_factorsCreateOrConnectWithoutMfa_challengesInputSchema).optional(),
  upsert: z.lazy(() => mfa_factorsUpsertWithoutMfa_challengesInputSchema).optional(),
  connect: z.lazy(() => mfa_factorsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => mfa_factorsUpdateToOneWithWhereWithoutMfa_challengesInputSchema),z.lazy(() => mfa_factorsUpdateWithoutMfa_challengesInputSchema),z.lazy(() => mfa_factorsUncheckedUpdateWithoutMfa_challengesInputSchema) ]).optional(),
}).strict();

export const mfa_challengesCreateNestedManyWithoutMfa_factorsInputSchema: z.ZodType<Prisma.mfa_challengesCreateNestedManyWithoutMfa_factorsInput> = z.object({
  create: z.union([ z.lazy(() => mfa_challengesCreateWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesCreateWithoutMfa_factorsInputSchema).array(),z.lazy(() => mfa_challengesUncheckedCreateWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesUncheckedCreateWithoutMfa_factorsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => mfa_challengesCreateOrConnectWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesCreateOrConnectWithoutMfa_factorsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => mfa_challengesCreateManyMfa_factorsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => mfa_challengesWhereUniqueInputSchema),z.lazy(() => mfa_challengesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const usersCreateNestedOneWithoutMfa_factorsInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutMfa_factorsInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutMfa_factorsInputSchema),z.lazy(() => usersUncheckedCreateWithoutMfa_factorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutMfa_factorsInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const mfa_challengesUncheckedCreateNestedManyWithoutMfa_factorsInputSchema: z.ZodType<Prisma.mfa_challengesUncheckedCreateNestedManyWithoutMfa_factorsInput> = z.object({
  create: z.union([ z.lazy(() => mfa_challengesCreateWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesCreateWithoutMfa_factorsInputSchema).array(),z.lazy(() => mfa_challengesUncheckedCreateWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesUncheckedCreateWithoutMfa_factorsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => mfa_challengesCreateOrConnectWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesCreateOrConnectWithoutMfa_factorsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => mfa_challengesCreateManyMfa_factorsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => mfa_challengesWhereUniqueInputSchema),z.lazy(() => mfa_challengesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Enumfactor_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumfactor_typeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => factor_typeSchema).optional()
}).strict();

export const Enumfactor_statusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumfactor_statusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => factor_statusSchema).optional()
}).strict();

export const mfa_challengesUpdateManyWithoutMfa_factorsNestedInputSchema: z.ZodType<Prisma.mfa_challengesUpdateManyWithoutMfa_factorsNestedInput> = z.object({
  create: z.union([ z.lazy(() => mfa_challengesCreateWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesCreateWithoutMfa_factorsInputSchema).array(),z.lazy(() => mfa_challengesUncheckedCreateWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesUncheckedCreateWithoutMfa_factorsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => mfa_challengesCreateOrConnectWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesCreateOrConnectWithoutMfa_factorsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => mfa_challengesUpsertWithWhereUniqueWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesUpsertWithWhereUniqueWithoutMfa_factorsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => mfa_challengesCreateManyMfa_factorsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => mfa_challengesWhereUniqueInputSchema),z.lazy(() => mfa_challengesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => mfa_challengesWhereUniqueInputSchema),z.lazy(() => mfa_challengesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => mfa_challengesWhereUniqueInputSchema),z.lazy(() => mfa_challengesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => mfa_challengesWhereUniqueInputSchema),z.lazy(() => mfa_challengesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => mfa_challengesUpdateWithWhereUniqueWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesUpdateWithWhereUniqueWithoutMfa_factorsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => mfa_challengesUpdateManyWithWhereWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesUpdateManyWithWhereWithoutMfa_factorsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => mfa_challengesScalarWhereInputSchema),z.lazy(() => mfa_challengesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const usersUpdateOneRequiredWithoutMfa_factorsNestedInputSchema: z.ZodType<Prisma.usersUpdateOneRequiredWithoutMfa_factorsNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutMfa_factorsInputSchema),z.lazy(() => usersUncheckedCreateWithoutMfa_factorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutMfa_factorsInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutMfa_factorsInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutMfa_factorsInputSchema),z.lazy(() => usersUpdateWithoutMfa_factorsInputSchema),z.lazy(() => usersUncheckedUpdateWithoutMfa_factorsInputSchema) ]).optional(),
}).strict();

export const mfa_challengesUncheckedUpdateManyWithoutMfa_factorsNestedInputSchema: z.ZodType<Prisma.mfa_challengesUncheckedUpdateManyWithoutMfa_factorsNestedInput> = z.object({
  create: z.union([ z.lazy(() => mfa_challengesCreateWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesCreateWithoutMfa_factorsInputSchema).array(),z.lazy(() => mfa_challengesUncheckedCreateWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesUncheckedCreateWithoutMfa_factorsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => mfa_challengesCreateOrConnectWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesCreateOrConnectWithoutMfa_factorsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => mfa_challengesUpsertWithWhereUniqueWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesUpsertWithWhereUniqueWithoutMfa_factorsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => mfa_challengesCreateManyMfa_factorsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => mfa_challengesWhereUniqueInputSchema),z.lazy(() => mfa_challengesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => mfa_challengesWhereUniqueInputSchema),z.lazy(() => mfa_challengesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => mfa_challengesWhereUniqueInputSchema),z.lazy(() => mfa_challengesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => mfa_challengesWhereUniqueInputSchema),z.lazy(() => mfa_challengesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => mfa_challengesUpdateWithWhereUniqueWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesUpdateWithWhereUniqueWithoutMfa_factorsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => mfa_challengesUpdateManyWithWhereWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesUpdateManyWithWhereWithoutMfa_factorsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => mfa_challengesScalarWhereInputSchema),z.lazy(() => mfa_challengesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const usersCreateNestedOneWithoutOne_time_tokensInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutOne_time_tokensInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutOne_time_tokensInputSchema),z.lazy(() => usersUncheckedCreateWithoutOne_time_tokensInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutOne_time_tokensInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const Enumone_time_token_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumone_time_token_typeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => one_time_token_typeSchema).optional()
}).strict();

export const usersUpdateOneRequiredWithoutOne_time_tokensNestedInputSchema: z.ZodType<Prisma.usersUpdateOneRequiredWithoutOne_time_tokensNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutOne_time_tokensInputSchema),z.lazy(() => usersUncheckedCreateWithoutOne_time_tokensInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutOne_time_tokensInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutOne_time_tokensInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutOne_time_tokensInputSchema),z.lazy(() => usersUpdateWithoutOne_time_tokensInputSchema),z.lazy(() => usersUncheckedUpdateWithoutOne_time_tokensInputSchema) ]).optional(),
}).strict();

export const sessionsCreateNestedOneWithoutRefresh_tokensInputSchema: z.ZodType<Prisma.sessionsCreateNestedOneWithoutRefresh_tokensInput> = z.object({
  create: z.union([ z.lazy(() => sessionsCreateWithoutRefresh_tokensInputSchema),z.lazy(() => sessionsUncheckedCreateWithoutRefresh_tokensInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => sessionsCreateOrConnectWithoutRefresh_tokensInputSchema).optional(),
  connect: z.lazy(() => sessionsWhereUniqueInputSchema).optional()
}).strict();

export const BigIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BigIntFieldUpdateOperationsInput> = z.object({
  set: z.bigint().optional(),
  increment: z.bigint().optional(),
  decrement: z.bigint().optional(),
  multiply: z.bigint().optional(),
  divide: z.bigint().optional()
}).strict();

export const NullableBoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableBoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional().nullable()
}).strict();

export const sessionsUpdateOneWithoutRefresh_tokensNestedInputSchema: z.ZodType<Prisma.sessionsUpdateOneWithoutRefresh_tokensNestedInput> = z.object({
  create: z.union([ z.lazy(() => sessionsCreateWithoutRefresh_tokensInputSchema),z.lazy(() => sessionsUncheckedCreateWithoutRefresh_tokensInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => sessionsCreateOrConnectWithoutRefresh_tokensInputSchema).optional(),
  upsert: z.lazy(() => sessionsUpsertWithoutRefresh_tokensInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => sessionsWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => sessionsWhereInputSchema) ]).optional(),
  connect: z.lazy(() => sessionsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => sessionsUpdateToOneWithWhereWithoutRefresh_tokensInputSchema),z.lazy(() => sessionsUpdateWithoutRefresh_tokensInputSchema),z.lazy(() => sessionsUncheckedUpdateWithoutRefresh_tokensInputSchema) ]).optional(),
}).strict();

export const sso_providersCreateNestedOneWithoutSaml_providersInputSchema: z.ZodType<Prisma.sso_providersCreateNestedOneWithoutSaml_providersInput> = z.object({
  create: z.union([ z.lazy(() => sso_providersCreateWithoutSaml_providersInputSchema),z.lazy(() => sso_providersUncheckedCreateWithoutSaml_providersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => sso_providersCreateOrConnectWithoutSaml_providersInputSchema).optional(),
  connect: z.lazy(() => sso_providersWhereUniqueInputSchema).optional()
}).strict();

export const sso_providersUpdateOneRequiredWithoutSaml_providersNestedInputSchema: z.ZodType<Prisma.sso_providersUpdateOneRequiredWithoutSaml_providersNestedInput> = z.object({
  create: z.union([ z.lazy(() => sso_providersCreateWithoutSaml_providersInputSchema),z.lazy(() => sso_providersUncheckedCreateWithoutSaml_providersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => sso_providersCreateOrConnectWithoutSaml_providersInputSchema).optional(),
  upsert: z.lazy(() => sso_providersUpsertWithoutSaml_providersInputSchema).optional(),
  connect: z.lazy(() => sso_providersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => sso_providersUpdateToOneWithWhereWithoutSaml_providersInputSchema),z.lazy(() => sso_providersUpdateWithoutSaml_providersInputSchema),z.lazy(() => sso_providersUncheckedUpdateWithoutSaml_providersInputSchema) ]).optional(),
}).strict();

export const flow_stateCreateNestedOneWithoutSaml_relay_statesInputSchema: z.ZodType<Prisma.flow_stateCreateNestedOneWithoutSaml_relay_statesInput> = z.object({
  create: z.union([ z.lazy(() => flow_stateCreateWithoutSaml_relay_statesInputSchema),z.lazy(() => flow_stateUncheckedCreateWithoutSaml_relay_statesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => flow_stateCreateOrConnectWithoutSaml_relay_statesInputSchema).optional(),
  connect: z.lazy(() => flow_stateWhereUniqueInputSchema).optional()
}).strict();

export const sso_providersCreateNestedOneWithoutSaml_relay_statesInputSchema: z.ZodType<Prisma.sso_providersCreateNestedOneWithoutSaml_relay_statesInput> = z.object({
  create: z.union([ z.lazy(() => sso_providersCreateWithoutSaml_relay_statesInputSchema),z.lazy(() => sso_providersUncheckedCreateWithoutSaml_relay_statesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => sso_providersCreateOrConnectWithoutSaml_relay_statesInputSchema).optional(),
  connect: z.lazy(() => sso_providersWhereUniqueInputSchema).optional()
}).strict();

export const flow_stateUpdateOneWithoutSaml_relay_statesNestedInputSchema: z.ZodType<Prisma.flow_stateUpdateOneWithoutSaml_relay_statesNestedInput> = z.object({
  create: z.union([ z.lazy(() => flow_stateCreateWithoutSaml_relay_statesInputSchema),z.lazy(() => flow_stateUncheckedCreateWithoutSaml_relay_statesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => flow_stateCreateOrConnectWithoutSaml_relay_statesInputSchema).optional(),
  upsert: z.lazy(() => flow_stateUpsertWithoutSaml_relay_statesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => flow_stateWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => flow_stateWhereInputSchema) ]).optional(),
  connect: z.lazy(() => flow_stateWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => flow_stateUpdateToOneWithWhereWithoutSaml_relay_statesInputSchema),z.lazy(() => flow_stateUpdateWithoutSaml_relay_statesInputSchema),z.lazy(() => flow_stateUncheckedUpdateWithoutSaml_relay_statesInputSchema) ]).optional(),
}).strict();

export const sso_providersUpdateOneRequiredWithoutSaml_relay_statesNestedInputSchema: z.ZodType<Prisma.sso_providersUpdateOneRequiredWithoutSaml_relay_statesNestedInput> = z.object({
  create: z.union([ z.lazy(() => sso_providersCreateWithoutSaml_relay_statesInputSchema),z.lazy(() => sso_providersUncheckedCreateWithoutSaml_relay_statesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => sso_providersCreateOrConnectWithoutSaml_relay_statesInputSchema).optional(),
  upsert: z.lazy(() => sso_providersUpsertWithoutSaml_relay_statesInputSchema).optional(),
  connect: z.lazy(() => sso_providersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => sso_providersUpdateToOneWithWhereWithoutSaml_relay_statesInputSchema),z.lazy(() => sso_providersUpdateWithoutSaml_relay_statesInputSchema),z.lazy(() => sso_providersUncheckedUpdateWithoutSaml_relay_statesInputSchema) ]).optional(),
}).strict();

export const mfa_amr_claimsCreateNestedManyWithoutSessionsInputSchema: z.ZodType<Prisma.mfa_amr_claimsCreateNestedManyWithoutSessionsInput> = z.object({
  create: z.union([ z.lazy(() => mfa_amr_claimsCreateWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsCreateWithoutSessionsInputSchema).array(),z.lazy(() => mfa_amr_claimsUncheckedCreateWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsUncheckedCreateWithoutSessionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => mfa_amr_claimsCreateOrConnectWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsCreateOrConnectWithoutSessionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => mfa_amr_claimsCreateManySessionsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema),z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const refresh_tokensCreateNestedManyWithoutSessionsInputSchema: z.ZodType<Prisma.refresh_tokensCreateNestedManyWithoutSessionsInput> = z.object({
  create: z.union([ z.lazy(() => refresh_tokensCreateWithoutSessionsInputSchema),z.lazy(() => refresh_tokensCreateWithoutSessionsInputSchema).array(),z.lazy(() => refresh_tokensUncheckedCreateWithoutSessionsInputSchema),z.lazy(() => refresh_tokensUncheckedCreateWithoutSessionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => refresh_tokensCreateOrConnectWithoutSessionsInputSchema),z.lazy(() => refresh_tokensCreateOrConnectWithoutSessionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => refresh_tokensCreateManySessionsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => refresh_tokensWhereUniqueInputSchema),z.lazy(() => refresh_tokensWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const usersCreateNestedOneWithoutSessionsInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutSessionsInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutSessionsInputSchema),z.lazy(() => usersUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const mfa_amr_claimsUncheckedCreateNestedManyWithoutSessionsInputSchema: z.ZodType<Prisma.mfa_amr_claimsUncheckedCreateNestedManyWithoutSessionsInput> = z.object({
  create: z.union([ z.lazy(() => mfa_amr_claimsCreateWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsCreateWithoutSessionsInputSchema).array(),z.lazy(() => mfa_amr_claimsUncheckedCreateWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsUncheckedCreateWithoutSessionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => mfa_amr_claimsCreateOrConnectWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsCreateOrConnectWithoutSessionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => mfa_amr_claimsCreateManySessionsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema),z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const refresh_tokensUncheckedCreateNestedManyWithoutSessionsInputSchema: z.ZodType<Prisma.refresh_tokensUncheckedCreateNestedManyWithoutSessionsInput> = z.object({
  create: z.union([ z.lazy(() => refresh_tokensCreateWithoutSessionsInputSchema),z.lazy(() => refresh_tokensCreateWithoutSessionsInputSchema).array(),z.lazy(() => refresh_tokensUncheckedCreateWithoutSessionsInputSchema),z.lazy(() => refresh_tokensUncheckedCreateWithoutSessionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => refresh_tokensCreateOrConnectWithoutSessionsInputSchema),z.lazy(() => refresh_tokensCreateOrConnectWithoutSessionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => refresh_tokensCreateManySessionsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => refresh_tokensWhereUniqueInputSchema),z.lazy(() => refresh_tokensWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableEnumaal_levelFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumaal_levelFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => aal_levelSchema).optional().nullable()
}).strict();

export const mfa_amr_claimsUpdateManyWithoutSessionsNestedInputSchema: z.ZodType<Prisma.mfa_amr_claimsUpdateManyWithoutSessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => mfa_amr_claimsCreateWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsCreateWithoutSessionsInputSchema).array(),z.lazy(() => mfa_amr_claimsUncheckedCreateWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsUncheckedCreateWithoutSessionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => mfa_amr_claimsCreateOrConnectWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsCreateOrConnectWithoutSessionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => mfa_amr_claimsUpsertWithWhereUniqueWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsUpsertWithWhereUniqueWithoutSessionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => mfa_amr_claimsCreateManySessionsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema),z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema),z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema),z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema),z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => mfa_amr_claimsUpdateWithWhereUniqueWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsUpdateWithWhereUniqueWithoutSessionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => mfa_amr_claimsUpdateManyWithWhereWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsUpdateManyWithWhereWithoutSessionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => mfa_amr_claimsScalarWhereInputSchema),z.lazy(() => mfa_amr_claimsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const refresh_tokensUpdateManyWithoutSessionsNestedInputSchema: z.ZodType<Prisma.refresh_tokensUpdateManyWithoutSessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => refresh_tokensCreateWithoutSessionsInputSchema),z.lazy(() => refresh_tokensCreateWithoutSessionsInputSchema).array(),z.lazy(() => refresh_tokensUncheckedCreateWithoutSessionsInputSchema),z.lazy(() => refresh_tokensUncheckedCreateWithoutSessionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => refresh_tokensCreateOrConnectWithoutSessionsInputSchema),z.lazy(() => refresh_tokensCreateOrConnectWithoutSessionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => refresh_tokensUpsertWithWhereUniqueWithoutSessionsInputSchema),z.lazy(() => refresh_tokensUpsertWithWhereUniqueWithoutSessionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => refresh_tokensCreateManySessionsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => refresh_tokensWhereUniqueInputSchema),z.lazy(() => refresh_tokensWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => refresh_tokensWhereUniqueInputSchema),z.lazy(() => refresh_tokensWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => refresh_tokensWhereUniqueInputSchema),z.lazy(() => refresh_tokensWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => refresh_tokensWhereUniqueInputSchema),z.lazy(() => refresh_tokensWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => refresh_tokensUpdateWithWhereUniqueWithoutSessionsInputSchema),z.lazy(() => refresh_tokensUpdateWithWhereUniqueWithoutSessionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => refresh_tokensUpdateManyWithWhereWithoutSessionsInputSchema),z.lazy(() => refresh_tokensUpdateManyWithWhereWithoutSessionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => refresh_tokensScalarWhereInputSchema),z.lazy(() => refresh_tokensScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const usersUpdateOneRequiredWithoutSessionsNestedInputSchema: z.ZodType<Prisma.usersUpdateOneRequiredWithoutSessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutSessionsInputSchema),z.lazy(() => usersUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutSessionsInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutSessionsInputSchema),z.lazy(() => usersUpdateWithoutSessionsInputSchema),z.lazy(() => usersUncheckedUpdateWithoutSessionsInputSchema) ]).optional(),
}).strict();

export const mfa_amr_claimsUncheckedUpdateManyWithoutSessionsNestedInputSchema: z.ZodType<Prisma.mfa_amr_claimsUncheckedUpdateManyWithoutSessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => mfa_amr_claimsCreateWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsCreateWithoutSessionsInputSchema).array(),z.lazy(() => mfa_amr_claimsUncheckedCreateWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsUncheckedCreateWithoutSessionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => mfa_amr_claimsCreateOrConnectWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsCreateOrConnectWithoutSessionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => mfa_amr_claimsUpsertWithWhereUniqueWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsUpsertWithWhereUniqueWithoutSessionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => mfa_amr_claimsCreateManySessionsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema),z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema),z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema),z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema),z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => mfa_amr_claimsUpdateWithWhereUniqueWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsUpdateWithWhereUniqueWithoutSessionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => mfa_amr_claimsUpdateManyWithWhereWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsUpdateManyWithWhereWithoutSessionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => mfa_amr_claimsScalarWhereInputSchema),z.lazy(() => mfa_amr_claimsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const refresh_tokensUncheckedUpdateManyWithoutSessionsNestedInputSchema: z.ZodType<Prisma.refresh_tokensUncheckedUpdateManyWithoutSessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => refresh_tokensCreateWithoutSessionsInputSchema),z.lazy(() => refresh_tokensCreateWithoutSessionsInputSchema).array(),z.lazy(() => refresh_tokensUncheckedCreateWithoutSessionsInputSchema),z.lazy(() => refresh_tokensUncheckedCreateWithoutSessionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => refresh_tokensCreateOrConnectWithoutSessionsInputSchema),z.lazy(() => refresh_tokensCreateOrConnectWithoutSessionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => refresh_tokensUpsertWithWhereUniqueWithoutSessionsInputSchema),z.lazy(() => refresh_tokensUpsertWithWhereUniqueWithoutSessionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => refresh_tokensCreateManySessionsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => refresh_tokensWhereUniqueInputSchema),z.lazy(() => refresh_tokensWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => refresh_tokensWhereUniqueInputSchema),z.lazy(() => refresh_tokensWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => refresh_tokensWhereUniqueInputSchema),z.lazy(() => refresh_tokensWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => refresh_tokensWhereUniqueInputSchema),z.lazy(() => refresh_tokensWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => refresh_tokensUpdateWithWhereUniqueWithoutSessionsInputSchema),z.lazy(() => refresh_tokensUpdateWithWhereUniqueWithoutSessionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => refresh_tokensUpdateManyWithWhereWithoutSessionsInputSchema),z.lazy(() => refresh_tokensUpdateManyWithWhereWithoutSessionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => refresh_tokensScalarWhereInputSchema),z.lazy(() => refresh_tokensScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const sso_providersCreateNestedOneWithoutSso_domainsInputSchema: z.ZodType<Prisma.sso_providersCreateNestedOneWithoutSso_domainsInput> = z.object({
  create: z.union([ z.lazy(() => sso_providersCreateWithoutSso_domainsInputSchema),z.lazy(() => sso_providersUncheckedCreateWithoutSso_domainsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => sso_providersCreateOrConnectWithoutSso_domainsInputSchema).optional(),
  connect: z.lazy(() => sso_providersWhereUniqueInputSchema).optional()
}).strict();

export const sso_providersUpdateOneRequiredWithoutSso_domainsNestedInputSchema: z.ZodType<Prisma.sso_providersUpdateOneRequiredWithoutSso_domainsNestedInput> = z.object({
  create: z.union([ z.lazy(() => sso_providersCreateWithoutSso_domainsInputSchema),z.lazy(() => sso_providersUncheckedCreateWithoutSso_domainsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => sso_providersCreateOrConnectWithoutSso_domainsInputSchema).optional(),
  upsert: z.lazy(() => sso_providersUpsertWithoutSso_domainsInputSchema).optional(),
  connect: z.lazy(() => sso_providersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => sso_providersUpdateToOneWithWhereWithoutSso_domainsInputSchema),z.lazy(() => sso_providersUpdateWithoutSso_domainsInputSchema),z.lazy(() => sso_providersUncheckedUpdateWithoutSso_domainsInputSchema) ]).optional(),
}).strict();

export const saml_providersCreateNestedManyWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_providersCreateNestedManyWithoutSso_providersInput> = z.object({
  create: z.union([ z.lazy(() => saml_providersCreateWithoutSso_providersInputSchema),z.lazy(() => saml_providersCreateWithoutSso_providersInputSchema).array(),z.lazy(() => saml_providersUncheckedCreateWithoutSso_providersInputSchema),z.lazy(() => saml_providersUncheckedCreateWithoutSso_providersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => saml_providersCreateOrConnectWithoutSso_providersInputSchema),z.lazy(() => saml_providersCreateOrConnectWithoutSso_providersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => saml_providersCreateManySso_providersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => saml_providersWhereUniqueInputSchema),z.lazy(() => saml_providersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const saml_relay_statesCreateNestedManyWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_relay_statesCreateNestedManyWithoutSso_providersInput> = z.object({
  create: z.union([ z.lazy(() => saml_relay_statesCreateWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesCreateWithoutSso_providersInputSchema).array(),z.lazy(() => saml_relay_statesUncheckedCreateWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesUncheckedCreateWithoutSso_providersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => saml_relay_statesCreateOrConnectWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesCreateOrConnectWithoutSso_providersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => saml_relay_statesCreateManySso_providersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => saml_relay_statesWhereUniqueInputSchema),z.lazy(() => saml_relay_statesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const sso_domainsCreateNestedManyWithoutSso_providersInputSchema: z.ZodType<Prisma.sso_domainsCreateNestedManyWithoutSso_providersInput> = z.object({
  create: z.union([ z.lazy(() => sso_domainsCreateWithoutSso_providersInputSchema),z.lazy(() => sso_domainsCreateWithoutSso_providersInputSchema).array(),z.lazy(() => sso_domainsUncheckedCreateWithoutSso_providersInputSchema),z.lazy(() => sso_domainsUncheckedCreateWithoutSso_providersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => sso_domainsCreateOrConnectWithoutSso_providersInputSchema),z.lazy(() => sso_domainsCreateOrConnectWithoutSso_providersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => sso_domainsCreateManySso_providersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => sso_domainsWhereUniqueInputSchema),z.lazy(() => sso_domainsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const saml_providersUncheckedCreateNestedManyWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_providersUncheckedCreateNestedManyWithoutSso_providersInput> = z.object({
  create: z.union([ z.lazy(() => saml_providersCreateWithoutSso_providersInputSchema),z.lazy(() => saml_providersCreateWithoutSso_providersInputSchema).array(),z.lazy(() => saml_providersUncheckedCreateWithoutSso_providersInputSchema),z.lazy(() => saml_providersUncheckedCreateWithoutSso_providersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => saml_providersCreateOrConnectWithoutSso_providersInputSchema),z.lazy(() => saml_providersCreateOrConnectWithoutSso_providersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => saml_providersCreateManySso_providersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => saml_providersWhereUniqueInputSchema),z.lazy(() => saml_providersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const saml_relay_statesUncheckedCreateNestedManyWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_relay_statesUncheckedCreateNestedManyWithoutSso_providersInput> = z.object({
  create: z.union([ z.lazy(() => saml_relay_statesCreateWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesCreateWithoutSso_providersInputSchema).array(),z.lazy(() => saml_relay_statesUncheckedCreateWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesUncheckedCreateWithoutSso_providersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => saml_relay_statesCreateOrConnectWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesCreateOrConnectWithoutSso_providersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => saml_relay_statesCreateManySso_providersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => saml_relay_statesWhereUniqueInputSchema),z.lazy(() => saml_relay_statesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const sso_domainsUncheckedCreateNestedManyWithoutSso_providersInputSchema: z.ZodType<Prisma.sso_domainsUncheckedCreateNestedManyWithoutSso_providersInput> = z.object({
  create: z.union([ z.lazy(() => sso_domainsCreateWithoutSso_providersInputSchema),z.lazy(() => sso_domainsCreateWithoutSso_providersInputSchema).array(),z.lazy(() => sso_domainsUncheckedCreateWithoutSso_providersInputSchema),z.lazy(() => sso_domainsUncheckedCreateWithoutSso_providersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => sso_domainsCreateOrConnectWithoutSso_providersInputSchema),z.lazy(() => sso_domainsCreateOrConnectWithoutSso_providersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => sso_domainsCreateManySso_providersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => sso_domainsWhereUniqueInputSchema),z.lazy(() => sso_domainsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const saml_providersUpdateManyWithoutSso_providersNestedInputSchema: z.ZodType<Prisma.saml_providersUpdateManyWithoutSso_providersNestedInput> = z.object({
  create: z.union([ z.lazy(() => saml_providersCreateWithoutSso_providersInputSchema),z.lazy(() => saml_providersCreateWithoutSso_providersInputSchema).array(),z.lazy(() => saml_providersUncheckedCreateWithoutSso_providersInputSchema),z.lazy(() => saml_providersUncheckedCreateWithoutSso_providersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => saml_providersCreateOrConnectWithoutSso_providersInputSchema),z.lazy(() => saml_providersCreateOrConnectWithoutSso_providersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => saml_providersUpsertWithWhereUniqueWithoutSso_providersInputSchema),z.lazy(() => saml_providersUpsertWithWhereUniqueWithoutSso_providersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => saml_providersCreateManySso_providersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => saml_providersWhereUniqueInputSchema),z.lazy(() => saml_providersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => saml_providersWhereUniqueInputSchema),z.lazy(() => saml_providersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => saml_providersWhereUniqueInputSchema),z.lazy(() => saml_providersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => saml_providersWhereUniqueInputSchema),z.lazy(() => saml_providersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => saml_providersUpdateWithWhereUniqueWithoutSso_providersInputSchema),z.lazy(() => saml_providersUpdateWithWhereUniqueWithoutSso_providersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => saml_providersUpdateManyWithWhereWithoutSso_providersInputSchema),z.lazy(() => saml_providersUpdateManyWithWhereWithoutSso_providersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => saml_providersScalarWhereInputSchema),z.lazy(() => saml_providersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const saml_relay_statesUpdateManyWithoutSso_providersNestedInputSchema: z.ZodType<Prisma.saml_relay_statesUpdateManyWithoutSso_providersNestedInput> = z.object({
  create: z.union([ z.lazy(() => saml_relay_statesCreateWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesCreateWithoutSso_providersInputSchema).array(),z.lazy(() => saml_relay_statesUncheckedCreateWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesUncheckedCreateWithoutSso_providersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => saml_relay_statesCreateOrConnectWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesCreateOrConnectWithoutSso_providersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => saml_relay_statesUpsertWithWhereUniqueWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesUpsertWithWhereUniqueWithoutSso_providersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => saml_relay_statesCreateManySso_providersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => saml_relay_statesWhereUniqueInputSchema),z.lazy(() => saml_relay_statesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => saml_relay_statesWhereUniqueInputSchema),z.lazy(() => saml_relay_statesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => saml_relay_statesWhereUniqueInputSchema),z.lazy(() => saml_relay_statesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => saml_relay_statesWhereUniqueInputSchema),z.lazy(() => saml_relay_statesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => saml_relay_statesUpdateWithWhereUniqueWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesUpdateWithWhereUniqueWithoutSso_providersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => saml_relay_statesUpdateManyWithWhereWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesUpdateManyWithWhereWithoutSso_providersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => saml_relay_statesScalarWhereInputSchema),z.lazy(() => saml_relay_statesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const sso_domainsUpdateManyWithoutSso_providersNestedInputSchema: z.ZodType<Prisma.sso_domainsUpdateManyWithoutSso_providersNestedInput> = z.object({
  create: z.union([ z.lazy(() => sso_domainsCreateWithoutSso_providersInputSchema),z.lazy(() => sso_domainsCreateWithoutSso_providersInputSchema).array(),z.lazy(() => sso_domainsUncheckedCreateWithoutSso_providersInputSchema),z.lazy(() => sso_domainsUncheckedCreateWithoutSso_providersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => sso_domainsCreateOrConnectWithoutSso_providersInputSchema),z.lazy(() => sso_domainsCreateOrConnectWithoutSso_providersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => sso_domainsUpsertWithWhereUniqueWithoutSso_providersInputSchema),z.lazy(() => sso_domainsUpsertWithWhereUniqueWithoutSso_providersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => sso_domainsCreateManySso_providersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => sso_domainsWhereUniqueInputSchema),z.lazy(() => sso_domainsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => sso_domainsWhereUniqueInputSchema),z.lazy(() => sso_domainsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => sso_domainsWhereUniqueInputSchema),z.lazy(() => sso_domainsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => sso_domainsWhereUniqueInputSchema),z.lazy(() => sso_domainsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => sso_domainsUpdateWithWhereUniqueWithoutSso_providersInputSchema),z.lazy(() => sso_domainsUpdateWithWhereUniqueWithoutSso_providersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => sso_domainsUpdateManyWithWhereWithoutSso_providersInputSchema),z.lazy(() => sso_domainsUpdateManyWithWhereWithoutSso_providersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => sso_domainsScalarWhereInputSchema),z.lazy(() => sso_domainsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const saml_providersUncheckedUpdateManyWithoutSso_providersNestedInputSchema: z.ZodType<Prisma.saml_providersUncheckedUpdateManyWithoutSso_providersNestedInput> = z.object({
  create: z.union([ z.lazy(() => saml_providersCreateWithoutSso_providersInputSchema),z.lazy(() => saml_providersCreateWithoutSso_providersInputSchema).array(),z.lazy(() => saml_providersUncheckedCreateWithoutSso_providersInputSchema),z.lazy(() => saml_providersUncheckedCreateWithoutSso_providersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => saml_providersCreateOrConnectWithoutSso_providersInputSchema),z.lazy(() => saml_providersCreateOrConnectWithoutSso_providersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => saml_providersUpsertWithWhereUniqueWithoutSso_providersInputSchema),z.lazy(() => saml_providersUpsertWithWhereUniqueWithoutSso_providersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => saml_providersCreateManySso_providersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => saml_providersWhereUniqueInputSchema),z.lazy(() => saml_providersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => saml_providersWhereUniqueInputSchema),z.lazy(() => saml_providersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => saml_providersWhereUniqueInputSchema),z.lazy(() => saml_providersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => saml_providersWhereUniqueInputSchema),z.lazy(() => saml_providersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => saml_providersUpdateWithWhereUniqueWithoutSso_providersInputSchema),z.lazy(() => saml_providersUpdateWithWhereUniqueWithoutSso_providersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => saml_providersUpdateManyWithWhereWithoutSso_providersInputSchema),z.lazy(() => saml_providersUpdateManyWithWhereWithoutSso_providersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => saml_providersScalarWhereInputSchema),z.lazy(() => saml_providersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const saml_relay_statesUncheckedUpdateManyWithoutSso_providersNestedInputSchema: z.ZodType<Prisma.saml_relay_statesUncheckedUpdateManyWithoutSso_providersNestedInput> = z.object({
  create: z.union([ z.lazy(() => saml_relay_statesCreateWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesCreateWithoutSso_providersInputSchema).array(),z.lazy(() => saml_relay_statesUncheckedCreateWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesUncheckedCreateWithoutSso_providersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => saml_relay_statesCreateOrConnectWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesCreateOrConnectWithoutSso_providersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => saml_relay_statesUpsertWithWhereUniqueWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesUpsertWithWhereUniqueWithoutSso_providersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => saml_relay_statesCreateManySso_providersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => saml_relay_statesWhereUniqueInputSchema),z.lazy(() => saml_relay_statesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => saml_relay_statesWhereUniqueInputSchema),z.lazy(() => saml_relay_statesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => saml_relay_statesWhereUniqueInputSchema),z.lazy(() => saml_relay_statesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => saml_relay_statesWhereUniqueInputSchema),z.lazy(() => saml_relay_statesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => saml_relay_statesUpdateWithWhereUniqueWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesUpdateWithWhereUniqueWithoutSso_providersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => saml_relay_statesUpdateManyWithWhereWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesUpdateManyWithWhereWithoutSso_providersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => saml_relay_statesScalarWhereInputSchema),z.lazy(() => saml_relay_statesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const sso_domainsUncheckedUpdateManyWithoutSso_providersNestedInputSchema: z.ZodType<Prisma.sso_domainsUncheckedUpdateManyWithoutSso_providersNestedInput> = z.object({
  create: z.union([ z.lazy(() => sso_domainsCreateWithoutSso_providersInputSchema),z.lazy(() => sso_domainsCreateWithoutSso_providersInputSchema).array(),z.lazy(() => sso_domainsUncheckedCreateWithoutSso_providersInputSchema),z.lazy(() => sso_domainsUncheckedCreateWithoutSso_providersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => sso_domainsCreateOrConnectWithoutSso_providersInputSchema),z.lazy(() => sso_domainsCreateOrConnectWithoutSso_providersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => sso_domainsUpsertWithWhereUniqueWithoutSso_providersInputSchema),z.lazy(() => sso_domainsUpsertWithWhereUniqueWithoutSso_providersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => sso_domainsCreateManySso_providersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => sso_domainsWhereUniqueInputSchema),z.lazy(() => sso_domainsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => sso_domainsWhereUniqueInputSchema),z.lazy(() => sso_domainsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => sso_domainsWhereUniqueInputSchema),z.lazy(() => sso_domainsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => sso_domainsWhereUniqueInputSchema),z.lazy(() => sso_domainsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => sso_domainsUpdateWithWhereUniqueWithoutSso_providersInputSchema),z.lazy(() => sso_domainsUpdateWithWhereUniqueWithoutSso_providersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => sso_domainsUpdateManyWithWhereWithoutSso_providersInputSchema),z.lazy(() => sso_domainsUpdateManyWithWhereWithoutSso_providersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => sso_domainsScalarWhereInputSchema),z.lazy(() => sso_domainsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const identitiesCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.identitiesCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => identitiesCreateWithoutUsersInputSchema),z.lazy(() => identitiesCreateWithoutUsersInputSchema).array(),z.lazy(() => identitiesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => identitiesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => identitiesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => identitiesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => identitiesCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => identitiesWhereUniqueInputSchema),z.lazy(() => identitiesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const mfa_factorsCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.mfa_factorsCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => mfa_factorsCreateWithoutUsersInputSchema),z.lazy(() => mfa_factorsCreateWithoutUsersInputSchema).array(),z.lazy(() => mfa_factorsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => mfa_factorsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => mfa_factorsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => mfa_factorsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => mfa_factorsCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => mfa_factorsWhereUniqueInputSchema),z.lazy(() => mfa_factorsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const one_time_tokensCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.one_time_tokensCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => one_time_tokensCreateWithoutUsersInputSchema),z.lazy(() => one_time_tokensCreateWithoutUsersInputSchema).array(),z.lazy(() => one_time_tokensUncheckedCreateWithoutUsersInputSchema),z.lazy(() => one_time_tokensUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => one_time_tokensCreateOrConnectWithoutUsersInputSchema),z.lazy(() => one_time_tokensCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => one_time_tokensCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => one_time_tokensWhereUniqueInputSchema),z.lazy(() => one_time_tokensWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const sessionsCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.sessionsCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => sessionsCreateWithoutUsersInputSchema),z.lazy(() => sessionsCreateWithoutUsersInputSchema).array(),z.lazy(() => sessionsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => sessionsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => sessionsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => sessionsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => sessionsCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => sessionsWhereUniqueInputSchema),z.lazy(() => sessionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const categoriesCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.categoriesCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => categoriesCreateWithoutUsersInputSchema),z.lazy(() => categoriesCreateWithoutUsersInputSchema).array(),z.lazy(() => categoriesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => categoriesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => categoriesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => categoriesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => categoriesCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => categoriesWhereUniqueInputSchema),z.lazy(() => categoriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const controller_adminsCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.controller_adminsCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => controller_adminsCreateWithoutUsersInputSchema),z.lazy(() => controller_adminsUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => controller_adminsCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => controller_adminsWhereUniqueInputSchema).optional()
}).strict();

export const customersCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.customersCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => customersCreateWithoutUsersInputSchema),z.lazy(() => customersCreateWithoutUsersInputSchema).array(),z.lazy(() => customersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => customersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => customersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => customersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => customersCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => customersWhereUniqueInputSchema),z.lazy(() => customersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const domain_ownersCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.domain_ownersCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => domain_ownersCreateWithoutUsersInputSchema),z.lazy(() => domain_ownersCreateWithoutUsersInputSchema).array(),z.lazy(() => domain_ownersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => domain_ownersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => domain_ownersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => domain_ownersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => domain_ownersCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => domain_ownersWhereUniqueInputSchema),z.lazy(() => domain_ownersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ordersCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.ordersCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => ordersCreateWithoutUsersInputSchema),z.lazy(() => ordersCreateWithoutUsersInputSchema).array(),z.lazy(() => ordersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => ordersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ordersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => ordersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ordersCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const productsCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.productsCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => productsCreateWithoutUsersInputSchema),z.lazy(() => productsCreateWithoutUsersInputSchema).array(),z.lazy(() => productsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => productsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => productsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => productsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => productsCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const profilesCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.profilesCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => profilesCreateWithoutUsersInputSchema),z.lazy(() => profilesUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => profilesCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => profilesWhereUniqueInputSchema).optional()
}).strict();

export const store_settingsCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.store_settingsCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => store_settingsCreateWithoutUsersInputSchema),z.lazy(() => store_settingsUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => store_settingsCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => store_settingsWhereUniqueInputSchema).optional()
}).strict();

export const storesCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.storesCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => storesCreateWithoutUsersInputSchema),z.lazy(() => storesCreateWithoutUsersInputSchema).array(),z.lazy(() => storesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => storesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => storesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => storesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => storesCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => storesWhereUniqueInputSchema),z.lazy(() => storesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const identitiesUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.identitiesUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => identitiesCreateWithoutUsersInputSchema),z.lazy(() => identitiesCreateWithoutUsersInputSchema).array(),z.lazy(() => identitiesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => identitiesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => identitiesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => identitiesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => identitiesCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => identitiesWhereUniqueInputSchema),z.lazy(() => identitiesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const mfa_factorsUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.mfa_factorsUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => mfa_factorsCreateWithoutUsersInputSchema),z.lazy(() => mfa_factorsCreateWithoutUsersInputSchema).array(),z.lazy(() => mfa_factorsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => mfa_factorsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => mfa_factorsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => mfa_factorsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => mfa_factorsCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => mfa_factorsWhereUniqueInputSchema),z.lazy(() => mfa_factorsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const one_time_tokensUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.one_time_tokensUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => one_time_tokensCreateWithoutUsersInputSchema),z.lazy(() => one_time_tokensCreateWithoutUsersInputSchema).array(),z.lazy(() => one_time_tokensUncheckedCreateWithoutUsersInputSchema),z.lazy(() => one_time_tokensUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => one_time_tokensCreateOrConnectWithoutUsersInputSchema),z.lazy(() => one_time_tokensCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => one_time_tokensCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => one_time_tokensWhereUniqueInputSchema),z.lazy(() => one_time_tokensWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const sessionsUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.sessionsUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => sessionsCreateWithoutUsersInputSchema),z.lazy(() => sessionsCreateWithoutUsersInputSchema).array(),z.lazy(() => sessionsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => sessionsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => sessionsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => sessionsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => sessionsCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => sessionsWhereUniqueInputSchema),z.lazy(() => sessionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const categoriesUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.categoriesUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => categoriesCreateWithoutUsersInputSchema),z.lazy(() => categoriesCreateWithoutUsersInputSchema).array(),z.lazy(() => categoriesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => categoriesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => categoriesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => categoriesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => categoriesCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => categoriesWhereUniqueInputSchema),z.lazy(() => categoriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const controller_adminsUncheckedCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.controller_adminsUncheckedCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => controller_adminsCreateWithoutUsersInputSchema),z.lazy(() => controller_adminsUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => controller_adminsCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => controller_adminsWhereUniqueInputSchema).optional()
}).strict();

export const customersUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.customersUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => customersCreateWithoutUsersInputSchema),z.lazy(() => customersCreateWithoutUsersInputSchema).array(),z.lazy(() => customersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => customersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => customersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => customersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => customersCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => customersWhereUniqueInputSchema),z.lazy(() => customersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const domain_ownersUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.domain_ownersUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => domain_ownersCreateWithoutUsersInputSchema),z.lazy(() => domain_ownersCreateWithoutUsersInputSchema).array(),z.lazy(() => domain_ownersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => domain_ownersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => domain_ownersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => domain_ownersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => domain_ownersCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => domain_ownersWhereUniqueInputSchema),z.lazy(() => domain_ownersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ordersUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.ordersUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => ordersCreateWithoutUsersInputSchema),z.lazy(() => ordersCreateWithoutUsersInputSchema).array(),z.lazy(() => ordersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => ordersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ordersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => ordersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ordersCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const productsUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.productsUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => productsCreateWithoutUsersInputSchema),z.lazy(() => productsCreateWithoutUsersInputSchema).array(),z.lazy(() => productsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => productsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => productsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => productsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => productsCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const profilesUncheckedCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.profilesUncheckedCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => profilesCreateWithoutUsersInputSchema),z.lazy(() => profilesUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => profilesCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => profilesWhereUniqueInputSchema).optional()
}).strict();

export const store_settingsUncheckedCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.store_settingsUncheckedCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => store_settingsCreateWithoutUsersInputSchema),z.lazy(() => store_settingsUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => store_settingsCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => store_settingsWhereUniqueInputSchema).optional()
}).strict();

export const storesUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.storesUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => storesCreateWithoutUsersInputSchema),z.lazy(() => storesCreateWithoutUsersInputSchema).array(),z.lazy(() => storesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => storesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => storesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => storesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => storesCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => storesWhereUniqueInputSchema),z.lazy(() => storesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const identitiesUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.identitiesUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => identitiesCreateWithoutUsersInputSchema),z.lazy(() => identitiesCreateWithoutUsersInputSchema).array(),z.lazy(() => identitiesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => identitiesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => identitiesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => identitiesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => identitiesUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => identitiesUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => identitiesCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => identitiesWhereUniqueInputSchema),z.lazy(() => identitiesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => identitiesWhereUniqueInputSchema),z.lazy(() => identitiesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => identitiesWhereUniqueInputSchema),z.lazy(() => identitiesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => identitiesWhereUniqueInputSchema),z.lazy(() => identitiesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => identitiesUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => identitiesUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => identitiesUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => identitiesUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => identitiesScalarWhereInputSchema),z.lazy(() => identitiesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const mfa_factorsUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.mfa_factorsUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => mfa_factorsCreateWithoutUsersInputSchema),z.lazy(() => mfa_factorsCreateWithoutUsersInputSchema).array(),z.lazy(() => mfa_factorsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => mfa_factorsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => mfa_factorsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => mfa_factorsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => mfa_factorsUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => mfa_factorsUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => mfa_factorsCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => mfa_factorsWhereUniqueInputSchema),z.lazy(() => mfa_factorsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => mfa_factorsWhereUniqueInputSchema),z.lazy(() => mfa_factorsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => mfa_factorsWhereUniqueInputSchema),z.lazy(() => mfa_factorsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => mfa_factorsWhereUniqueInputSchema),z.lazy(() => mfa_factorsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => mfa_factorsUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => mfa_factorsUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => mfa_factorsUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => mfa_factorsUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => mfa_factorsScalarWhereInputSchema),z.lazy(() => mfa_factorsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const one_time_tokensUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.one_time_tokensUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => one_time_tokensCreateWithoutUsersInputSchema),z.lazy(() => one_time_tokensCreateWithoutUsersInputSchema).array(),z.lazy(() => one_time_tokensUncheckedCreateWithoutUsersInputSchema),z.lazy(() => one_time_tokensUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => one_time_tokensCreateOrConnectWithoutUsersInputSchema),z.lazy(() => one_time_tokensCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => one_time_tokensUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => one_time_tokensUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => one_time_tokensCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => one_time_tokensWhereUniqueInputSchema),z.lazy(() => one_time_tokensWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => one_time_tokensWhereUniqueInputSchema),z.lazy(() => one_time_tokensWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => one_time_tokensWhereUniqueInputSchema),z.lazy(() => one_time_tokensWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => one_time_tokensWhereUniqueInputSchema),z.lazy(() => one_time_tokensWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => one_time_tokensUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => one_time_tokensUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => one_time_tokensUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => one_time_tokensUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => one_time_tokensScalarWhereInputSchema),z.lazy(() => one_time_tokensScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const sessionsUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.sessionsUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => sessionsCreateWithoutUsersInputSchema),z.lazy(() => sessionsCreateWithoutUsersInputSchema).array(),z.lazy(() => sessionsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => sessionsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => sessionsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => sessionsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => sessionsUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => sessionsUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => sessionsCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => sessionsWhereUniqueInputSchema),z.lazy(() => sessionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => sessionsWhereUniqueInputSchema),z.lazy(() => sessionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => sessionsWhereUniqueInputSchema),z.lazy(() => sessionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => sessionsWhereUniqueInputSchema),z.lazy(() => sessionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => sessionsUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => sessionsUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => sessionsUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => sessionsUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => sessionsScalarWhereInputSchema),z.lazy(() => sessionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const categoriesUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.categoriesUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => categoriesCreateWithoutUsersInputSchema),z.lazy(() => categoriesCreateWithoutUsersInputSchema).array(),z.lazy(() => categoriesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => categoriesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => categoriesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => categoriesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => categoriesUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => categoriesUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => categoriesCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => categoriesWhereUniqueInputSchema),z.lazy(() => categoriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => categoriesWhereUniqueInputSchema),z.lazy(() => categoriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => categoriesWhereUniqueInputSchema),z.lazy(() => categoriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => categoriesWhereUniqueInputSchema),z.lazy(() => categoriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => categoriesUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => categoriesUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => categoriesUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => categoriesUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => categoriesScalarWhereInputSchema),z.lazy(() => categoriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const controller_adminsUpdateOneWithoutUsersNestedInputSchema: z.ZodType<Prisma.controller_adminsUpdateOneWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => controller_adminsCreateWithoutUsersInputSchema),z.lazy(() => controller_adminsUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => controller_adminsCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => controller_adminsUpsertWithoutUsersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => controller_adminsWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => controller_adminsWhereInputSchema) ]).optional(),
  connect: z.lazy(() => controller_adminsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => controller_adminsUpdateToOneWithWhereWithoutUsersInputSchema),z.lazy(() => controller_adminsUpdateWithoutUsersInputSchema),z.lazy(() => controller_adminsUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const customersUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.customersUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => customersCreateWithoutUsersInputSchema),z.lazy(() => customersCreateWithoutUsersInputSchema).array(),z.lazy(() => customersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => customersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => customersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => customersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => customersUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => customersUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => customersCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => customersWhereUniqueInputSchema),z.lazy(() => customersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => customersWhereUniqueInputSchema),z.lazy(() => customersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => customersWhereUniqueInputSchema),z.lazy(() => customersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => customersWhereUniqueInputSchema),z.lazy(() => customersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => customersUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => customersUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => customersUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => customersUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => customersScalarWhereInputSchema),z.lazy(() => customersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const domain_ownersUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.domain_ownersUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => domain_ownersCreateWithoutUsersInputSchema),z.lazy(() => domain_ownersCreateWithoutUsersInputSchema).array(),z.lazy(() => domain_ownersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => domain_ownersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => domain_ownersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => domain_ownersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => domain_ownersUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => domain_ownersUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => domain_ownersCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => domain_ownersWhereUniqueInputSchema),z.lazy(() => domain_ownersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => domain_ownersWhereUniqueInputSchema),z.lazy(() => domain_ownersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => domain_ownersWhereUniqueInputSchema),z.lazy(() => domain_ownersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => domain_ownersWhereUniqueInputSchema),z.lazy(() => domain_ownersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => domain_ownersUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => domain_ownersUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => domain_ownersUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => domain_ownersUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => domain_ownersScalarWhereInputSchema),z.lazy(() => domain_ownersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ordersUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.ordersUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => ordersCreateWithoutUsersInputSchema),z.lazy(() => ordersCreateWithoutUsersInputSchema).array(),z.lazy(() => ordersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => ordersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ordersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => ordersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ordersUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => ordersUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ordersCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ordersUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => ordersUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ordersUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => ordersUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ordersScalarWhereInputSchema),z.lazy(() => ordersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const productsUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.productsUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => productsCreateWithoutUsersInputSchema),z.lazy(() => productsCreateWithoutUsersInputSchema).array(),z.lazy(() => productsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => productsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => productsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => productsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => productsUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => productsUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => productsCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => productsUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => productsUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => productsUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => productsUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => productsScalarWhereInputSchema),z.lazy(() => productsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const profilesUpdateOneWithoutUsersNestedInputSchema: z.ZodType<Prisma.profilesUpdateOneWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => profilesCreateWithoutUsersInputSchema),z.lazy(() => profilesUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => profilesCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => profilesUpsertWithoutUsersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => profilesWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => profilesWhereInputSchema) ]).optional(),
  connect: z.lazy(() => profilesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => profilesUpdateToOneWithWhereWithoutUsersInputSchema),z.lazy(() => profilesUpdateWithoutUsersInputSchema),z.lazy(() => profilesUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const store_settingsUpdateOneWithoutUsersNestedInputSchema: z.ZodType<Prisma.store_settingsUpdateOneWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => store_settingsCreateWithoutUsersInputSchema),z.lazy(() => store_settingsUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => store_settingsCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => store_settingsUpsertWithoutUsersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => store_settingsWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => store_settingsWhereInputSchema) ]).optional(),
  connect: z.lazy(() => store_settingsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => store_settingsUpdateToOneWithWhereWithoutUsersInputSchema),z.lazy(() => store_settingsUpdateWithoutUsersInputSchema),z.lazy(() => store_settingsUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const storesUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.storesUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => storesCreateWithoutUsersInputSchema),z.lazy(() => storesCreateWithoutUsersInputSchema).array(),z.lazy(() => storesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => storesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => storesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => storesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => storesUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => storesUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => storesCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => storesWhereUniqueInputSchema),z.lazy(() => storesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => storesWhereUniqueInputSchema),z.lazy(() => storesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => storesWhereUniqueInputSchema),z.lazy(() => storesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => storesWhereUniqueInputSchema),z.lazy(() => storesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => storesUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => storesUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => storesUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => storesUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => storesScalarWhereInputSchema),z.lazy(() => storesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const identitiesUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.identitiesUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => identitiesCreateWithoutUsersInputSchema),z.lazy(() => identitiesCreateWithoutUsersInputSchema).array(),z.lazy(() => identitiesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => identitiesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => identitiesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => identitiesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => identitiesUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => identitiesUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => identitiesCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => identitiesWhereUniqueInputSchema),z.lazy(() => identitiesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => identitiesWhereUniqueInputSchema),z.lazy(() => identitiesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => identitiesWhereUniqueInputSchema),z.lazy(() => identitiesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => identitiesWhereUniqueInputSchema),z.lazy(() => identitiesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => identitiesUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => identitiesUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => identitiesUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => identitiesUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => identitiesScalarWhereInputSchema),z.lazy(() => identitiesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const mfa_factorsUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.mfa_factorsUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => mfa_factorsCreateWithoutUsersInputSchema),z.lazy(() => mfa_factorsCreateWithoutUsersInputSchema).array(),z.lazy(() => mfa_factorsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => mfa_factorsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => mfa_factorsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => mfa_factorsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => mfa_factorsUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => mfa_factorsUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => mfa_factorsCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => mfa_factorsWhereUniqueInputSchema),z.lazy(() => mfa_factorsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => mfa_factorsWhereUniqueInputSchema),z.lazy(() => mfa_factorsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => mfa_factorsWhereUniqueInputSchema),z.lazy(() => mfa_factorsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => mfa_factorsWhereUniqueInputSchema),z.lazy(() => mfa_factorsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => mfa_factorsUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => mfa_factorsUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => mfa_factorsUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => mfa_factorsUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => mfa_factorsScalarWhereInputSchema),z.lazy(() => mfa_factorsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const one_time_tokensUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.one_time_tokensUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => one_time_tokensCreateWithoutUsersInputSchema),z.lazy(() => one_time_tokensCreateWithoutUsersInputSchema).array(),z.lazy(() => one_time_tokensUncheckedCreateWithoutUsersInputSchema),z.lazy(() => one_time_tokensUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => one_time_tokensCreateOrConnectWithoutUsersInputSchema),z.lazy(() => one_time_tokensCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => one_time_tokensUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => one_time_tokensUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => one_time_tokensCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => one_time_tokensWhereUniqueInputSchema),z.lazy(() => one_time_tokensWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => one_time_tokensWhereUniqueInputSchema),z.lazy(() => one_time_tokensWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => one_time_tokensWhereUniqueInputSchema),z.lazy(() => one_time_tokensWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => one_time_tokensWhereUniqueInputSchema),z.lazy(() => one_time_tokensWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => one_time_tokensUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => one_time_tokensUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => one_time_tokensUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => one_time_tokensUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => one_time_tokensScalarWhereInputSchema),z.lazy(() => one_time_tokensScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const sessionsUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.sessionsUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => sessionsCreateWithoutUsersInputSchema),z.lazy(() => sessionsCreateWithoutUsersInputSchema).array(),z.lazy(() => sessionsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => sessionsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => sessionsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => sessionsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => sessionsUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => sessionsUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => sessionsCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => sessionsWhereUniqueInputSchema),z.lazy(() => sessionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => sessionsWhereUniqueInputSchema),z.lazy(() => sessionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => sessionsWhereUniqueInputSchema),z.lazy(() => sessionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => sessionsWhereUniqueInputSchema),z.lazy(() => sessionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => sessionsUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => sessionsUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => sessionsUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => sessionsUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => sessionsScalarWhereInputSchema),z.lazy(() => sessionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const categoriesUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.categoriesUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => categoriesCreateWithoutUsersInputSchema),z.lazy(() => categoriesCreateWithoutUsersInputSchema).array(),z.lazy(() => categoriesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => categoriesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => categoriesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => categoriesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => categoriesUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => categoriesUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => categoriesCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => categoriesWhereUniqueInputSchema),z.lazy(() => categoriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => categoriesWhereUniqueInputSchema),z.lazy(() => categoriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => categoriesWhereUniqueInputSchema),z.lazy(() => categoriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => categoriesWhereUniqueInputSchema),z.lazy(() => categoriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => categoriesUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => categoriesUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => categoriesUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => categoriesUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => categoriesScalarWhereInputSchema),z.lazy(() => categoriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const controller_adminsUncheckedUpdateOneWithoutUsersNestedInputSchema: z.ZodType<Prisma.controller_adminsUncheckedUpdateOneWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => controller_adminsCreateWithoutUsersInputSchema),z.lazy(() => controller_adminsUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => controller_adminsCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => controller_adminsUpsertWithoutUsersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => controller_adminsWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => controller_adminsWhereInputSchema) ]).optional(),
  connect: z.lazy(() => controller_adminsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => controller_adminsUpdateToOneWithWhereWithoutUsersInputSchema),z.lazy(() => controller_adminsUpdateWithoutUsersInputSchema),z.lazy(() => controller_adminsUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const customersUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.customersUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => customersCreateWithoutUsersInputSchema),z.lazy(() => customersCreateWithoutUsersInputSchema).array(),z.lazy(() => customersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => customersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => customersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => customersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => customersUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => customersUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => customersCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => customersWhereUniqueInputSchema),z.lazy(() => customersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => customersWhereUniqueInputSchema),z.lazy(() => customersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => customersWhereUniqueInputSchema),z.lazy(() => customersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => customersWhereUniqueInputSchema),z.lazy(() => customersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => customersUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => customersUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => customersUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => customersUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => customersScalarWhereInputSchema),z.lazy(() => customersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const domain_ownersUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.domain_ownersUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => domain_ownersCreateWithoutUsersInputSchema),z.lazy(() => domain_ownersCreateWithoutUsersInputSchema).array(),z.lazy(() => domain_ownersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => domain_ownersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => domain_ownersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => domain_ownersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => domain_ownersUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => domain_ownersUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => domain_ownersCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => domain_ownersWhereUniqueInputSchema),z.lazy(() => domain_ownersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => domain_ownersWhereUniqueInputSchema),z.lazy(() => domain_ownersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => domain_ownersWhereUniqueInputSchema),z.lazy(() => domain_ownersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => domain_ownersWhereUniqueInputSchema),z.lazy(() => domain_ownersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => domain_ownersUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => domain_ownersUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => domain_ownersUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => domain_ownersUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => domain_ownersScalarWhereInputSchema),z.lazy(() => domain_ownersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ordersUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.ordersUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => ordersCreateWithoutUsersInputSchema),z.lazy(() => ordersCreateWithoutUsersInputSchema).array(),z.lazy(() => ordersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => ordersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ordersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => ordersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ordersUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => ordersUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ordersCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ordersUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => ordersUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ordersUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => ordersUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ordersScalarWhereInputSchema),z.lazy(() => ordersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const productsUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.productsUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => productsCreateWithoutUsersInputSchema),z.lazy(() => productsCreateWithoutUsersInputSchema).array(),z.lazy(() => productsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => productsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => productsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => productsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => productsUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => productsUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => productsCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => productsUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => productsUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => productsUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => productsUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => productsScalarWhereInputSchema),z.lazy(() => productsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const profilesUncheckedUpdateOneWithoutUsersNestedInputSchema: z.ZodType<Prisma.profilesUncheckedUpdateOneWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => profilesCreateWithoutUsersInputSchema),z.lazy(() => profilesUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => profilesCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => profilesUpsertWithoutUsersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => profilesWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => profilesWhereInputSchema) ]).optional(),
  connect: z.lazy(() => profilesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => profilesUpdateToOneWithWhereWithoutUsersInputSchema),z.lazy(() => profilesUpdateWithoutUsersInputSchema),z.lazy(() => profilesUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const store_settingsUncheckedUpdateOneWithoutUsersNestedInputSchema: z.ZodType<Prisma.store_settingsUncheckedUpdateOneWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => store_settingsCreateWithoutUsersInputSchema),z.lazy(() => store_settingsUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => store_settingsCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => store_settingsUpsertWithoutUsersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => store_settingsWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => store_settingsWhereInputSchema) ]).optional(),
  connect: z.lazy(() => store_settingsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => store_settingsUpdateToOneWithWhereWithoutUsersInputSchema),z.lazy(() => store_settingsUpdateWithoutUsersInputSchema),z.lazy(() => store_settingsUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const storesUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.storesUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => storesCreateWithoutUsersInputSchema),z.lazy(() => storesCreateWithoutUsersInputSchema).array(),z.lazy(() => storesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => storesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => storesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => storesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => storesUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => storesUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => storesCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => storesWhereUniqueInputSchema),z.lazy(() => storesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => storesWhereUniqueInputSchema),z.lazy(() => storesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => storesWhereUniqueInputSchema),z.lazy(() => storesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => storesWhereUniqueInputSchema),z.lazy(() => storesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => storesUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => storesUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => storesUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => storesUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => storesScalarWhereInputSchema),z.lazy(() => storesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DecimalFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DecimalFieldUpdateOperationsInput> = z.object({
  set: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  increment: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  decrement: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  multiply: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  divide: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional()
}).strict();

export const storesCreateNestedOneWithoutCategoriesInputSchema: z.ZodType<Prisma.storesCreateNestedOneWithoutCategoriesInput> = z.object({
  create: z.union([ z.lazy(() => storesCreateWithoutCategoriesInputSchema),z.lazy(() => storesUncheckedCreateWithoutCategoriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => storesCreateOrConnectWithoutCategoriesInputSchema).optional(),
  connect: z.lazy(() => storesWhereUniqueInputSchema).optional()
}).strict();

export const usersCreateNestedOneWithoutCategoriesInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutCategoriesInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutCategoriesInputSchema),z.lazy(() => usersUncheckedCreateWithoutCategoriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutCategoriesInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const productsCreateNestedManyWithoutCategoriesInputSchema: z.ZodType<Prisma.productsCreateNestedManyWithoutCategoriesInput> = z.object({
  create: z.union([ z.lazy(() => productsCreateWithoutCategoriesInputSchema),z.lazy(() => productsCreateWithoutCategoriesInputSchema).array(),z.lazy(() => productsUncheckedCreateWithoutCategoriesInputSchema),z.lazy(() => productsUncheckedCreateWithoutCategoriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => productsCreateOrConnectWithoutCategoriesInputSchema),z.lazy(() => productsCreateOrConnectWithoutCategoriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => productsCreateManyCategoriesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const productsUncheckedCreateNestedManyWithoutCategoriesInputSchema: z.ZodType<Prisma.productsUncheckedCreateNestedManyWithoutCategoriesInput> = z.object({
  create: z.union([ z.lazy(() => productsCreateWithoutCategoriesInputSchema),z.lazy(() => productsCreateWithoutCategoriesInputSchema).array(),z.lazy(() => productsUncheckedCreateWithoutCategoriesInputSchema),z.lazy(() => productsUncheckedCreateWithoutCategoriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => productsCreateOrConnectWithoutCategoriesInputSchema),z.lazy(() => productsCreateOrConnectWithoutCategoriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => productsCreateManyCategoriesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const storesUpdateOneWithoutCategoriesNestedInputSchema: z.ZodType<Prisma.storesUpdateOneWithoutCategoriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => storesCreateWithoutCategoriesInputSchema),z.lazy(() => storesUncheckedCreateWithoutCategoriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => storesCreateOrConnectWithoutCategoriesInputSchema).optional(),
  upsert: z.lazy(() => storesUpsertWithoutCategoriesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => storesWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => storesWhereInputSchema) ]).optional(),
  connect: z.lazy(() => storesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => storesUpdateToOneWithWhereWithoutCategoriesInputSchema),z.lazy(() => storesUpdateWithoutCategoriesInputSchema),z.lazy(() => storesUncheckedUpdateWithoutCategoriesInputSchema) ]).optional(),
}).strict();

export const usersUpdateOneRequiredWithoutCategoriesNestedInputSchema: z.ZodType<Prisma.usersUpdateOneRequiredWithoutCategoriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutCategoriesInputSchema),z.lazy(() => usersUncheckedCreateWithoutCategoriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutCategoriesInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutCategoriesInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutCategoriesInputSchema),z.lazy(() => usersUpdateWithoutCategoriesInputSchema),z.lazy(() => usersUncheckedUpdateWithoutCategoriesInputSchema) ]).optional(),
}).strict();

export const productsUpdateManyWithoutCategoriesNestedInputSchema: z.ZodType<Prisma.productsUpdateManyWithoutCategoriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => productsCreateWithoutCategoriesInputSchema),z.lazy(() => productsCreateWithoutCategoriesInputSchema).array(),z.lazy(() => productsUncheckedCreateWithoutCategoriesInputSchema),z.lazy(() => productsUncheckedCreateWithoutCategoriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => productsCreateOrConnectWithoutCategoriesInputSchema),z.lazy(() => productsCreateOrConnectWithoutCategoriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => productsUpsertWithWhereUniqueWithoutCategoriesInputSchema),z.lazy(() => productsUpsertWithWhereUniqueWithoutCategoriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => productsCreateManyCategoriesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => productsUpdateWithWhereUniqueWithoutCategoriesInputSchema),z.lazy(() => productsUpdateWithWhereUniqueWithoutCategoriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => productsUpdateManyWithWhereWithoutCategoriesInputSchema),z.lazy(() => productsUpdateManyWithWhereWithoutCategoriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => productsScalarWhereInputSchema),z.lazy(() => productsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const productsUncheckedUpdateManyWithoutCategoriesNestedInputSchema: z.ZodType<Prisma.productsUncheckedUpdateManyWithoutCategoriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => productsCreateWithoutCategoriesInputSchema),z.lazy(() => productsCreateWithoutCategoriesInputSchema).array(),z.lazy(() => productsUncheckedCreateWithoutCategoriesInputSchema),z.lazy(() => productsUncheckedCreateWithoutCategoriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => productsCreateOrConnectWithoutCategoriesInputSchema),z.lazy(() => productsCreateOrConnectWithoutCategoriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => productsUpsertWithWhereUniqueWithoutCategoriesInputSchema),z.lazy(() => productsUpsertWithWhereUniqueWithoutCategoriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => productsCreateManyCategoriesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => productsUpdateWithWhereUniqueWithoutCategoriesInputSchema),z.lazy(() => productsUpdateWithWhereUniqueWithoutCategoriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => productsUpdateManyWithWhereWithoutCategoriesInputSchema),z.lazy(() => productsUpdateManyWithWhereWithoutCategoriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => productsScalarWhereInputSchema),z.lazy(() => productsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const usersCreateNestedOneWithoutController_adminsInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutController_adminsInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutController_adminsInputSchema),z.lazy(() => usersUncheckedCreateWithoutController_adminsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutController_adminsInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const usersUpdateOneRequiredWithoutController_adminsNestedInputSchema: z.ZodType<Prisma.usersUpdateOneRequiredWithoutController_adminsNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutController_adminsInputSchema),z.lazy(() => usersUncheckedCreateWithoutController_adminsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutController_adminsInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutController_adminsInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutController_adminsInputSchema),z.lazy(() => usersUpdateWithoutController_adminsInputSchema),z.lazy(() => usersUncheckedUpdateWithoutController_adminsInputSchema) ]).optional(),
}).strict();

export const credit_transactionsCreateNestedManyWithoutCredit_accountsInputSchema: z.ZodType<Prisma.credit_transactionsCreateNestedManyWithoutCredit_accountsInput> = z.object({
  create: z.union([ z.lazy(() => credit_transactionsCreateWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsCreateWithoutCredit_accountsInputSchema).array(),z.lazy(() => credit_transactionsUncheckedCreateWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsUncheckedCreateWithoutCredit_accountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => credit_transactionsCreateOrConnectWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsCreateOrConnectWithoutCredit_accountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => credit_transactionsCreateManyCredit_accountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => credit_transactionsWhereUniqueInputSchema),z.lazy(() => credit_transactionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const credit_transactionsUncheckedCreateNestedManyWithoutCredit_accountsInputSchema: z.ZodType<Prisma.credit_transactionsUncheckedCreateNestedManyWithoutCredit_accountsInput> = z.object({
  create: z.union([ z.lazy(() => credit_transactionsCreateWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsCreateWithoutCredit_accountsInputSchema).array(),z.lazy(() => credit_transactionsUncheckedCreateWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsUncheckedCreateWithoutCredit_accountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => credit_transactionsCreateOrConnectWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsCreateOrConnectWithoutCredit_accountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => credit_transactionsCreateManyCredit_accountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => credit_transactionsWhereUniqueInputSchema),z.lazy(() => credit_transactionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const credit_transactionsUpdateManyWithoutCredit_accountsNestedInputSchema: z.ZodType<Prisma.credit_transactionsUpdateManyWithoutCredit_accountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => credit_transactionsCreateWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsCreateWithoutCredit_accountsInputSchema).array(),z.lazy(() => credit_transactionsUncheckedCreateWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsUncheckedCreateWithoutCredit_accountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => credit_transactionsCreateOrConnectWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsCreateOrConnectWithoutCredit_accountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => credit_transactionsUpsertWithWhereUniqueWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsUpsertWithWhereUniqueWithoutCredit_accountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => credit_transactionsCreateManyCredit_accountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => credit_transactionsWhereUniqueInputSchema),z.lazy(() => credit_transactionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => credit_transactionsWhereUniqueInputSchema),z.lazy(() => credit_transactionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => credit_transactionsWhereUniqueInputSchema),z.lazy(() => credit_transactionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => credit_transactionsWhereUniqueInputSchema),z.lazy(() => credit_transactionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => credit_transactionsUpdateWithWhereUniqueWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsUpdateWithWhereUniqueWithoutCredit_accountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => credit_transactionsUpdateManyWithWhereWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsUpdateManyWithWhereWithoutCredit_accountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => credit_transactionsScalarWhereInputSchema),z.lazy(() => credit_transactionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const credit_transactionsUncheckedUpdateManyWithoutCredit_accountsNestedInputSchema: z.ZodType<Prisma.credit_transactionsUncheckedUpdateManyWithoutCredit_accountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => credit_transactionsCreateWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsCreateWithoutCredit_accountsInputSchema).array(),z.lazy(() => credit_transactionsUncheckedCreateWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsUncheckedCreateWithoutCredit_accountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => credit_transactionsCreateOrConnectWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsCreateOrConnectWithoutCredit_accountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => credit_transactionsUpsertWithWhereUniqueWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsUpsertWithWhereUniqueWithoutCredit_accountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => credit_transactionsCreateManyCredit_accountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => credit_transactionsWhereUniqueInputSchema),z.lazy(() => credit_transactionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => credit_transactionsWhereUniqueInputSchema),z.lazy(() => credit_transactionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => credit_transactionsWhereUniqueInputSchema),z.lazy(() => credit_transactionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => credit_transactionsWhereUniqueInputSchema),z.lazy(() => credit_transactionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => credit_transactionsUpdateWithWhereUniqueWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsUpdateWithWhereUniqueWithoutCredit_accountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => credit_transactionsUpdateManyWithWhereWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsUpdateManyWithWhereWithoutCredit_accountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => credit_transactionsScalarWhereInputSchema),z.lazy(() => credit_transactionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const credit_accountsCreateNestedOneWithoutCredit_transactionsInputSchema: z.ZodType<Prisma.credit_accountsCreateNestedOneWithoutCredit_transactionsInput> = z.object({
  create: z.union([ z.lazy(() => credit_accountsCreateWithoutCredit_transactionsInputSchema),z.lazy(() => credit_accountsUncheckedCreateWithoutCredit_transactionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => credit_accountsCreateOrConnectWithoutCredit_transactionsInputSchema).optional(),
  connect: z.lazy(() => credit_accountsWhereUniqueInputSchema).optional()
}).strict();

export const credit_accountsUpdateOneRequiredWithoutCredit_transactionsNestedInputSchema: z.ZodType<Prisma.credit_accountsUpdateOneRequiredWithoutCredit_transactionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => credit_accountsCreateWithoutCredit_transactionsInputSchema),z.lazy(() => credit_accountsUncheckedCreateWithoutCredit_transactionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => credit_accountsCreateOrConnectWithoutCredit_transactionsInputSchema).optional(),
  upsert: z.lazy(() => credit_accountsUpsertWithoutCredit_transactionsInputSchema).optional(),
  connect: z.lazy(() => credit_accountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => credit_accountsUpdateToOneWithWhereWithoutCredit_transactionsInputSchema),z.lazy(() => credit_accountsUpdateWithoutCredit_transactionsInputSchema),z.lazy(() => credit_accountsUncheckedUpdateWithoutCredit_transactionsInputSchema) ]).optional(),
}).strict();

export const storesCreateNestedOneWithoutCustomersInputSchema: z.ZodType<Prisma.storesCreateNestedOneWithoutCustomersInput> = z.object({
  create: z.union([ z.lazy(() => storesCreateWithoutCustomersInputSchema),z.lazy(() => storesUncheckedCreateWithoutCustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => storesCreateOrConnectWithoutCustomersInputSchema).optional(),
  connect: z.lazy(() => storesWhereUniqueInputSchema).optional()
}).strict();

export const usersCreateNestedOneWithoutCustomersInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutCustomersInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutCustomersInputSchema),z.lazy(() => usersUncheckedCreateWithoutCustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutCustomersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const ordersCreateNestedManyWithoutCustomersInputSchema: z.ZodType<Prisma.ordersCreateNestedManyWithoutCustomersInput> = z.object({
  create: z.union([ z.lazy(() => ordersCreateWithoutCustomersInputSchema),z.lazy(() => ordersCreateWithoutCustomersInputSchema).array(),z.lazy(() => ordersUncheckedCreateWithoutCustomersInputSchema),z.lazy(() => ordersUncheckedCreateWithoutCustomersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ordersCreateOrConnectWithoutCustomersInputSchema),z.lazy(() => ordersCreateOrConnectWithoutCustomersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ordersCreateManyCustomersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ordersUncheckedCreateNestedManyWithoutCustomersInputSchema: z.ZodType<Prisma.ordersUncheckedCreateNestedManyWithoutCustomersInput> = z.object({
  create: z.union([ z.lazy(() => ordersCreateWithoutCustomersInputSchema),z.lazy(() => ordersCreateWithoutCustomersInputSchema).array(),z.lazy(() => ordersUncheckedCreateWithoutCustomersInputSchema),z.lazy(() => ordersUncheckedCreateWithoutCustomersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ordersCreateOrConnectWithoutCustomersInputSchema),z.lazy(() => ordersCreateOrConnectWithoutCustomersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ordersCreateManyCustomersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const storesUpdateOneWithoutCustomersNestedInputSchema: z.ZodType<Prisma.storesUpdateOneWithoutCustomersNestedInput> = z.object({
  create: z.union([ z.lazy(() => storesCreateWithoutCustomersInputSchema),z.lazy(() => storesUncheckedCreateWithoutCustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => storesCreateOrConnectWithoutCustomersInputSchema).optional(),
  upsert: z.lazy(() => storesUpsertWithoutCustomersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => storesWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => storesWhereInputSchema) ]).optional(),
  connect: z.lazy(() => storesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => storesUpdateToOneWithWhereWithoutCustomersInputSchema),z.lazy(() => storesUpdateWithoutCustomersInputSchema),z.lazy(() => storesUncheckedUpdateWithoutCustomersInputSchema) ]).optional(),
}).strict();

export const usersUpdateOneRequiredWithoutCustomersNestedInputSchema: z.ZodType<Prisma.usersUpdateOneRequiredWithoutCustomersNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutCustomersInputSchema),z.lazy(() => usersUncheckedCreateWithoutCustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutCustomersInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutCustomersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutCustomersInputSchema),z.lazy(() => usersUpdateWithoutCustomersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutCustomersInputSchema) ]).optional(),
}).strict();

export const ordersUpdateManyWithoutCustomersNestedInputSchema: z.ZodType<Prisma.ordersUpdateManyWithoutCustomersNestedInput> = z.object({
  create: z.union([ z.lazy(() => ordersCreateWithoutCustomersInputSchema),z.lazy(() => ordersCreateWithoutCustomersInputSchema).array(),z.lazy(() => ordersUncheckedCreateWithoutCustomersInputSchema),z.lazy(() => ordersUncheckedCreateWithoutCustomersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ordersCreateOrConnectWithoutCustomersInputSchema),z.lazy(() => ordersCreateOrConnectWithoutCustomersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ordersUpsertWithWhereUniqueWithoutCustomersInputSchema),z.lazy(() => ordersUpsertWithWhereUniqueWithoutCustomersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ordersCreateManyCustomersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ordersUpdateWithWhereUniqueWithoutCustomersInputSchema),z.lazy(() => ordersUpdateWithWhereUniqueWithoutCustomersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ordersUpdateManyWithWhereWithoutCustomersInputSchema),z.lazy(() => ordersUpdateManyWithWhereWithoutCustomersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ordersScalarWhereInputSchema),z.lazy(() => ordersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ordersUncheckedUpdateManyWithoutCustomersNestedInputSchema: z.ZodType<Prisma.ordersUncheckedUpdateManyWithoutCustomersNestedInput> = z.object({
  create: z.union([ z.lazy(() => ordersCreateWithoutCustomersInputSchema),z.lazy(() => ordersCreateWithoutCustomersInputSchema).array(),z.lazy(() => ordersUncheckedCreateWithoutCustomersInputSchema),z.lazy(() => ordersUncheckedCreateWithoutCustomersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ordersCreateOrConnectWithoutCustomersInputSchema),z.lazy(() => ordersCreateOrConnectWithoutCustomersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ordersUpsertWithWhereUniqueWithoutCustomersInputSchema),z.lazy(() => ordersUpsertWithWhereUniqueWithoutCustomersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ordersCreateManyCustomersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ordersUpdateWithWhereUniqueWithoutCustomersInputSchema),z.lazy(() => ordersUpdateWithWhereUniqueWithoutCustomersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ordersUpdateManyWithWhereWithoutCustomersInputSchema),z.lazy(() => ordersUpdateManyWithWhereWithoutCustomersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ordersScalarWhereInputSchema),z.lazy(() => ordersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const usersCreateNestedOneWithoutDomain_ownersInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutDomain_ownersInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutDomain_ownersInputSchema),z.lazy(() => usersUncheckedCreateWithoutDomain_ownersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutDomain_ownersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const usersUpdateOneRequiredWithoutDomain_ownersNestedInputSchema: z.ZodType<Prisma.usersUpdateOneRequiredWithoutDomain_ownersNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutDomain_ownersInputSchema),z.lazy(() => usersUncheckedCreateWithoutDomain_ownersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutDomain_ownersInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutDomain_ownersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutDomain_ownersInputSchema),z.lazy(() => usersUpdateWithoutDomain_ownersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutDomain_ownersInputSchema) ]).optional(),
}).strict();

export const ordersCreateNestedOneWithoutOrder_itemsInputSchema: z.ZodType<Prisma.ordersCreateNestedOneWithoutOrder_itemsInput> = z.object({
  create: z.union([ z.lazy(() => ordersCreateWithoutOrder_itemsInputSchema),z.lazy(() => ordersUncheckedCreateWithoutOrder_itemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ordersCreateOrConnectWithoutOrder_itemsInputSchema).optional(),
  connect: z.lazy(() => ordersWhereUniqueInputSchema).optional()
}).strict();

export const productsCreateNestedOneWithoutOrder_itemsInputSchema: z.ZodType<Prisma.productsCreateNestedOneWithoutOrder_itemsInput> = z.object({
  create: z.union([ z.lazy(() => productsCreateWithoutOrder_itemsInputSchema),z.lazy(() => productsUncheckedCreateWithoutOrder_itemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => productsCreateOrConnectWithoutOrder_itemsInputSchema).optional(),
  connect: z.lazy(() => productsWhereUniqueInputSchema).optional()
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const ordersUpdateOneRequiredWithoutOrder_itemsNestedInputSchema: z.ZodType<Prisma.ordersUpdateOneRequiredWithoutOrder_itemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ordersCreateWithoutOrder_itemsInputSchema),z.lazy(() => ordersUncheckedCreateWithoutOrder_itemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ordersCreateOrConnectWithoutOrder_itemsInputSchema).optional(),
  upsert: z.lazy(() => ordersUpsertWithoutOrder_itemsInputSchema).optional(),
  connect: z.lazy(() => ordersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ordersUpdateToOneWithWhereWithoutOrder_itemsInputSchema),z.lazy(() => ordersUpdateWithoutOrder_itemsInputSchema),z.lazy(() => ordersUncheckedUpdateWithoutOrder_itemsInputSchema) ]).optional(),
}).strict();

export const productsUpdateOneRequiredWithoutOrder_itemsNestedInputSchema: z.ZodType<Prisma.productsUpdateOneRequiredWithoutOrder_itemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => productsCreateWithoutOrder_itemsInputSchema),z.lazy(() => productsUncheckedCreateWithoutOrder_itemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => productsCreateOrConnectWithoutOrder_itemsInputSchema).optional(),
  upsert: z.lazy(() => productsUpsertWithoutOrder_itemsInputSchema).optional(),
  connect: z.lazy(() => productsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => productsUpdateToOneWithWhereWithoutOrder_itemsInputSchema),z.lazy(() => productsUpdateWithoutOrder_itemsInputSchema),z.lazy(() => productsUncheckedUpdateWithoutOrder_itemsInputSchema) ]).optional(),
}).strict();

export const order_itemsCreateNestedManyWithoutOrdersInputSchema: z.ZodType<Prisma.order_itemsCreateNestedManyWithoutOrdersInput> = z.object({
  create: z.union([ z.lazy(() => order_itemsCreateWithoutOrdersInputSchema),z.lazy(() => order_itemsCreateWithoutOrdersInputSchema).array(),z.lazy(() => order_itemsUncheckedCreateWithoutOrdersInputSchema),z.lazy(() => order_itemsUncheckedCreateWithoutOrdersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => order_itemsCreateOrConnectWithoutOrdersInputSchema),z.lazy(() => order_itemsCreateOrConnectWithoutOrdersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => order_itemsCreateManyOrdersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => order_itemsWhereUniqueInputSchema),z.lazy(() => order_itemsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const customersCreateNestedOneWithoutOrdersInputSchema: z.ZodType<Prisma.customersCreateNestedOneWithoutOrdersInput> = z.object({
  create: z.union([ z.lazy(() => customersCreateWithoutOrdersInputSchema),z.lazy(() => customersUncheckedCreateWithoutOrdersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => customersCreateOrConnectWithoutOrdersInputSchema).optional(),
  connect: z.lazy(() => customersWhereUniqueInputSchema).optional()
}).strict();

export const storesCreateNestedOneWithoutOrdersInputSchema: z.ZodType<Prisma.storesCreateNestedOneWithoutOrdersInput> = z.object({
  create: z.union([ z.lazy(() => storesCreateWithoutOrdersInputSchema),z.lazy(() => storesUncheckedCreateWithoutOrdersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => storesCreateOrConnectWithoutOrdersInputSchema).optional(),
  connect: z.lazy(() => storesWhereUniqueInputSchema).optional()
}).strict();

export const usersCreateNestedOneWithoutOrdersInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutOrdersInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutOrdersInputSchema),z.lazy(() => usersUncheckedCreateWithoutOrdersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutOrdersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const order_itemsUncheckedCreateNestedManyWithoutOrdersInputSchema: z.ZodType<Prisma.order_itemsUncheckedCreateNestedManyWithoutOrdersInput> = z.object({
  create: z.union([ z.lazy(() => order_itemsCreateWithoutOrdersInputSchema),z.lazy(() => order_itemsCreateWithoutOrdersInputSchema).array(),z.lazy(() => order_itemsUncheckedCreateWithoutOrdersInputSchema),z.lazy(() => order_itemsUncheckedCreateWithoutOrdersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => order_itemsCreateOrConnectWithoutOrdersInputSchema),z.lazy(() => order_itemsCreateOrConnectWithoutOrdersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => order_itemsCreateManyOrdersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => order_itemsWhereUniqueInputSchema),z.lazy(() => order_itemsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const order_itemsUpdateManyWithoutOrdersNestedInputSchema: z.ZodType<Prisma.order_itemsUpdateManyWithoutOrdersNestedInput> = z.object({
  create: z.union([ z.lazy(() => order_itemsCreateWithoutOrdersInputSchema),z.lazy(() => order_itemsCreateWithoutOrdersInputSchema).array(),z.lazy(() => order_itemsUncheckedCreateWithoutOrdersInputSchema),z.lazy(() => order_itemsUncheckedCreateWithoutOrdersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => order_itemsCreateOrConnectWithoutOrdersInputSchema),z.lazy(() => order_itemsCreateOrConnectWithoutOrdersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => order_itemsUpsertWithWhereUniqueWithoutOrdersInputSchema),z.lazy(() => order_itemsUpsertWithWhereUniqueWithoutOrdersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => order_itemsCreateManyOrdersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => order_itemsWhereUniqueInputSchema),z.lazy(() => order_itemsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => order_itemsWhereUniqueInputSchema),z.lazy(() => order_itemsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => order_itemsWhereUniqueInputSchema),z.lazy(() => order_itemsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => order_itemsWhereUniqueInputSchema),z.lazy(() => order_itemsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => order_itemsUpdateWithWhereUniqueWithoutOrdersInputSchema),z.lazy(() => order_itemsUpdateWithWhereUniqueWithoutOrdersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => order_itemsUpdateManyWithWhereWithoutOrdersInputSchema),z.lazy(() => order_itemsUpdateManyWithWhereWithoutOrdersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => order_itemsScalarWhereInputSchema),z.lazy(() => order_itemsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const customersUpdateOneWithoutOrdersNestedInputSchema: z.ZodType<Prisma.customersUpdateOneWithoutOrdersNestedInput> = z.object({
  create: z.union([ z.lazy(() => customersCreateWithoutOrdersInputSchema),z.lazy(() => customersUncheckedCreateWithoutOrdersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => customersCreateOrConnectWithoutOrdersInputSchema).optional(),
  upsert: z.lazy(() => customersUpsertWithoutOrdersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => customersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => customersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => customersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => customersUpdateToOneWithWhereWithoutOrdersInputSchema),z.lazy(() => customersUpdateWithoutOrdersInputSchema),z.lazy(() => customersUncheckedUpdateWithoutOrdersInputSchema) ]).optional(),
}).strict();

export const storesUpdateOneWithoutOrdersNestedInputSchema: z.ZodType<Prisma.storesUpdateOneWithoutOrdersNestedInput> = z.object({
  create: z.union([ z.lazy(() => storesCreateWithoutOrdersInputSchema),z.lazy(() => storesUncheckedCreateWithoutOrdersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => storesCreateOrConnectWithoutOrdersInputSchema).optional(),
  upsert: z.lazy(() => storesUpsertWithoutOrdersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => storesWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => storesWhereInputSchema) ]).optional(),
  connect: z.lazy(() => storesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => storesUpdateToOneWithWhereWithoutOrdersInputSchema),z.lazy(() => storesUpdateWithoutOrdersInputSchema),z.lazy(() => storesUncheckedUpdateWithoutOrdersInputSchema) ]).optional(),
}).strict();

export const usersUpdateOneRequiredWithoutOrdersNestedInputSchema: z.ZodType<Prisma.usersUpdateOneRequiredWithoutOrdersNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutOrdersInputSchema),z.lazy(() => usersUncheckedCreateWithoutOrdersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutOrdersInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutOrdersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutOrdersInputSchema),z.lazy(() => usersUpdateWithoutOrdersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutOrdersInputSchema) ]).optional(),
}).strict();

export const order_itemsUncheckedUpdateManyWithoutOrdersNestedInputSchema: z.ZodType<Prisma.order_itemsUncheckedUpdateManyWithoutOrdersNestedInput> = z.object({
  create: z.union([ z.lazy(() => order_itemsCreateWithoutOrdersInputSchema),z.lazy(() => order_itemsCreateWithoutOrdersInputSchema).array(),z.lazy(() => order_itemsUncheckedCreateWithoutOrdersInputSchema),z.lazy(() => order_itemsUncheckedCreateWithoutOrdersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => order_itemsCreateOrConnectWithoutOrdersInputSchema),z.lazy(() => order_itemsCreateOrConnectWithoutOrdersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => order_itemsUpsertWithWhereUniqueWithoutOrdersInputSchema),z.lazy(() => order_itemsUpsertWithWhereUniqueWithoutOrdersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => order_itemsCreateManyOrdersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => order_itemsWhereUniqueInputSchema),z.lazy(() => order_itemsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => order_itemsWhereUniqueInputSchema),z.lazy(() => order_itemsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => order_itemsWhereUniqueInputSchema),z.lazy(() => order_itemsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => order_itemsWhereUniqueInputSchema),z.lazy(() => order_itemsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => order_itemsUpdateWithWhereUniqueWithoutOrdersInputSchema),z.lazy(() => order_itemsUpdateWithWhereUniqueWithoutOrdersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => order_itemsUpdateManyWithWhereWithoutOrdersInputSchema),z.lazy(() => order_itemsUpdateManyWithWhereWithoutOrdersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => order_itemsScalarWhereInputSchema),z.lazy(() => order_itemsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const productsCreateimagesInputSchema: z.ZodType<Prisma.productsCreateimagesInput> = z.object({
  set: z.string().array()
}).strict();

export const order_itemsCreateNestedManyWithoutProductsInputSchema: z.ZodType<Prisma.order_itemsCreateNestedManyWithoutProductsInput> = z.object({
  create: z.union([ z.lazy(() => order_itemsCreateWithoutProductsInputSchema),z.lazy(() => order_itemsCreateWithoutProductsInputSchema).array(),z.lazy(() => order_itemsUncheckedCreateWithoutProductsInputSchema),z.lazy(() => order_itemsUncheckedCreateWithoutProductsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => order_itemsCreateOrConnectWithoutProductsInputSchema),z.lazy(() => order_itemsCreateOrConnectWithoutProductsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => order_itemsCreateManyProductsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => order_itemsWhereUniqueInputSchema),z.lazy(() => order_itemsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const categoriesCreateNestedOneWithoutProductsInputSchema: z.ZodType<Prisma.categoriesCreateNestedOneWithoutProductsInput> = z.object({
  create: z.union([ z.lazy(() => categoriesCreateWithoutProductsInputSchema),z.lazy(() => categoriesUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => categoriesCreateOrConnectWithoutProductsInputSchema).optional(),
  connect: z.lazy(() => categoriesWhereUniqueInputSchema).optional()
}).strict();

export const storesCreateNestedOneWithoutProductsInputSchema: z.ZodType<Prisma.storesCreateNestedOneWithoutProductsInput> = z.object({
  create: z.union([ z.lazy(() => storesCreateWithoutProductsInputSchema),z.lazy(() => storesUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => storesCreateOrConnectWithoutProductsInputSchema).optional(),
  connect: z.lazy(() => storesWhereUniqueInputSchema).optional()
}).strict();

export const usersCreateNestedOneWithoutProductsInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutProductsInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutProductsInputSchema),z.lazy(() => usersUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutProductsInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const order_itemsUncheckedCreateNestedManyWithoutProductsInputSchema: z.ZodType<Prisma.order_itemsUncheckedCreateNestedManyWithoutProductsInput> = z.object({
  create: z.union([ z.lazy(() => order_itemsCreateWithoutProductsInputSchema),z.lazy(() => order_itemsCreateWithoutProductsInputSchema).array(),z.lazy(() => order_itemsUncheckedCreateWithoutProductsInputSchema),z.lazy(() => order_itemsUncheckedCreateWithoutProductsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => order_itemsCreateOrConnectWithoutProductsInputSchema),z.lazy(() => order_itemsCreateOrConnectWithoutProductsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => order_itemsCreateManyProductsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => order_itemsWhereUniqueInputSchema),z.lazy(() => order_itemsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const productsUpdateimagesInputSchema: z.ZodType<Prisma.productsUpdateimagesInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const order_itemsUpdateManyWithoutProductsNestedInputSchema: z.ZodType<Prisma.order_itemsUpdateManyWithoutProductsNestedInput> = z.object({
  create: z.union([ z.lazy(() => order_itemsCreateWithoutProductsInputSchema),z.lazy(() => order_itemsCreateWithoutProductsInputSchema).array(),z.lazy(() => order_itemsUncheckedCreateWithoutProductsInputSchema),z.lazy(() => order_itemsUncheckedCreateWithoutProductsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => order_itemsCreateOrConnectWithoutProductsInputSchema),z.lazy(() => order_itemsCreateOrConnectWithoutProductsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => order_itemsUpsertWithWhereUniqueWithoutProductsInputSchema),z.lazy(() => order_itemsUpsertWithWhereUniqueWithoutProductsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => order_itemsCreateManyProductsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => order_itemsWhereUniqueInputSchema),z.lazy(() => order_itemsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => order_itemsWhereUniqueInputSchema),z.lazy(() => order_itemsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => order_itemsWhereUniqueInputSchema),z.lazy(() => order_itemsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => order_itemsWhereUniqueInputSchema),z.lazy(() => order_itemsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => order_itemsUpdateWithWhereUniqueWithoutProductsInputSchema),z.lazy(() => order_itemsUpdateWithWhereUniqueWithoutProductsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => order_itemsUpdateManyWithWhereWithoutProductsInputSchema),z.lazy(() => order_itemsUpdateManyWithWhereWithoutProductsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => order_itemsScalarWhereInputSchema),z.lazy(() => order_itemsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const categoriesUpdateOneWithoutProductsNestedInputSchema: z.ZodType<Prisma.categoriesUpdateOneWithoutProductsNestedInput> = z.object({
  create: z.union([ z.lazy(() => categoriesCreateWithoutProductsInputSchema),z.lazy(() => categoriesUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => categoriesCreateOrConnectWithoutProductsInputSchema).optional(),
  upsert: z.lazy(() => categoriesUpsertWithoutProductsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => categoriesWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => categoriesWhereInputSchema) ]).optional(),
  connect: z.lazy(() => categoriesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => categoriesUpdateToOneWithWhereWithoutProductsInputSchema),z.lazy(() => categoriesUpdateWithoutProductsInputSchema),z.lazy(() => categoriesUncheckedUpdateWithoutProductsInputSchema) ]).optional(),
}).strict();

export const storesUpdateOneWithoutProductsNestedInputSchema: z.ZodType<Prisma.storesUpdateOneWithoutProductsNestedInput> = z.object({
  create: z.union([ z.lazy(() => storesCreateWithoutProductsInputSchema),z.lazy(() => storesUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => storesCreateOrConnectWithoutProductsInputSchema).optional(),
  upsert: z.lazy(() => storesUpsertWithoutProductsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => storesWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => storesWhereInputSchema) ]).optional(),
  connect: z.lazy(() => storesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => storesUpdateToOneWithWhereWithoutProductsInputSchema),z.lazy(() => storesUpdateWithoutProductsInputSchema),z.lazy(() => storesUncheckedUpdateWithoutProductsInputSchema) ]).optional(),
}).strict();

export const usersUpdateOneRequiredWithoutProductsNestedInputSchema: z.ZodType<Prisma.usersUpdateOneRequiredWithoutProductsNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutProductsInputSchema),z.lazy(() => usersUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutProductsInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutProductsInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutProductsInputSchema),z.lazy(() => usersUpdateWithoutProductsInputSchema),z.lazy(() => usersUncheckedUpdateWithoutProductsInputSchema) ]).optional(),
}).strict();

export const order_itemsUncheckedUpdateManyWithoutProductsNestedInputSchema: z.ZodType<Prisma.order_itemsUncheckedUpdateManyWithoutProductsNestedInput> = z.object({
  create: z.union([ z.lazy(() => order_itemsCreateWithoutProductsInputSchema),z.lazy(() => order_itemsCreateWithoutProductsInputSchema).array(),z.lazy(() => order_itemsUncheckedCreateWithoutProductsInputSchema),z.lazy(() => order_itemsUncheckedCreateWithoutProductsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => order_itemsCreateOrConnectWithoutProductsInputSchema),z.lazy(() => order_itemsCreateOrConnectWithoutProductsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => order_itemsUpsertWithWhereUniqueWithoutProductsInputSchema),z.lazy(() => order_itemsUpsertWithWhereUniqueWithoutProductsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => order_itemsCreateManyProductsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => order_itemsWhereUniqueInputSchema),z.lazy(() => order_itemsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => order_itemsWhereUniqueInputSchema),z.lazy(() => order_itemsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => order_itemsWhereUniqueInputSchema),z.lazy(() => order_itemsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => order_itemsWhereUniqueInputSchema),z.lazy(() => order_itemsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => order_itemsUpdateWithWhereUniqueWithoutProductsInputSchema),z.lazy(() => order_itemsUpdateWithWhereUniqueWithoutProductsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => order_itemsUpdateManyWithWhereWithoutProductsInputSchema),z.lazy(() => order_itemsUpdateManyWithWhereWithoutProductsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => order_itemsScalarWhereInputSchema),z.lazy(() => order_itemsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const usersCreateNestedOneWithoutProfilesInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutProfilesInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutProfilesInputSchema),z.lazy(() => usersUncheckedCreateWithoutProfilesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutProfilesInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const usersUpdateOneRequiredWithoutProfilesNestedInputSchema: z.ZodType<Prisma.usersUpdateOneRequiredWithoutProfilesNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutProfilesInputSchema),z.lazy(() => usersUncheckedCreateWithoutProfilesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutProfilesInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutProfilesInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutProfilesInputSchema),z.lazy(() => usersUpdateWithoutProfilesInputSchema),z.lazy(() => usersUncheckedUpdateWithoutProfilesInputSchema) ]).optional(),
}).strict();

export const storesCreateNestedOneWithoutSalesInputSchema: z.ZodType<Prisma.storesCreateNestedOneWithoutSalesInput> = z.object({
  create: z.union([ z.lazy(() => storesCreateWithoutSalesInputSchema),z.lazy(() => storesUncheckedCreateWithoutSalesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => storesCreateOrConnectWithoutSalesInputSchema).optional(),
  connect: z.lazy(() => storesWhereUniqueInputSchema).optional()
}).strict();

export const storesUpdateOneWithoutSalesNestedInputSchema: z.ZodType<Prisma.storesUpdateOneWithoutSalesNestedInput> = z.object({
  create: z.union([ z.lazy(() => storesCreateWithoutSalesInputSchema),z.lazy(() => storesUncheckedCreateWithoutSalesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => storesCreateOrConnectWithoutSalesInputSchema).optional(),
  upsert: z.lazy(() => storesUpsertWithoutSalesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => storesWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => storesWhereInputSchema) ]).optional(),
  connect: z.lazy(() => storesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => storesUpdateToOneWithWhereWithoutSalesInputSchema),z.lazy(() => storesUpdateWithoutSalesInputSchema),z.lazy(() => storesUncheckedUpdateWithoutSalesInputSchema) ]).optional(),
}).strict();

export const usersCreateNestedOneWithoutStore_settingsInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutStore_settingsInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutStore_settingsInputSchema),z.lazy(() => usersUncheckedCreateWithoutStore_settingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutStore_settingsInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const usersUpdateOneRequiredWithoutStore_settingsNestedInputSchema: z.ZodType<Prisma.usersUpdateOneRequiredWithoutStore_settingsNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutStore_settingsInputSchema),z.lazy(() => usersUncheckedCreateWithoutStore_settingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutStore_settingsInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutStore_settingsInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutStore_settingsInputSchema),z.lazy(() => usersUpdateWithoutStore_settingsInputSchema),z.lazy(() => usersUncheckedUpdateWithoutStore_settingsInputSchema) ]).optional(),
}).strict();

export const categoriesCreateNestedManyWithoutStoresInputSchema: z.ZodType<Prisma.categoriesCreateNestedManyWithoutStoresInput> = z.object({
  create: z.union([ z.lazy(() => categoriesCreateWithoutStoresInputSchema),z.lazy(() => categoriesCreateWithoutStoresInputSchema).array(),z.lazy(() => categoriesUncheckedCreateWithoutStoresInputSchema),z.lazy(() => categoriesUncheckedCreateWithoutStoresInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => categoriesCreateOrConnectWithoutStoresInputSchema),z.lazy(() => categoriesCreateOrConnectWithoutStoresInputSchema).array() ]).optional(),
  createMany: z.lazy(() => categoriesCreateManyStoresInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => categoriesWhereUniqueInputSchema),z.lazy(() => categoriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const customersCreateNestedManyWithoutStoresInputSchema: z.ZodType<Prisma.customersCreateNestedManyWithoutStoresInput> = z.object({
  create: z.union([ z.lazy(() => customersCreateWithoutStoresInputSchema),z.lazy(() => customersCreateWithoutStoresInputSchema).array(),z.lazy(() => customersUncheckedCreateWithoutStoresInputSchema),z.lazy(() => customersUncheckedCreateWithoutStoresInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => customersCreateOrConnectWithoutStoresInputSchema),z.lazy(() => customersCreateOrConnectWithoutStoresInputSchema).array() ]).optional(),
  createMany: z.lazy(() => customersCreateManyStoresInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => customersWhereUniqueInputSchema),z.lazy(() => customersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ordersCreateNestedManyWithoutStoresInputSchema: z.ZodType<Prisma.ordersCreateNestedManyWithoutStoresInput> = z.object({
  create: z.union([ z.lazy(() => ordersCreateWithoutStoresInputSchema),z.lazy(() => ordersCreateWithoutStoresInputSchema).array(),z.lazy(() => ordersUncheckedCreateWithoutStoresInputSchema),z.lazy(() => ordersUncheckedCreateWithoutStoresInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ordersCreateOrConnectWithoutStoresInputSchema),z.lazy(() => ordersCreateOrConnectWithoutStoresInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ordersCreateManyStoresInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const productsCreateNestedManyWithoutStoresInputSchema: z.ZodType<Prisma.productsCreateNestedManyWithoutStoresInput> = z.object({
  create: z.union([ z.lazy(() => productsCreateWithoutStoresInputSchema),z.lazy(() => productsCreateWithoutStoresInputSchema).array(),z.lazy(() => productsUncheckedCreateWithoutStoresInputSchema),z.lazy(() => productsUncheckedCreateWithoutStoresInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => productsCreateOrConnectWithoutStoresInputSchema),z.lazy(() => productsCreateOrConnectWithoutStoresInputSchema).array() ]).optional(),
  createMany: z.lazy(() => productsCreateManyStoresInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const salesCreateNestedManyWithoutStoresInputSchema: z.ZodType<Prisma.salesCreateNestedManyWithoutStoresInput> = z.object({
  create: z.union([ z.lazy(() => salesCreateWithoutStoresInputSchema),z.lazy(() => salesCreateWithoutStoresInputSchema).array(),z.lazy(() => salesUncheckedCreateWithoutStoresInputSchema),z.lazy(() => salesUncheckedCreateWithoutStoresInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => salesCreateOrConnectWithoutStoresInputSchema),z.lazy(() => salesCreateOrConnectWithoutStoresInputSchema).array() ]).optional(),
  createMany: z.lazy(() => salesCreateManyStoresInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => salesWhereUniqueInputSchema),z.lazy(() => salesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const usersCreateNestedOneWithoutStoresInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutStoresInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutStoresInputSchema),z.lazy(() => usersUncheckedCreateWithoutStoresInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutStoresInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const categoriesUncheckedCreateNestedManyWithoutStoresInputSchema: z.ZodType<Prisma.categoriesUncheckedCreateNestedManyWithoutStoresInput> = z.object({
  create: z.union([ z.lazy(() => categoriesCreateWithoutStoresInputSchema),z.lazy(() => categoriesCreateWithoutStoresInputSchema).array(),z.lazy(() => categoriesUncheckedCreateWithoutStoresInputSchema),z.lazy(() => categoriesUncheckedCreateWithoutStoresInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => categoriesCreateOrConnectWithoutStoresInputSchema),z.lazy(() => categoriesCreateOrConnectWithoutStoresInputSchema).array() ]).optional(),
  createMany: z.lazy(() => categoriesCreateManyStoresInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => categoriesWhereUniqueInputSchema),z.lazy(() => categoriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const customersUncheckedCreateNestedManyWithoutStoresInputSchema: z.ZodType<Prisma.customersUncheckedCreateNestedManyWithoutStoresInput> = z.object({
  create: z.union([ z.lazy(() => customersCreateWithoutStoresInputSchema),z.lazy(() => customersCreateWithoutStoresInputSchema).array(),z.lazy(() => customersUncheckedCreateWithoutStoresInputSchema),z.lazy(() => customersUncheckedCreateWithoutStoresInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => customersCreateOrConnectWithoutStoresInputSchema),z.lazy(() => customersCreateOrConnectWithoutStoresInputSchema).array() ]).optional(),
  createMany: z.lazy(() => customersCreateManyStoresInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => customersWhereUniqueInputSchema),z.lazy(() => customersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ordersUncheckedCreateNestedManyWithoutStoresInputSchema: z.ZodType<Prisma.ordersUncheckedCreateNestedManyWithoutStoresInput> = z.object({
  create: z.union([ z.lazy(() => ordersCreateWithoutStoresInputSchema),z.lazy(() => ordersCreateWithoutStoresInputSchema).array(),z.lazy(() => ordersUncheckedCreateWithoutStoresInputSchema),z.lazy(() => ordersUncheckedCreateWithoutStoresInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ordersCreateOrConnectWithoutStoresInputSchema),z.lazy(() => ordersCreateOrConnectWithoutStoresInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ordersCreateManyStoresInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const productsUncheckedCreateNestedManyWithoutStoresInputSchema: z.ZodType<Prisma.productsUncheckedCreateNestedManyWithoutStoresInput> = z.object({
  create: z.union([ z.lazy(() => productsCreateWithoutStoresInputSchema),z.lazy(() => productsCreateWithoutStoresInputSchema).array(),z.lazy(() => productsUncheckedCreateWithoutStoresInputSchema),z.lazy(() => productsUncheckedCreateWithoutStoresInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => productsCreateOrConnectWithoutStoresInputSchema),z.lazy(() => productsCreateOrConnectWithoutStoresInputSchema).array() ]).optional(),
  createMany: z.lazy(() => productsCreateManyStoresInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const salesUncheckedCreateNestedManyWithoutStoresInputSchema: z.ZodType<Prisma.salesUncheckedCreateNestedManyWithoutStoresInput> = z.object({
  create: z.union([ z.lazy(() => salesCreateWithoutStoresInputSchema),z.lazy(() => salesCreateWithoutStoresInputSchema).array(),z.lazy(() => salesUncheckedCreateWithoutStoresInputSchema),z.lazy(() => salesUncheckedCreateWithoutStoresInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => salesCreateOrConnectWithoutStoresInputSchema),z.lazy(() => salesCreateOrConnectWithoutStoresInputSchema).array() ]).optional(),
  createMany: z.lazy(() => salesCreateManyStoresInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => salesWhereUniqueInputSchema),z.lazy(() => salesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const categoriesUpdateManyWithoutStoresNestedInputSchema: z.ZodType<Prisma.categoriesUpdateManyWithoutStoresNestedInput> = z.object({
  create: z.union([ z.lazy(() => categoriesCreateWithoutStoresInputSchema),z.lazy(() => categoriesCreateWithoutStoresInputSchema).array(),z.lazy(() => categoriesUncheckedCreateWithoutStoresInputSchema),z.lazy(() => categoriesUncheckedCreateWithoutStoresInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => categoriesCreateOrConnectWithoutStoresInputSchema),z.lazy(() => categoriesCreateOrConnectWithoutStoresInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => categoriesUpsertWithWhereUniqueWithoutStoresInputSchema),z.lazy(() => categoriesUpsertWithWhereUniqueWithoutStoresInputSchema).array() ]).optional(),
  createMany: z.lazy(() => categoriesCreateManyStoresInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => categoriesWhereUniqueInputSchema),z.lazy(() => categoriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => categoriesWhereUniqueInputSchema),z.lazy(() => categoriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => categoriesWhereUniqueInputSchema),z.lazy(() => categoriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => categoriesWhereUniqueInputSchema),z.lazy(() => categoriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => categoriesUpdateWithWhereUniqueWithoutStoresInputSchema),z.lazy(() => categoriesUpdateWithWhereUniqueWithoutStoresInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => categoriesUpdateManyWithWhereWithoutStoresInputSchema),z.lazy(() => categoriesUpdateManyWithWhereWithoutStoresInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => categoriesScalarWhereInputSchema),z.lazy(() => categoriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const customersUpdateManyWithoutStoresNestedInputSchema: z.ZodType<Prisma.customersUpdateManyWithoutStoresNestedInput> = z.object({
  create: z.union([ z.lazy(() => customersCreateWithoutStoresInputSchema),z.lazy(() => customersCreateWithoutStoresInputSchema).array(),z.lazy(() => customersUncheckedCreateWithoutStoresInputSchema),z.lazy(() => customersUncheckedCreateWithoutStoresInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => customersCreateOrConnectWithoutStoresInputSchema),z.lazy(() => customersCreateOrConnectWithoutStoresInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => customersUpsertWithWhereUniqueWithoutStoresInputSchema),z.lazy(() => customersUpsertWithWhereUniqueWithoutStoresInputSchema).array() ]).optional(),
  createMany: z.lazy(() => customersCreateManyStoresInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => customersWhereUniqueInputSchema),z.lazy(() => customersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => customersWhereUniqueInputSchema),z.lazy(() => customersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => customersWhereUniqueInputSchema),z.lazy(() => customersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => customersWhereUniqueInputSchema),z.lazy(() => customersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => customersUpdateWithWhereUniqueWithoutStoresInputSchema),z.lazy(() => customersUpdateWithWhereUniqueWithoutStoresInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => customersUpdateManyWithWhereWithoutStoresInputSchema),z.lazy(() => customersUpdateManyWithWhereWithoutStoresInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => customersScalarWhereInputSchema),z.lazy(() => customersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ordersUpdateManyWithoutStoresNestedInputSchema: z.ZodType<Prisma.ordersUpdateManyWithoutStoresNestedInput> = z.object({
  create: z.union([ z.lazy(() => ordersCreateWithoutStoresInputSchema),z.lazy(() => ordersCreateWithoutStoresInputSchema).array(),z.lazy(() => ordersUncheckedCreateWithoutStoresInputSchema),z.lazy(() => ordersUncheckedCreateWithoutStoresInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ordersCreateOrConnectWithoutStoresInputSchema),z.lazy(() => ordersCreateOrConnectWithoutStoresInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ordersUpsertWithWhereUniqueWithoutStoresInputSchema),z.lazy(() => ordersUpsertWithWhereUniqueWithoutStoresInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ordersCreateManyStoresInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ordersUpdateWithWhereUniqueWithoutStoresInputSchema),z.lazy(() => ordersUpdateWithWhereUniqueWithoutStoresInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ordersUpdateManyWithWhereWithoutStoresInputSchema),z.lazy(() => ordersUpdateManyWithWhereWithoutStoresInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ordersScalarWhereInputSchema),z.lazy(() => ordersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const productsUpdateManyWithoutStoresNestedInputSchema: z.ZodType<Prisma.productsUpdateManyWithoutStoresNestedInput> = z.object({
  create: z.union([ z.lazy(() => productsCreateWithoutStoresInputSchema),z.lazy(() => productsCreateWithoutStoresInputSchema).array(),z.lazy(() => productsUncheckedCreateWithoutStoresInputSchema),z.lazy(() => productsUncheckedCreateWithoutStoresInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => productsCreateOrConnectWithoutStoresInputSchema),z.lazy(() => productsCreateOrConnectWithoutStoresInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => productsUpsertWithWhereUniqueWithoutStoresInputSchema),z.lazy(() => productsUpsertWithWhereUniqueWithoutStoresInputSchema).array() ]).optional(),
  createMany: z.lazy(() => productsCreateManyStoresInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => productsUpdateWithWhereUniqueWithoutStoresInputSchema),z.lazy(() => productsUpdateWithWhereUniqueWithoutStoresInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => productsUpdateManyWithWhereWithoutStoresInputSchema),z.lazy(() => productsUpdateManyWithWhereWithoutStoresInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => productsScalarWhereInputSchema),z.lazy(() => productsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const salesUpdateManyWithoutStoresNestedInputSchema: z.ZodType<Prisma.salesUpdateManyWithoutStoresNestedInput> = z.object({
  create: z.union([ z.lazy(() => salesCreateWithoutStoresInputSchema),z.lazy(() => salesCreateWithoutStoresInputSchema).array(),z.lazy(() => salesUncheckedCreateWithoutStoresInputSchema),z.lazy(() => salesUncheckedCreateWithoutStoresInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => salesCreateOrConnectWithoutStoresInputSchema),z.lazy(() => salesCreateOrConnectWithoutStoresInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => salesUpsertWithWhereUniqueWithoutStoresInputSchema),z.lazy(() => salesUpsertWithWhereUniqueWithoutStoresInputSchema).array() ]).optional(),
  createMany: z.lazy(() => salesCreateManyStoresInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => salesWhereUniqueInputSchema),z.lazy(() => salesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => salesWhereUniqueInputSchema),z.lazy(() => salesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => salesWhereUniqueInputSchema),z.lazy(() => salesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => salesWhereUniqueInputSchema),z.lazy(() => salesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => salesUpdateWithWhereUniqueWithoutStoresInputSchema),z.lazy(() => salesUpdateWithWhereUniqueWithoutStoresInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => salesUpdateManyWithWhereWithoutStoresInputSchema),z.lazy(() => salesUpdateManyWithWhereWithoutStoresInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => salesScalarWhereInputSchema),z.lazy(() => salesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const usersUpdateOneRequiredWithoutStoresNestedInputSchema: z.ZodType<Prisma.usersUpdateOneRequiredWithoutStoresNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutStoresInputSchema),z.lazy(() => usersUncheckedCreateWithoutStoresInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutStoresInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutStoresInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutStoresInputSchema),z.lazy(() => usersUpdateWithoutStoresInputSchema),z.lazy(() => usersUncheckedUpdateWithoutStoresInputSchema) ]).optional(),
}).strict();

export const categoriesUncheckedUpdateManyWithoutStoresNestedInputSchema: z.ZodType<Prisma.categoriesUncheckedUpdateManyWithoutStoresNestedInput> = z.object({
  create: z.union([ z.lazy(() => categoriesCreateWithoutStoresInputSchema),z.lazy(() => categoriesCreateWithoutStoresInputSchema).array(),z.lazy(() => categoriesUncheckedCreateWithoutStoresInputSchema),z.lazy(() => categoriesUncheckedCreateWithoutStoresInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => categoriesCreateOrConnectWithoutStoresInputSchema),z.lazy(() => categoriesCreateOrConnectWithoutStoresInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => categoriesUpsertWithWhereUniqueWithoutStoresInputSchema),z.lazy(() => categoriesUpsertWithWhereUniqueWithoutStoresInputSchema).array() ]).optional(),
  createMany: z.lazy(() => categoriesCreateManyStoresInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => categoriesWhereUniqueInputSchema),z.lazy(() => categoriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => categoriesWhereUniqueInputSchema),z.lazy(() => categoriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => categoriesWhereUniqueInputSchema),z.lazy(() => categoriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => categoriesWhereUniqueInputSchema),z.lazy(() => categoriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => categoriesUpdateWithWhereUniqueWithoutStoresInputSchema),z.lazy(() => categoriesUpdateWithWhereUniqueWithoutStoresInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => categoriesUpdateManyWithWhereWithoutStoresInputSchema),z.lazy(() => categoriesUpdateManyWithWhereWithoutStoresInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => categoriesScalarWhereInputSchema),z.lazy(() => categoriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const customersUncheckedUpdateManyWithoutStoresNestedInputSchema: z.ZodType<Prisma.customersUncheckedUpdateManyWithoutStoresNestedInput> = z.object({
  create: z.union([ z.lazy(() => customersCreateWithoutStoresInputSchema),z.lazy(() => customersCreateWithoutStoresInputSchema).array(),z.lazy(() => customersUncheckedCreateWithoutStoresInputSchema),z.lazy(() => customersUncheckedCreateWithoutStoresInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => customersCreateOrConnectWithoutStoresInputSchema),z.lazy(() => customersCreateOrConnectWithoutStoresInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => customersUpsertWithWhereUniqueWithoutStoresInputSchema),z.lazy(() => customersUpsertWithWhereUniqueWithoutStoresInputSchema).array() ]).optional(),
  createMany: z.lazy(() => customersCreateManyStoresInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => customersWhereUniqueInputSchema),z.lazy(() => customersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => customersWhereUniqueInputSchema),z.lazy(() => customersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => customersWhereUniqueInputSchema),z.lazy(() => customersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => customersWhereUniqueInputSchema),z.lazy(() => customersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => customersUpdateWithWhereUniqueWithoutStoresInputSchema),z.lazy(() => customersUpdateWithWhereUniqueWithoutStoresInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => customersUpdateManyWithWhereWithoutStoresInputSchema),z.lazy(() => customersUpdateManyWithWhereWithoutStoresInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => customersScalarWhereInputSchema),z.lazy(() => customersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ordersUncheckedUpdateManyWithoutStoresNestedInputSchema: z.ZodType<Prisma.ordersUncheckedUpdateManyWithoutStoresNestedInput> = z.object({
  create: z.union([ z.lazy(() => ordersCreateWithoutStoresInputSchema),z.lazy(() => ordersCreateWithoutStoresInputSchema).array(),z.lazy(() => ordersUncheckedCreateWithoutStoresInputSchema),z.lazy(() => ordersUncheckedCreateWithoutStoresInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ordersCreateOrConnectWithoutStoresInputSchema),z.lazy(() => ordersCreateOrConnectWithoutStoresInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ordersUpsertWithWhereUniqueWithoutStoresInputSchema),z.lazy(() => ordersUpsertWithWhereUniqueWithoutStoresInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ordersCreateManyStoresInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ordersWhereUniqueInputSchema),z.lazy(() => ordersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ordersUpdateWithWhereUniqueWithoutStoresInputSchema),z.lazy(() => ordersUpdateWithWhereUniqueWithoutStoresInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ordersUpdateManyWithWhereWithoutStoresInputSchema),z.lazy(() => ordersUpdateManyWithWhereWithoutStoresInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ordersScalarWhereInputSchema),z.lazy(() => ordersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const productsUncheckedUpdateManyWithoutStoresNestedInputSchema: z.ZodType<Prisma.productsUncheckedUpdateManyWithoutStoresNestedInput> = z.object({
  create: z.union([ z.lazy(() => productsCreateWithoutStoresInputSchema),z.lazy(() => productsCreateWithoutStoresInputSchema).array(),z.lazy(() => productsUncheckedCreateWithoutStoresInputSchema),z.lazy(() => productsUncheckedCreateWithoutStoresInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => productsCreateOrConnectWithoutStoresInputSchema),z.lazy(() => productsCreateOrConnectWithoutStoresInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => productsUpsertWithWhereUniqueWithoutStoresInputSchema),z.lazy(() => productsUpsertWithWhereUniqueWithoutStoresInputSchema).array() ]).optional(),
  createMany: z.lazy(() => productsCreateManyStoresInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => productsWhereUniqueInputSchema),z.lazy(() => productsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => productsUpdateWithWhereUniqueWithoutStoresInputSchema),z.lazy(() => productsUpdateWithWhereUniqueWithoutStoresInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => productsUpdateManyWithWhereWithoutStoresInputSchema),z.lazy(() => productsUpdateManyWithWhereWithoutStoresInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => productsScalarWhereInputSchema),z.lazy(() => productsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const salesUncheckedUpdateManyWithoutStoresNestedInputSchema: z.ZodType<Prisma.salesUncheckedUpdateManyWithoutStoresNestedInput> = z.object({
  create: z.union([ z.lazy(() => salesCreateWithoutStoresInputSchema),z.lazy(() => salesCreateWithoutStoresInputSchema).array(),z.lazy(() => salesUncheckedCreateWithoutStoresInputSchema),z.lazy(() => salesUncheckedCreateWithoutStoresInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => salesCreateOrConnectWithoutStoresInputSchema),z.lazy(() => salesCreateOrConnectWithoutStoresInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => salesUpsertWithWhereUniqueWithoutStoresInputSchema),z.lazy(() => salesUpsertWithWhereUniqueWithoutStoresInputSchema).array() ]).optional(),
  createMany: z.lazy(() => salesCreateManyStoresInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => salesWhereUniqueInputSchema),z.lazy(() => salesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => salesWhereUniqueInputSchema),z.lazy(() => salesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => salesWhereUniqueInputSchema),z.lazy(() => salesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => salesWhereUniqueInputSchema),z.lazy(() => salesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => salesUpdateWithWhereUniqueWithoutStoresInputSchema),z.lazy(() => salesUpdateWithWhereUniqueWithoutStoresInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => salesUpdateManyWithWhereWithoutStoresInputSchema),z.lazy(() => salesUpdateManyWithWhereWithoutStoresInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => salesScalarWhereInputSchema),z.lazy(() => salesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DomainCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.DomainCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => DomainCreateWithoutUserInputSchema),z.lazy(() => DomainCreateWithoutUserInputSchema).array(),z.lazy(() => DomainUncheckedCreateWithoutUserInputSchema),z.lazy(() => DomainUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DomainCreateOrConnectWithoutUserInputSchema),z.lazy(() => DomainCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DomainCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DomainWhereUniqueInputSchema),z.lazy(() => DomainWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DomainUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.DomainUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => DomainCreateWithoutUserInputSchema),z.lazy(() => DomainCreateWithoutUserInputSchema).array(),z.lazy(() => DomainUncheckedCreateWithoutUserInputSchema),z.lazy(() => DomainUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DomainCreateOrConnectWithoutUserInputSchema),z.lazy(() => DomainCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DomainCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DomainWhereUniqueInputSchema),z.lazy(() => DomainWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DomainUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.DomainUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => DomainCreateWithoutUserInputSchema),z.lazy(() => DomainCreateWithoutUserInputSchema).array(),z.lazy(() => DomainUncheckedCreateWithoutUserInputSchema),z.lazy(() => DomainUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DomainCreateOrConnectWithoutUserInputSchema),z.lazy(() => DomainCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DomainUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DomainUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DomainCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DomainWhereUniqueInputSchema),z.lazy(() => DomainWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DomainWhereUniqueInputSchema),z.lazy(() => DomainWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DomainWhereUniqueInputSchema),z.lazy(() => DomainWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DomainWhereUniqueInputSchema),z.lazy(() => DomainWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DomainUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DomainUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DomainUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => DomainUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DomainScalarWhereInputSchema),z.lazy(() => DomainScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DomainUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.DomainUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => DomainCreateWithoutUserInputSchema),z.lazy(() => DomainCreateWithoutUserInputSchema).array(),z.lazy(() => DomainUncheckedCreateWithoutUserInputSchema),z.lazy(() => DomainUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DomainCreateOrConnectWithoutUserInputSchema),z.lazy(() => DomainCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DomainUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DomainUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DomainCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DomainWhereUniqueInputSchema),z.lazy(() => DomainWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DomainWhereUniqueInputSchema),z.lazy(() => DomainWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DomainWhereUniqueInputSchema),z.lazy(() => DomainWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DomainWhereUniqueInputSchema),z.lazy(() => DomainWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DomainUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DomainUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DomainUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => DomainUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DomainScalarWhereInputSchema),z.lazy(() => DomainScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutDomainsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutDomainsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutDomainsInputSchema),z.lazy(() => UserUncheckedCreateWithoutDomainsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutDomainsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const ProductCreateNestedManyWithoutDomainInputSchema: z.ZodType<Prisma.ProductCreateNestedManyWithoutDomainInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutDomainInputSchema),z.lazy(() => ProductCreateWithoutDomainInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutDomainInputSchema),z.lazy(() => ProductUncheckedCreateWithoutDomainInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutDomainInputSchema),z.lazy(() => ProductCreateOrConnectWithoutDomainInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyDomainInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductUncheckedCreateNestedManyWithoutDomainInputSchema: z.ZodType<Prisma.ProductUncheckedCreateNestedManyWithoutDomainInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutDomainInputSchema),z.lazy(() => ProductCreateWithoutDomainInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutDomainInputSchema),z.lazy(() => ProductUncheckedCreateWithoutDomainInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutDomainInputSchema),z.lazy(() => ProductCreateOrConnectWithoutDomainInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyDomainInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutDomainsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutDomainsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutDomainsInputSchema),z.lazy(() => UserUncheckedCreateWithoutDomainsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutDomainsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutDomainsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutDomainsInputSchema),z.lazy(() => UserUpdateWithoutDomainsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutDomainsInputSchema) ]).optional(),
}).strict();

export const ProductUpdateManyWithoutDomainNestedInputSchema: z.ZodType<Prisma.ProductUpdateManyWithoutDomainNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutDomainInputSchema),z.lazy(() => ProductCreateWithoutDomainInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutDomainInputSchema),z.lazy(() => ProductUncheckedCreateWithoutDomainInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutDomainInputSchema),z.lazy(() => ProductCreateOrConnectWithoutDomainInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductUpsertWithWhereUniqueWithoutDomainInputSchema),z.lazy(() => ProductUpsertWithWhereUniqueWithoutDomainInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyDomainInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductUpdateWithWhereUniqueWithoutDomainInputSchema),z.lazy(() => ProductUpdateWithWhereUniqueWithoutDomainInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductUpdateManyWithWhereWithoutDomainInputSchema),z.lazy(() => ProductUpdateManyWithWhereWithoutDomainInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductUncheckedUpdateManyWithoutDomainNestedInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyWithoutDomainNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutDomainInputSchema),z.lazy(() => ProductCreateWithoutDomainInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutDomainInputSchema),z.lazy(() => ProductUncheckedCreateWithoutDomainInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutDomainInputSchema),z.lazy(() => ProductCreateOrConnectWithoutDomainInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductUpsertWithWhereUniqueWithoutDomainInputSchema),z.lazy(() => ProductUpsertWithWhereUniqueWithoutDomainInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyDomainInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductUpdateWithWhereUniqueWithoutDomainInputSchema),z.lazy(() => ProductUpdateWithWhereUniqueWithoutDomainInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductUpdateManyWithWhereWithoutDomainInputSchema),z.lazy(() => ProductUpdateManyWithWhereWithoutDomainInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DomainCreateNestedOneWithoutProductsInputSchema: z.ZodType<Prisma.DomainCreateNestedOneWithoutProductsInput> = z.object({
  create: z.union([ z.lazy(() => DomainCreateWithoutProductsInputSchema),z.lazy(() => DomainUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DomainCreateOrConnectWithoutProductsInputSchema).optional(),
  connect: z.lazy(() => DomainWhereUniqueInputSchema).optional()
}).strict();

export const FloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.FloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const DomainUpdateOneRequiredWithoutProductsNestedInputSchema: z.ZodType<Prisma.DomainUpdateOneRequiredWithoutProductsNestedInput> = z.object({
  create: z.union([ z.lazy(() => DomainCreateWithoutProductsInputSchema),z.lazy(() => DomainUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DomainCreateOrConnectWithoutProductsInputSchema).optional(),
  upsert: z.lazy(() => DomainUpsertWithoutProductsInputSchema).optional(),
  connect: z.lazy(() => DomainWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DomainUpdateToOneWithWhereWithoutProductsInputSchema),z.lazy(() => DomainUpdateWithoutProductsInputSchema),z.lazy(() => DomainUncheckedUpdateWithoutProductsInputSchema) ]).optional(),
}).strict();

export const NestedUuidNullableFilterSchema: z.ZodType<Prisma.NestedUuidNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedUuidFilterSchema: z.ZodType<Prisma.NestedUuidFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedUuidNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedUuidNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedUuidWithAggregatesFilterSchema: z.ZodType<Prisma.NestedUuidWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedJsonNullableFilterSchema: z.ZodType<Prisma.NestedJsonNullableFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedEnumcode_challenge_methodFilterSchema: z.ZodType<Prisma.NestedEnumcode_challenge_methodFilter> = z.object({
  equals: z.lazy(() => code_challenge_methodSchema).optional(),
  in: z.lazy(() => code_challenge_methodSchema).array().optional(),
  notIn: z.lazy(() => code_challenge_methodSchema).array().optional(),
  not: z.union([ z.lazy(() => code_challenge_methodSchema),z.lazy(() => NestedEnumcode_challenge_methodFilterSchema) ]).optional(),
}).strict();

export const NestedEnumcode_challenge_methodWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumcode_challenge_methodWithAggregatesFilter> = z.object({
  equals: z.lazy(() => code_challenge_methodSchema).optional(),
  in: z.lazy(() => code_challenge_methodSchema).array().optional(),
  notIn: z.lazy(() => code_challenge_methodSchema).array().optional(),
  not: z.union([ z.lazy(() => code_challenge_methodSchema),z.lazy(() => NestedEnumcode_challenge_methodWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumcode_challenge_methodFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumcode_challenge_methodFilterSchema).optional()
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedJsonFilterSchema: z.ZodType<Prisma.NestedJsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedEnumfactor_typeFilterSchema: z.ZodType<Prisma.NestedEnumfactor_typeFilter> = z.object({
  equals: z.lazy(() => factor_typeSchema).optional(),
  in: z.lazy(() => factor_typeSchema).array().optional(),
  notIn: z.lazy(() => factor_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => factor_typeSchema),z.lazy(() => NestedEnumfactor_typeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumfactor_statusFilterSchema: z.ZodType<Prisma.NestedEnumfactor_statusFilter> = z.object({
  equals: z.lazy(() => factor_statusSchema).optional(),
  in: z.lazy(() => factor_statusSchema).array().optional(),
  notIn: z.lazy(() => factor_statusSchema).array().optional(),
  not: z.union([ z.lazy(() => factor_statusSchema),z.lazy(() => NestedEnumfactor_statusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumfactor_typeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumfactor_typeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => factor_typeSchema).optional(),
  in: z.lazy(() => factor_typeSchema).array().optional(),
  notIn: z.lazy(() => factor_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => factor_typeSchema),z.lazy(() => NestedEnumfactor_typeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumfactor_typeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumfactor_typeFilterSchema).optional()
}).strict();

export const NestedEnumfactor_statusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumfactor_statusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => factor_statusSchema).optional(),
  in: z.lazy(() => factor_statusSchema).array().optional(),
  notIn: z.lazy(() => factor_statusSchema).array().optional(),
  not: z.union([ z.lazy(() => factor_statusSchema),z.lazy(() => NestedEnumfactor_statusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumfactor_statusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumfactor_statusFilterSchema).optional()
}).strict();

export const NestedEnumone_time_token_typeFilterSchema: z.ZodType<Prisma.NestedEnumone_time_token_typeFilter> = z.object({
  equals: z.lazy(() => one_time_token_typeSchema).optional(),
  in: z.lazy(() => one_time_token_typeSchema).array().optional(),
  notIn: z.lazy(() => one_time_token_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => one_time_token_typeSchema),z.lazy(() => NestedEnumone_time_token_typeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumone_time_token_typeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumone_time_token_typeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => one_time_token_typeSchema).optional(),
  in: z.lazy(() => one_time_token_typeSchema).array().optional(),
  notIn: z.lazy(() => one_time_token_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => one_time_token_typeSchema),z.lazy(() => NestedEnumone_time_token_typeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumone_time_token_typeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumone_time_token_typeFilterSchema).optional()
}).strict();

export const NestedBigIntFilterSchema: z.ZodType<Prisma.NestedBigIntFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntFilterSchema) ]).optional(),
}).strict();

export const NestedBoolNullableFilterSchema: z.ZodType<Prisma.NestedBoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedBigIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBigIntWithAggregatesFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _max: z.lazy(() => NestedBigIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedBoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const NestedEnumaal_levelNullableFilterSchema: z.ZodType<Prisma.NestedEnumaal_levelNullableFilter> = z.object({
  equals: z.lazy(() => aal_levelSchema).optional().nullable(),
  in: z.lazy(() => aal_levelSchema).array().optional().nullable(),
  notIn: z.lazy(() => aal_levelSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => aal_levelSchema),z.lazy(() => NestedEnumaal_levelNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumaal_levelNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumaal_levelNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => aal_levelSchema).optional().nullable(),
  in: z.lazy(() => aal_levelSchema).array().optional().nullable(),
  notIn: z.lazy(() => aal_levelSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => aal_levelSchema),z.lazy(() => NestedEnumaal_levelNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumaal_levelNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumaal_levelNullableFilterSchema).optional()
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedDecimalFilterSchema: z.ZodType<Prisma.NestedDecimalFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalFilterSchema) ]).optional(),
}).strict();

export const NestedDecimalWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDecimalWithAggregatesFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _sum: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _min: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _max: z.lazy(() => NestedDecimalFilterSchema).optional()
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const saml_relay_statesCreateWithoutFlow_stateInputSchema: z.ZodType<Prisma.saml_relay_statesCreateWithoutFlow_stateInput> = z.object({
  id: z.string(),
  request_id: z.string(),
  for_email: z.string().optional().nullable(),
  redirect_to: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  sso_providers: z.lazy(() => sso_providersCreateNestedOneWithoutSaml_relay_statesInputSchema)
}).strict();

export const saml_relay_statesUncheckedCreateWithoutFlow_stateInputSchema: z.ZodType<Prisma.saml_relay_statesUncheckedCreateWithoutFlow_stateInput> = z.object({
  id: z.string(),
  sso_provider_id: z.string(),
  request_id: z.string(),
  for_email: z.string().optional().nullable(),
  redirect_to: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable()
}).strict();

export const saml_relay_statesCreateOrConnectWithoutFlow_stateInputSchema: z.ZodType<Prisma.saml_relay_statesCreateOrConnectWithoutFlow_stateInput> = z.object({
  where: z.lazy(() => saml_relay_statesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => saml_relay_statesCreateWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesUncheckedCreateWithoutFlow_stateInputSchema) ]),
}).strict();

export const saml_relay_statesCreateManyFlow_stateInputEnvelopeSchema: z.ZodType<Prisma.saml_relay_statesCreateManyFlow_stateInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => saml_relay_statesCreateManyFlow_stateInputSchema),z.lazy(() => saml_relay_statesCreateManyFlow_stateInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const saml_relay_statesUpsertWithWhereUniqueWithoutFlow_stateInputSchema: z.ZodType<Prisma.saml_relay_statesUpsertWithWhereUniqueWithoutFlow_stateInput> = z.object({
  where: z.lazy(() => saml_relay_statesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => saml_relay_statesUpdateWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesUncheckedUpdateWithoutFlow_stateInputSchema) ]),
  create: z.union([ z.lazy(() => saml_relay_statesCreateWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesUncheckedCreateWithoutFlow_stateInputSchema) ]),
}).strict();

export const saml_relay_statesUpdateWithWhereUniqueWithoutFlow_stateInputSchema: z.ZodType<Prisma.saml_relay_statesUpdateWithWhereUniqueWithoutFlow_stateInput> = z.object({
  where: z.lazy(() => saml_relay_statesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => saml_relay_statesUpdateWithoutFlow_stateInputSchema),z.lazy(() => saml_relay_statesUncheckedUpdateWithoutFlow_stateInputSchema) ]),
}).strict();

export const saml_relay_statesUpdateManyWithWhereWithoutFlow_stateInputSchema: z.ZodType<Prisma.saml_relay_statesUpdateManyWithWhereWithoutFlow_stateInput> = z.object({
  where: z.lazy(() => saml_relay_statesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => saml_relay_statesUpdateManyMutationInputSchema),z.lazy(() => saml_relay_statesUncheckedUpdateManyWithoutFlow_stateInputSchema) ]),
}).strict();

export const saml_relay_statesScalarWhereInputSchema: z.ZodType<Prisma.saml_relay_statesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => saml_relay_statesScalarWhereInputSchema),z.lazy(() => saml_relay_statesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => saml_relay_statesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => saml_relay_statesScalarWhereInputSchema),z.lazy(() => saml_relay_statesScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  sso_provider_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  request_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  for_email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  redirect_to: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  flow_state_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const usersCreateWithoutIdentitiesInputSchema: z.ZodType<Prisma.usersCreateWithoutIdentitiesInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  mfa_factors: z.lazy(() => mfa_factorsCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutIdentitiesInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutIdentitiesInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutIdentitiesInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutIdentitiesInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutIdentitiesInputSchema),z.lazy(() => usersUncheckedCreateWithoutIdentitiesInputSchema) ]),
}).strict();

export const usersUpsertWithoutIdentitiesInputSchema: z.ZodType<Prisma.usersUpsertWithoutIdentitiesInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutIdentitiesInputSchema),z.lazy(() => usersUncheckedUpdateWithoutIdentitiesInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutIdentitiesInputSchema),z.lazy(() => usersUncheckedCreateWithoutIdentitiesInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutIdentitiesInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutIdentitiesInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutIdentitiesInputSchema),z.lazy(() => usersUncheckedUpdateWithoutIdentitiesInputSchema) ]),
}).strict();

export const usersUpdateWithoutIdentitiesInputSchema: z.ZodType<Prisma.usersUpdateWithoutIdentitiesInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutIdentitiesInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutIdentitiesInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const sessionsCreateWithoutMfa_amr_claimsInputSchema: z.ZodType<Prisma.sessionsCreateWithoutMfa_amr_claimsInput> = z.object({
  id: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  factor_id: z.string().optional().nullable(),
  aal: z.lazy(() => aal_levelSchema).optional().nullable(),
  not_after: z.coerce.date().optional().nullable(),
  refreshed_at: z.coerce.date().optional().nullable(),
  user_agent: z.string().optional().nullable(),
  ip: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  refresh_tokens: z.lazy(() => refresh_tokensCreateNestedManyWithoutSessionsInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutSessionsInputSchema)
}).strict();

export const sessionsUncheckedCreateWithoutMfa_amr_claimsInputSchema: z.ZodType<Prisma.sessionsUncheckedCreateWithoutMfa_amr_claimsInput> = z.object({
  id: z.string(),
  user_id: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  factor_id: z.string().optional().nullable(),
  aal: z.lazy(() => aal_levelSchema).optional().nullable(),
  not_after: z.coerce.date().optional().nullable(),
  refreshed_at: z.coerce.date().optional().nullable(),
  user_agent: z.string().optional().nullable(),
  ip: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  refresh_tokens: z.lazy(() => refresh_tokensUncheckedCreateNestedManyWithoutSessionsInputSchema).optional()
}).strict();

export const sessionsCreateOrConnectWithoutMfa_amr_claimsInputSchema: z.ZodType<Prisma.sessionsCreateOrConnectWithoutMfa_amr_claimsInput> = z.object({
  where: z.lazy(() => sessionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => sessionsCreateWithoutMfa_amr_claimsInputSchema),z.lazy(() => sessionsUncheckedCreateWithoutMfa_amr_claimsInputSchema) ]),
}).strict();

export const sessionsUpsertWithoutMfa_amr_claimsInputSchema: z.ZodType<Prisma.sessionsUpsertWithoutMfa_amr_claimsInput> = z.object({
  update: z.union([ z.lazy(() => sessionsUpdateWithoutMfa_amr_claimsInputSchema),z.lazy(() => sessionsUncheckedUpdateWithoutMfa_amr_claimsInputSchema) ]),
  create: z.union([ z.lazy(() => sessionsCreateWithoutMfa_amr_claimsInputSchema),z.lazy(() => sessionsUncheckedCreateWithoutMfa_amr_claimsInputSchema) ]),
  where: z.lazy(() => sessionsWhereInputSchema).optional()
}).strict();

export const sessionsUpdateToOneWithWhereWithoutMfa_amr_claimsInputSchema: z.ZodType<Prisma.sessionsUpdateToOneWithWhereWithoutMfa_amr_claimsInput> = z.object({
  where: z.lazy(() => sessionsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => sessionsUpdateWithoutMfa_amr_claimsInputSchema),z.lazy(() => sessionsUncheckedUpdateWithoutMfa_amr_claimsInputSchema) ]),
}).strict();

export const sessionsUpdateWithoutMfa_amr_claimsInputSchema: z.ZodType<Prisma.sessionsUpdateWithoutMfa_amr_claimsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  factor_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aal: z.union([ z.lazy(() => aal_levelSchema),z.lazy(() => NullableEnumaal_levelFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  not_after: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_agent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_tokens: z.lazy(() => refresh_tokensUpdateManyWithoutSessionsNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutSessionsNestedInputSchema).optional()
}).strict();

export const sessionsUncheckedUpdateWithoutMfa_amr_claimsInputSchema: z.ZodType<Prisma.sessionsUncheckedUpdateWithoutMfa_amr_claimsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  factor_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aal: z.union([ z.lazy(() => aal_levelSchema),z.lazy(() => NullableEnumaal_levelFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  not_after: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_agent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_tokens: z.lazy(() => refresh_tokensUncheckedUpdateManyWithoutSessionsNestedInputSchema).optional()
}).strict();

export const mfa_factorsCreateWithoutMfa_challengesInputSchema: z.ZodType<Prisma.mfa_factorsCreateWithoutMfa_challengesInput> = z.object({
  id: z.string(),
  friendly_name: z.string().optional().nullable(),
  factor_type: z.lazy(() => factor_typeSchema),
  status: z.lazy(() => factor_statusSchema),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  secret: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  last_challenged_at: z.coerce.date().optional().nullable(),
  web_authn_credential: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  web_authn_aaguid: z.string().optional().nullable(),
  users: z.lazy(() => usersCreateNestedOneWithoutMfa_factorsInputSchema)
}).strict();

export const mfa_factorsUncheckedCreateWithoutMfa_challengesInputSchema: z.ZodType<Prisma.mfa_factorsUncheckedCreateWithoutMfa_challengesInput> = z.object({
  id: z.string(),
  user_id: z.string(),
  friendly_name: z.string().optional().nullable(),
  factor_type: z.lazy(() => factor_typeSchema),
  status: z.lazy(() => factor_statusSchema),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  secret: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  last_challenged_at: z.coerce.date().optional().nullable(),
  web_authn_credential: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  web_authn_aaguid: z.string().optional().nullable()
}).strict();

export const mfa_factorsCreateOrConnectWithoutMfa_challengesInputSchema: z.ZodType<Prisma.mfa_factorsCreateOrConnectWithoutMfa_challengesInput> = z.object({
  where: z.lazy(() => mfa_factorsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => mfa_factorsCreateWithoutMfa_challengesInputSchema),z.lazy(() => mfa_factorsUncheckedCreateWithoutMfa_challengesInputSchema) ]),
}).strict();

export const mfa_factorsUpsertWithoutMfa_challengesInputSchema: z.ZodType<Prisma.mfa_factorsUpsertWithoutMfa_challengesInput> = z.object({
  update: z.union([ z.lazy(() => mfa_factorsUpdateWithoutMfa_challengesInputSchema),z.lazy(() => mfa_factorsUncheckedUpdateWithoutMfa_challengesInputSchema) ]),
  create: z.union([ z.lazy(() => mfa_factorsCreateWithoutMfa_challengesInputSchema),z.lazy(() => mfa_factorsUncheckedCreateWithoutMfa_challengesInputSchema) ]),
  where: z.lazy(() => mfa_factorsWhereInputSchema).optional()
}).strict();

export const mfa_factorsUpdateToOneWithWhereWithoutMfa_challengesInputSchema: z.ZodType<Prisma.mfa_factorsUpdateToOneWithWhereWithoutMfa_challengesInput> = z.object({
  where: z.lazy(() => mfa_factorsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => mfa_factorsUpdateWithoutMfa_challengesInputSchema),z.lazy(() => mfa_factorsUncheckedUpdateWithoutMfa_challengesInputSchema) ]),
}).strict();

export const mfa_factorsUpdateWithoutMfa_challengesInputSchema: z.ZodType<Prisma.mfa_factorsUpdateWithoutMfa_challengesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friendly_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  factor_type: z.union([ z.lazy(() => factor_typeSchema),z.lazy(() => Enumfactor_typeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => factor_statusSchema),z.lazy(() => Enumfactor_statusFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_challenged_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_authn_credential: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  web_authn_aaguid: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutMfa_factorsNestedInputSchema).optional()
}).strict();

export const mfa_factorsUncheckedUpdateWithoutMfa_challengesInputSchema: z.ZodType<Prisma.mfa_factorsUncheckedUpdateWithoutMfa_challengesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friendly_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  factor_type: z.union([ z.lazy(() => factor_typeSchema),z.lazy(() => Enumfactor_typeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => factor_statusSchema),z.lazy(() => Enumfactor_statusFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_challenged_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_authn_credential: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  web_authn_aaguid: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const mfa_challengesCreateWithoutMfa_factorsInputSchema: z.ZodType<Prisma.mfa_challengesCreateWithoutMfa_factorsInput> = z.object({
  id: z.string(),
  created_at: z.coerce.date(),
  verified_at: z.coerce.date().optional().nullable(),
  ip_address: z.string(),
  otp_code: z.string().optional().nullable(),
  web_authn_session_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const mfa_challengesUncheckedCreateWithoutMfa_factorsInputSchema: z.ZodType<Prisma.mfa_challengesUncheckedCreateWithoutMfa_factorsInput> = z.object({
  id: z.string(),
  created_at: z.coerce.date(),
  verified_at: z.coerce.date().optional().nullable(),
  ip_address: z.string(),
  otp_code: z.string().optional().nullable(),
  web_authn_session_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const mfa_challengesCreateOrConnectWithoutMfa_factorsInputSchema: z.ZodType<Prisma.mfa_challengesCreateOrConnectWithoutMfa_factorsInput> = z.object({
  where: z.lazy(() => mfa_challengesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => mfa_challengesCreateWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesUncheckedCreateWithoutMfa_factorsInputSchema) ]),
}).strict();

export const mfa_challengesCreateManyMfa_factorsInputEnvelopeSchema: z.ZodType<Prisma.mfa_challengesCreateManyMfa_factorsInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => mfa_challengesCreateManyMfa_factorsInputSchema),z.lazy(() => mfa_challengesCreateManyMfa_factorsInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const usersCreateWithoutMfa_factorsInputSchema: z.ZodType<Prisma.usersCreateWithoutMfa_factorsInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutMfa_factorsInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutMfa_factorsInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutMfa_factorsInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutMfa_factorsInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutMfa_factorsInputSchema),z.lazy(() => usersUncheckedCreateWithoutMfa_factorsInputSchema) ]),
}).strict();

export const mfa_challengesUpsertWithWhereUniqueWithoutMfa_factorsInputSchema: z.ZodType<Prisma.mfa_challengesUpsertWithWhereUniqueWithoutMfa_factorsInput> = z.object({
  where: z.lazy(() => mfa_challengesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => mfa_challengesUpdateWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesUncheckedUpdateWithoutMfa_factorsInputSchema) ]),
  create: z.union([ z.lazy(() => mfa_challengesCreateWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesUncheckedCreateWithoutMfa_factorsInputSchema) ]),
}).strict();

export const mfa_challengesUpdateWithWhereUniqueWithoutMfa_factorsInputSchema: z.ZodType<Prisma.mfa_challengesUpdateWithWhereUniqueWithoutMfa_factorsInput> = z.object({
  where: z.lazy(() => mfa_challengesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => mfa_challengesUpdateWithoutMfa_factorsInputSchema),z.lazy(() => mfa_challengesUncheckedUpdateWithoutMfa_factorsInputSchema) ]),
}).strict();

export const mfa_challengesUpdateManyWithWhereWithoutMfa_factorsInputSchema: z.ZodType<Prisma.mfa_challengesUpdateManyWithWhereWithoutMfa_factorsInput> = z.object({
  where: z.lazy(() => mfa_challengesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => mfa_challengesUpdateManyMutationInputSchema),z.lazy(() => mfa_challengesUncheckedUpdateManyWithoutMfa_factorsInputSchema) ]),
}).strict();

export const mfa_challengesScalarWhereInputSchema: z.ZodType<Prisma.mfa_challengesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => mfa_challengesScalarWhereInputSchema),z.lazy(() => mfa_challengesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => mfa_challengesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => mfa_challengesScalarWhereInputSchema),z.lazy(() => mfa_challengesScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  factor_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  verified_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  ip_address: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  otp_code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  web_authn_session_data: z.lazy(() => JsonNullableFilterSchema).optional()
}).strict();

export const usersUpsertWithoutMfa_factorsInputSchema: z.ZodType<Prisma.usersUpsertWithoutMfa_factorsInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutMfa_factorsInputSchema),z.lazy(() => usersUncheckedUpdateWithoutMfa_factorsInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutMfa_factorsInputSchema),z.lazy(() => usersUncheckedCreateWithoutMfa_factorsInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutMfa_factorsInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutMfa_factorsInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutMfa_factorsInputSchema),z.lazy(() => usersUncheckedUpdateWithoutMfa_factorsInputSchema) ]),
}).strict();

export const usersUpdateWithoutMfa_factorsInputSchema: z.ZodType<Prisma.usersUpdateWithoutMfa_factorsInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutMfa_factorsInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutMfa_factorsInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const usersCreateWithoutOne_time_tokensInputSchema: z.ZodType<Prisma.usersCreateWithoutOne_time_tokensInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutOne_time_tokensInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutOne_time_tokensInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutOne_time_tokensInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutOne_time_tokensInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutOne_time_tokensInputSchema),z.lazy(() => usersUncheckedCreateWithoutOne_time_tokensInputSchema) ]),
}).strict();

export const usersUpsertWithoutOne_time_tokensInputSchema: z.ZodType<Prisma.usersUpsertWithoutOne_time_tokensInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutOne_time_tokensInputSchema),z.lazy(() => usersUncheckedUpdateWithoutOne_time_tokensInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutOne_time_tokensInputSchema),z.lazy(() => usersUncheckedCreateWithoutOne_time_tokensInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutOne_time_tokensInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutOne_time_tokensInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutOne_time_tokensInputSchema),z.lazy(() => usersUncheckedUpdateWithoutOne_time_tokensInputSchema) ]),
}).strict();

export const usersUpdateWithoutOne_time_tokensInputSchema: z.ZodType<Prisma.usersUpdateWithoutOne_time_tokensInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutOne_time_tokensInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutOne_time_tokensInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const sessionsCreateWithoutRefresh_tokensInputSchema: z.ZodType<Prisma.sessionsCreateWithoutRefresh_tokensInput> = z.object({
  id: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  factor_id: z.string().optional().nullable(),
  aal: z.lazy(() => aal_levelSchema).optional().nullable(),
  not_after: z.coerce.date().optional().nullable(),
  refreshed_at: z.coerce.date().optional().nullable(),
  user_agent: z.string().optional().nullable(),
  ip: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  mfa_amr_claims: z.lazy(() => mfa_amr_claimsCreateNestedManyWithoutSessionsInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutSessionsInputSchema)
}).strict();

export const sessionsUncheckedCreateWithoutRefresh_tokensInputSchema: z.ZodType<Prisma.sessionsUncheckedCreateWithoutRefresh_tokensInput> = z.object({
  id: z.string(),
  user_id: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  factor_id: z.string().optional().nullable(),
  aal: z.lazy(() => aal_levelSchema).optional().nullable(),
  not_after: z.coerce.date().optional().nullable(),
  refreshed_at: z.coerce.date().optional().nullable(),
  user_agent: z.string().optional().nullable(),
  ip: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  mfa_amr_claims: z.lazy(() => mfa_amr_claimsUncheckedCreateNestedManyWithoutSessionsInputSchema).optional()
}).strict();

export const sessionsCreateOrConnectWithoutRefresh_tokensInputSchema: z.ZodType<Prisma.sessionsCreateOrConnectWithoutRefresh_tokensInput> = z.object({
  where: z.lazy(() => sessionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => sessionsCreateWithoutRefresh_tokensInputSchema),z.lazy(() => sessionsUncheckedCreateWithoutRefresh_tokensInputSchema) ]),
}).strict();

export const sessionsUpsertWithoutRefresh_tokensInputSchema: z.ZodType<Prisma.sessionsUpsertWithoutRefresh_tokensInput> = z.object({
  update: z.union([ z.lazy(() => sessionsUpdateWithoutRefresh_tokensInputSchema),z.lazy(() => sessionsUncheckedUpdateWithoutRefresh_tokensInputSchema) ]),
  create: z.union([ z.lazy(() => sessionsCreateWithoutRefresh_tokensInputSchema),z.lazy(() => sessionsUncheckedCreateWithoutRefresh_tokensInputSchema) ]),
  where: z.lazy(() => sessionsWhereInputSchema).optional()
}).strict();

export const sessionsUpdateToOneWithWhereWithoutRefresh_tokensInputSchema: z.ZodType<Prisma.sessionsUpdateToOneWithWhereWithoutRefresh_tokensInput> = z.object({
  where: z.lazy(() => sessionsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => sessionsUpdateWithoutRefresh_tokensInputSchema),z.lazy(() => sessionsUncheckedUpdateWithoutRefresh_tokensInputSchema) ]),
}).strict();

export const sessionsUpdateWithoutRefresh_tokensInputSchema: z.ZodType<Prisma.sessionsUpdateWithoutRefresh_tokensInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  factor_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aal: z.union([ z.lazy(() => aal_levelSchema),z.lazy(() => NullableEnumaal_levelFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  not_after: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_agent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mfa_amr_claims: z.lazy(() => mfa_amr_claimsUpdateManyWithoutSessionsNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutSessionsNestedInputSchema).optional()
}).strict();

export const sessionsUncheckedUpdateWithoutRefresh_tokensInputSchema: z.ZodType<Prisma.sessionsUncheckedUpdateWithoutRefresh_tokensInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  factor_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aal: z.union([ z.lazy(() => aal_levelSchema),z.lazy(() => NullableEnumaal_levelFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  not_after: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_agent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mfa_amr_claims: z.lazy(() => mfa_amr_claimsUncheckedUpdateManyWithoutSessionsNestedInputSchema).optional()
}).strict();

export const sso_providersCreateWithoutSaml_providersInputSchema: z.ZodType<Prisma.sso_providersCreateWithoutSaml_providersInput> = z.object({
  id: z.string(),
  resource_id: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  saml_relay_states: z.lazy(() => saml_relay_statesCreateNestedManyWithoutSso_providersInputSchema).optional(),
  sso_domains: z.lazy(() => sso_domainsCreateNestedManyWithoutSso_providersInputSchema).optional()
}).strict();

export const sso_providersUncheckedCreateWithoutSaml_providersInputSchema: z.ZodType<Prisma.sso_providersUncheckedCreateWithoutSaml_providersInput> = z.object({
  id: z.string(),
  resource_id: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  saml_relay_states: z.lazy(() => saml_relay_statesUncheckedCreateNestedManyWithoutSso_providersInputSchema).optional(),
  sso_domains: z.lazy(() => sso_domainsUncheckedCreateNestedManyWithoutSso_providersInputSchema).optional()
}).strict();

export const sso_providersCreateOrConnectWithoutSaml_providersInputSchema: z.ZodType<Prisma.sso_providersCreateOrConnectWithoutSaml_providersInput> = z.object({
  where: z.lazy(() => sso_providersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => sso_providersCreateWithoutSaml_providersInputSchema),z.lazy(() => sso_providersUncheckedCreateWithoutSaml_providersInputSchema) ]),
}).strict();

export const sso_providersUpsertWithoutSaml_providersInputSchema: z.ZodType<Prisma.sso_providersUpsertWithoutSaml_providersInput> = z.object({
  update: z.union([ z.lazy(() => sso_providersUpdateWithoutSaml_providersInputSchema),z.lazy(() => sso_providersUncheckedUpdateWithoutSaml_providersInputSchema) ]),
  create: z.union([ z.lazy(() => sso_providersCreateWithoutSaml_providersInputSchema),z.lazy(() => sso_providersUncheckedCreateWithoutSaml_providersInputSchema) ]),
  where: z.lazy(() => sso_providersWhereInputSchema).optional()
}).strict();

export const sso_providersUpdateToOneWithWhereWithoutSaml_providersInputSchema: z.ZodType<Prisma.sso_providersUpdateToOneWithWhereWithoutSaml_providersInput> = z.object({
  where: z.lazy(() => sso_providersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => sso_providersUpdateWithoutSaml_providersInputSchema),z.lazy(() => sso_providersUncheckedUpdateWithoutSaml_providersInputSchema) ]),
}).strict();

export const sso_providersUpdateWithoutSaml_providersInputSchema: z.ZodType<Prisma.sso_providersUpdateWithoutSaml_providersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resource_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  saml_relay_states: z.lazy(() => saml_relay_statesUpdateManyWithoutSso_providersNestedInputSchema).optional(),
  sso_domains: z.lazy(() => sso_domainsUpdateManyWithoutSso_providersNestedInputSchema).optional()
}).strict();

export const sso_providersUncheckedUpdateWithoutSaml_providersInputSchema: z.ZodType<Prisma.sso_providersUncheckedUpdateWithoutSaml_providersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resource_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  saml_relay_states: z.lazy(() => saml_relay_statesUncheckedUpdateManyWithoutSso_providersNestedInputSchema).optional(),
  sso_domains: z.lazy(() => sso_domainsUncheckedUpdateManyWithoutSso_providersNestedInputSchema).optional()
}).strict();

export const flow_stateCreateWithoutSaml_relay_statesInputSchema: z.ZodType<Prisma.flow_stateCreateWithoutSaml_relay_statesInput> = z.object({
  id: z.string(),
  user_id: z.string().optional().nullable(),
  auth_code: z.string(),
  code_challenge_method: z.lazy(() => code_challenge_methodSchema),
  code_challenge: z.string(),
  provider_type: z.string(),
  provider_access_token: z.string().optional().nullable(),
  provider_refresh_token: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  authentication_method: z.string(),
  auth_code_issued_at: z.coerce.date().optional().nullable()
}).strict();

export const flow_stateUncheckedCreateWithoutSaml_relay_statesInputSchema: z.ZodType<Prisma.flow_stateUncheckedCreateWithoutSaml_relay_statesInput> = z.object({
  id: z.string(),
  user_id: z.string().optional().nullable(),
  auth_code: z.string(),
  code_challenge_method: z.lazy(() => code_challenge_methodSchema),
  code_challenge: z.string(),
  provider_type: z.string(),
  provider_access_token: z.string().optional().nullable(),
  provider_refresh_token: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  authentication_method: z.string(),
  auth_code_issued_at: z.coerce.date().optional().nullable()
}).strict();

export const flow_stateCreateOrConnectWithoutSaml_relay_statesInputSchema: z.ZodType<Prisma.flow_stateCreateOrConnectWithoutSaml_relay_statesInput> = z.object({
  where: z.lazy(() => flow_stateWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => flow_stateCreateWithoutSaml_relay_statesInputSchema),z.lazy(() => flow_stateUncheckedCreateWithoutSaml_relay_statesInputSchema) ]),
}).strict();

export const sso_providersCreateWithoutSaml_relay_statesInputSchema: z.ZodType<Prisma.sso_providersCreateWithoutSaml_relay_statesInput> = z.object({
  id: z.string(),
  resource_id: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  saml_providers: z.lazy(() => saml_providersCreateNestedManyWithoutSso_providersInputSchema).optional(),
  sso_domains: z.lazy(() => sso_domainsCreateNestedManyWithoutSso_providersInputSchema).optional()
}).strict();

export const sso_providersUncheckedCreateWithoutSaml_relay_statesInputSchema: z.ZodType<Prisma.sso_providersUncheckedCreateWithoutSaml_relay_statesInput> = z.object({
  id: z.string(),
  resource_id: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  saml_providers: z.lazy(() => saml_providersUncheckedCreateNestedManyWithoutSso_providersInputSchema).optional(),
  sso_domains: z.lazy(() => sso_domainsUncheckedCreateNestedManyWithoutSso_providersInputSchema).optional()
}).strict();

export const sso_providersCreateOrConnectWithoutSaml_relay_statesInputSchema: z.ZodType<Prisma.sso_providersCreateOrConnectWithoutSaml_relay_statesInput> = z.object({
  where: z.lazy(() => sso_providersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => sso_providersCreateWithoutSaml_relay_statesInputSchema),z.lazy(() => sso_providersUncheckedCreateWithoutSaml_relay_statesInputSchema) ]),
}).strict();

export const flow_stateUpsertWithoutSaml_relay_statesInputSchema: z.ZodType<Prisma.flow_stateUpsertWithoutSaml_relay_statesInput> = z.object({
  update: z.union([ z.lazy(() => flow_stateUpdateWithoutSaml_relay_statesInputSchema),z.lazy(() => flow_stateUncheckedUpdateWithoutSaml_relay_statesInputSchema) ]),
  create: z.union([ z.lazy(() => flow_stateCreateWithoutSaml_relay_statesInputSchema),z.lazy(() => flow_stateUncheckedCreateWithoutSaml_relay_statesInputSchema) ]),
  where: z.lazy(() => flow_stateWhereInputSchema).optional()
}).strict();

export const flow_stateUpdateToOneWithWhereWithoutSaml_relay_statesInputSchema: z.ZodType<Prisma.flow_stateUpdateToOneWithWhereWithoutSaml_relay_statesInput> = z.object({
  where: z.lazy(() => flow_stateWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => flow_stateUpdateWithoutSaml_relay_statesInputSchema),z.lazy(() => flow_stateUncheckedUpdateWithoutSaml_relay_statesInputSchema) ]),
}).strict();

export const flow_stateUpdateWithoutSaml_relay_statesInputSchema: z.ZodType<Prisma.flow_stateUpdateWithoutSaml_relay_statesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code_challenge_method: z.union([ z.lazy(() => code_challenge_methodSchema),z.lazy(() => Enumcode_challenge_methodFieldUpdateOperationsInputSchema) ]).optional(),
  code_challenge: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider_access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  provider_refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  authentication_method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  auth_code_issued_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const flow_stateUncheckedUpdateWithoutSaml_relay_statesInputSchema: z.ZodType<Prisma.flow_stateUncheckedUpdateWithoutSaml_relay_statesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code_challenge_method: z.union([ z.lazy(() => code_challenge_methodSchema),z.lazy(() => Enumcode_challenge_methodFieldUpdateOperationsInputSchema) ]).optional(),
  code_challenge: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider_access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  provider_refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  authentication_method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  auth_code_issued_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const sso_providersUpsertWithoutSaml_relay_statesInputSchema: z.ZodType<Prisma.sso_providersUpsertWithoutSaml_relay_statesInput> = z.object({
  update: z.union([ z.lazy(() => sso_providersUpdateWithoutSaml_relay_statesInputSchema),z.lazy(() => sso_providersUncheckedUpdateWithoutSaml_relay_statesInputSchema) ]),
  create: z.union([ z.lazy(() => sso_providersCreateWithoutSaml_relay_statesInputSchema),z.lazy(() => sso_providersUncheckedCreateWithoutSaml_relay_statesInputSchema) ]),
  where: z.lazy(() => sso_providersWhereInputSchema).optional()
}).strict();

export const sso_providersUpdateToOneWithWhereWithoutSaml_relay_statesInputSchema: z.ZodType<Prisma.sso_providersUpdateToOneWithWhereWithoutSaml_relay_statesInput> = z.object({
  where: z.lazy(() => sso_providersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => sso_providersUpdateWithoutSaml_relay_statesInputSchema),z.lazy(() => sso_providersUncheckedUpdateWithoutSaml_relay_statesInputSchema) ]),
}).strict();

export const sso_providersUpdateWithoutSaml_relay_statesInputSchema: z.ZodType<Prisma.sso_providersUpdateWithoutSaml_relay_statesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resource_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  saml_providers: z.lazy(() => saml_providersUpdateManyWithoutSso_providersNestedInputSchema).optional(),
  sso_domains: z.lazy(() => sso_domainsUpdateManyWithoutSso_providersNestedInputSchema).optional()
}).strict();

export const sso_providersUncheckedUpdateWithoutSaml_relay_statesInputSchema: z.ZodType<Prisma.sso_providersUncheckedUpdateWithoutSaml_relay_statesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resource_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  saml_providers: z.lazy(() => saml_providersUncheckedUpdateManyWithoutSso_providersNestedInputSchema).optional(),
  sso_domains: z.lazy(() => sso_domainsUncheckedUpdateManyWithoutSso_providersNestedInputSchema).optional()
}).strict();

export const mfa_amr_claimsCreateWithoutSessionsInputSchema: z.ZodType<Prisma.mfa_amr_claimsCreateWithoutSessionsInput> = z.object({
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  authentication_method: z.string(),
  id: z.string()
}).strict();

export const mfa_amr_claimsUncheckedCreateWithoutSessionsInputSchema: z.ZodType<Prisma.mfa_amr_claimsUncheckedCreateWithoutSessionsInput> = z.object({
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  authentication_method: z.string(),
  id: z.string()
}).strict();

export const mfa_amr_claimsCreateOrConnectWithoutSessionsInputSchema: z.ZodType<Prisma.mfa_amr_claimsCreateOrConnectWithoutSessionsInput> = z.object({
  where: z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => mfa_amr_claimsCreateWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsUncheckedCreateWithoutSessionsInputSchema) ]),
}).strict();

export const mfa_amr_claimsCreateManySessionsInputEnvelopeSchema: z.ZodType<Prisma.mfa_amr_claimsCreateManySessionsInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => mfa_amr_claimsCreateManySessionsInputSchema),z.lazy(() => mfa_amr_claimsCreateManySessionsInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const refresh_tokensCreateWithoutSessionsInputSchema: z.ZodType<Prisma.refresh_tokensCreateWithoutSessionsInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.bigint().optional(),
  token: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
  revoked: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  parent: z.string().optional().nullable()
}).strict();

export const refresh_tokensUncheckedCreateWithoutSessionsInputSchema: z.ZodType<Prisma.refresh_tokensUncheckedCreateWithoutSessionsInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.bigint().optional(),
  token: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
  revoked: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  parent: z.string().optional().nullable()
}).strict();

export const refresh_tokensCreateOrConnectWithoutSessionsInputSchema: z.ZodType<Prisma.refresh_tokensCreateOrConnectWithoutSessionsInput> = z.object({
  where: z.lazy(() => refresh_tokensWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => refresh_tokensCreateWithoutSessionsInputSchema),z.lazy(() => refresh_tokensUncheckedCreateWithoutSessionsInputSchema) ]),
}).strict();

export const refresh_tokensCreateManySessionsInputEnvelopeSchema: z.ZodType<Prisma.refresh_tokensCreateManySessionsInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => refresh_tokensCreateManySessionsInputSchema),z.lazy(() => refresh_tokensCreateManySessionsInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const usersCreateWithoutSessionsInputSchema: z.ZodType<Prisma.usersCreateWithoutSessionsInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutSessionsInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutSessionsInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutSessionsInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutSessionsInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutSessionsInputSchema),z.lazy(() => usersUncheckedCreateWithoutSessionsInputSchema) ]),
}).strict();

export const mfa_amr_claimsUpsertWithWhereUniqueWithoutSessionsInputSchema: z.ZodType<Prisma.mfa_amr_claimsUpsertWithWhereUniqueWithoutSessionsInput> = z.object({
  where: z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => mfa_amr_claimsUpdateWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsUncheckedUpdateWithoutSessionsInputSchema) ]),
  create: z.union([ z.lazy(() => mfa_amr_claimsCreateWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsUncheckedCreateWithoutSessionsInputSchema) ]),
}).strict();

export const mfa_amr_claimsUpdateWithWhereUniqueWithoutSessionsInputSchema: z.ZodType<Prisma.mfa_amr_claimsUpdateWithWhereUniqueWithoutSessionsInput> = z.object({
  where: z.lazy(() => mfa_amr_claimsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => mfa_amr_claimsUpdateWithoutSessionsInputSchema),z.lazy(() => mfa_amr_claimsUncheckedUpdateWithoutSessionsInputSchema) ]),
}).strict();

export const mfa_amr_claimsUpdateManyWithWhereWithoutSessionsInputSchema: z.ZodType<Prisma.mfa_amr_claimsUpdateManyWithWhereWithoutSessionsInput> = z.object({
  where: z.lazy(() => mfa_amr_claimsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => mfa_amr_claimsUpdateManyMutationInputSchema),z.lazy(() => mfa_amr_claimsUncheckedUpdateManyWithoutSessionsInputSchema) ]),
}).strict();

export const mfa_amr_claimsScalarWhereInputSchema: z.ZodType<Prisma.mfa_amr_claimsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => mfa_amr_claimsScalarWhereInputSchema),z.lazy(() => mfa_amr_claimsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => mfa_amr_claimsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => mfa_amr_claimsScalarWhereInputSchema),z.lazy(() => mfa_amr_claimsScalarWhereInputSchema).array() ]).optional(),
  session_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  authentication_method: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
}).strict();

export const refresh_tokensUpsertWithWhereUniqueWithoutSessionsInputSchema: z.ZodType<Prisma.refresh_tokensUpsertWithWhereUniqueWithoutSessionsInput> = z.object({
  where: z.lazy(() => refresh_tokensWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => refresh_tokensUpdateWithoutSessionsInputSchema),z.lazy(() => refresh_tokensUncheckedUpdateWithoutSessionsInputSchema) ]),
  create: z.union([ z.lazy(() => refresh_tokensCreateWithoutSessionsInputSchema),z.lazy(() => refresh_tokensUncheckedCreateWithoutSessionsInputSchema) ]),
}).strict();

export const refresh_tokensUpdateWithWhereUniqueWithoutSessionsInputSchema: z.ZodType<Prisma.refresh_tokensUpdateWithWhereUniqueWithoutSessionsInput> = z.object({
  where: z.lazy(() => refresh_tokensWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => refresh_tokensUpdateWithoutSessionsInputSchema),z.lazy(() => refresh_tokensUncheckedUpdateWithoutSessionsInputSchema) ]),
}).strict();

export const refresh_tokensUpdateManyWithWhereWithoutSessionsInputSchema: z.ZodType<Prisma.refresh_tokensUpdateManyWithWhereWithoutSessionsInput> = z.object({
  where: z.lazy(() => refresh_tokensScalarWhereInputSchema),
  data: z.union([ z.lazy(() => refresh_tokensUpdateManyMutationInputSchema),z.lazy(() => refresh_tokensUncheckedUpdateManyWithoutSessionsInputSchema) ]),
}).strict();

export const refresh_tokensScalarWhereInputSchema: z.ZodType<Prisma.refresh_tokensScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => refresh_tokensScalarWhereInputSchema),z.lazy(() => refresh_tokensScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => refresh_tokensScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => refresh_tokensScalarWhereInputSchema),z.lazy(() => refresh_tokensScalarWhereInputSchema).array() ]).optional(),
  instance_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  id: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  revoked: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  parent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const usersUpsertWithoutSessionsInputSchema: z.ZodType<Prisma.usersUpsertWithoutSessionsInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutSessionsInputSchema),z.lazy(() => usersUncheckedUpdateWithoutSessionsInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutSessionsInputSchema),z.lazy(() => usersUncheckedCreateWithoutSessionsInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutSessionsInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutSessionsInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutSessionsInputSchema),z.lazy(() => usersUncheckedUpdateWithoutSessionsInputSchema) ]),
}).strict();

export const usersUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.usersUpdateWithoutSessionsInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutSessionsInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const sso_providersCreateWithoutSso_domainsInputSchema: z.ZodType<Prisma.sso_providersCreateWithoutSso_domainsInput> = z.object({
  id: z.string(),
  resource_id: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  saml_providers: z.lazy(() => saml_providersCreateNestedManyWithoutSso_providersInputSchema).optional(),
  saml_relay_states: z.lazy(() => saml_relay_statesCreateNestedManyWithoutSso_providersInputSchema).optional()
}).strict();

export const sso_providersUncheckedCreateWithoutSso_domainsInputSchema: z.ZodType<Prisma.sso_providersUncheckedCreateWithoutSso_domainsInput> = z.object({
  id: z.string(),
  resource_id: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  saml_providers: z.lazy(() => saml_providersUncheckedCreateNestedManyWithoutSso_providersInputSchema).optional(),
  saml_relay_states: z.lazy(() => saml_relay_statesUncheckedCreateNestedManyWithoutSso_providersInputSchema).optional()
}).strict();

export const sso_providersCreateOrConnectWithoutSso_domainsInputSchema: z.ZodType<Prisma.sso_providersCreateOrConnectWithoutSso_domainsInput> = z.object({
  where: z.lazy(() => sso_providersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => sso_providersCreateWithoutSso_domainsInputSchema),z.lazy(() => sso_providersUncheckedCreateWithoutSso_domainsInputSchema) ]),
}).strict();

export const sso_providersUpsertWithoutSso_domainsInputSchema: z.ZodType<Prisma.sso_providersUpsertWithoutSso_domainsInput> = z.object({
  update: z.union([ z.lazy(() => sso_providersUpdateWithoutSso_domainsInputSchema),z.lazy(() => sso_providersUncheckedUpdateWithoutSso_domainsInputSchema) ]),
  create: z.union([ z.lazy(() => sso_providersCreateWithoutSso_domainsInputSchema),z.lazy(() => sso_providersUncheckedCreateWithoutSso_domainsInputSchema) ]),
  where: z.lazy(() => sso_providersWhereInputSchema).optional()
}).strict();

export const sso_providersUpdateToOneWithWhereWithoutSso_domainsInputSchema: z.ZodType<Prisma.sso_providersUpdateToOneWithWhereWithoutSso_domainsInput> = z.object({
  where: z.lazy(() => sso_providersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => sso_providersUpdateWithoutSso_domainsInputSchema),z.lazy(() => sso_providersUncheckedUpdateWithoutSso_domainsInputSchema) ]),
}).strict();

export const sso_providersUpdateWithoutSso_domainsInputSchema: z.ZodType<Prisma.sso_providersUpdateWithoutSso_domainsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resource_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  saml_providers: z.lazy(() => saml_providersUpdateManyWithoutSso_providersNestedInputSchema).optional(),
  saml_relay_states: z.lazy(() => saml_relay_statesUpdateManyWithoutSso_providersNestedInputSchema).optional()
}).strict();

export const sso_providersUncheckedUpdateWithoutSso_domainsInputSchema: z.ZodType<Prisma.sso_providersUncheckedUpdateWithoutSso_domainsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resource_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  saml_providers: z.lazy(() => saml_providersUncheckedUpdateManyWithoutSso_providersNestedInputSchema).optional(),
  saml_relay_states: z.lazy(() => saml_relay_statesUncheckedUpdateManyWithoutSso_providersNestedInputSchema).optional()
}).strict();

export const saml_providersCreateWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_providersCreateWithoutSso_providersInput> = z.object({
  id: z.string(),
  entity_id: z.string(),
  metadata_xml: z.string(),
  metadata_url: z.string().optional().nullable(),
  attribute_mapping: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  name_id_format: z.string().optional().nullable()
}).strict();

export const saml_providersUncheckedCreateWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_providersUncheckedCreateWithoutSso_providersInput> = z.object({
  id: z.string(),
  entity_id: z.string(),
  metadata_xml: z.string(),
  metadata_url: z.string().optional().nullable(),
  attribute_mapping: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  name_id_format: z.string().optional().nullable()
}).strict();

export const saml_providersCreateOrConnectWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_providersCreateOrConnectWithoutSso_providersInput> = z.object({
  where: z.lazy(() => saml_providersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => saml_providersCreateWithoutSso_providersInputSchema),z.lazy(() => saml_providersUncheckedCreateWithoutSso_providersInputSchema) ]),
}).strict();

export const saml_providersCreateManySso_providersInputEnvelopeSchema: z.ZodType<Prisma.saml_providersCreateManySso_providersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => saml_providersCreateManySso_providersInputSchema),z.lazy(() => saml_providersCreateManySso_providersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const saml_relay_statesCreateWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_relay_statesCreateWithoutSso_providersInput> = z.object({
  id: z.string(),
  request_id: z.string(),
  for_email: z.string().optional().nullable(),
  redirect_to: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  flow_state: z.lazy(() => flow_stateCreateNestedOneWithoutSaml_relay_statesInputSchema).optional()
}).strict();

export const saml_relay_statesUncheckedCreateWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_relay_statesUncheckedCreateWithoutSso_providersInput> = z.object({
  id: z.string(),
  request_id: z.string(),
  for_email: z.string().optional().nullable(),
  redirect_to: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  flow_state_id: z.string().optional().nullable()
}).strict();

export const saml_relay_statesCreateOrConnectWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_relay_statesCreateOrConnectWithoutSso_providersInput> = z.object({
  where: z.lazy(() => saml_relay_statesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => saml_relay_statesCreateWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesUncheckedCreateWithoutSso_providersInputSchema) ]),
}).strict();

export const saml_relay_statesCreateManySso_providersInputEnvelopeSchema: z.ZodType<Prisma.saml_relay_statesCreateManySso_providersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => saml_relay_statesCreateManySso_providersInputSchema),z.lazy(() => saml_relay_statesCreateManySso_providersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const sso_domainsCreateWithoutSso_providersInputSchema: z.ZodType<Prisma.sso_domainsCreateWithoutSso_providersInput> = z.object({
  id: z.string(),
  domain: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable()
}).strict();

export const sso_domainsUncheckedCreateWithoutSso_providersInputSchema: z.ZodType<Prisma.sso_domainsUncheckedCreateWithoutSso_providersInput> = z.object({
  id: z.string(),
  domain: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable()
}).strict();

export const sso_domainsCreateOrConnectWithoutSso_providersInputSchema: z.ZodType<Prisma.sso_domainsCreateOrConnectWithoutSso_providersInput> = z.object({
  where: z.lazy(() => sso_domainsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => sso_domainsCreateWithoutSso_providersInputSchema),z.lazy(() => sso_domainsUncheckedCreateWithoutSso_providersInputSchema) ]),
}).strict();

export const sso_domainsCreateManySso_providersInputEnvelopeSchema: z.ZodType<Prisma.sso_domainsCreateManySso_providersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => sso_domainsCreateManySso_providersInputSchema),z.lazy(() => sso_domainsCreateManySso_providersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const saml_providersUpsertWithWhereUniqueWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_providersUpsertWithWhereUniqueWithoutSso_providersInput> = z.object({
  where: z.lazy(() => saml_providersWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => saml_providersUpdateWithoutSso_providersInputSchema),z.lazy(() => saml_providersUncheckedUpdateWithoutSso_providersInputSchema) ]),
  create: z.union([ z.lazy(() => saml_providersCreateWithoutSso_providersInputSchema),z.lazy(() => saml_providersUncheckedCreateWithoutSso_providersInputSchema) ]),
}).strict();

export const saml_providersUpdateWithWhereUniqueWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_providersUpdateWithWhereUniqueWithoutSso_providersInput> = z.object({
  where: z.lazy(() => saml_providersWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => saml_providersUpdateWithoutSso_providersInputSchema),z.lazy(() => saml_providersUncheckedUpdateWithoutSso_providersInputSchema) ]),
}).strict();

export const saml_providersUpdateManyWithWhereWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_providersUpdateManyWithWhereWithoutSso_providersInput> = z.object({
  where: z.lazy(() => saml_providersScalarWhereInputSchema),
  data: z.union([ z.lazy(() => saml_providersUpdateManyMutationInputSchema),z.lazy(() => saml_providersUncheckedUpdateManyWithoutSso_providersInputSchema) ]),
}).strict();

export const saml_providersScalarWhereInputSchema: z.ZodType<Prisma.saml_providersScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => saml_providersScalarWhereInputSchema),z.lazy(() => saml_providersScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => saml_providersScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => saml_providersScalarWhereInputSchema),z.lazy(() => saml_providersScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  sso_provider_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  entity_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  metadata_xml: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  metadata_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  attribute_mapping: z.lazy(() => JsonNullableFilterSchema).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name_id_format: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const saml_relay_statesUpsertWithWhereUniqueWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_relay_statesUpsertWithWhereUniqueWithoutSso_providersInput> = z.object({
  where: z.lazy(() => saml_relay_statesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => saml_relay_statesUpdateWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesUncheckedUpdateWithoutSso_providersInputSchema) ]),
  create: z.union([ z.lazy(() => saml_relay_statesCreateWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesUncheckedCreateWithoutSso_providersInputSchema) ]),
}).strict();

export const saml_relay_statesUpdateWithWhereUniqueWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_relay_statesUpdateWithWhereUniqueWithoutSso_providersInput> = z.object({
  where: z.lazy(() => saml_relay_statesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => saml_relay_statesUpdateWithoutSso_providersInputSchema),z.lazy(() => saml_relay_statesUncheckedUpdateWithoutSso_providersInputSchema) ]),
}).strict();

export const saml_relay_statesUpdateManyWithWhereWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_relay_statesUpdateManyWithWhereWithoutSso_providersInput> = z.object({
  where: z.lazy(() => saml_relay_statesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => saml_relay_statesUpdateManyMutationInputSchema),z.lazy(() => saml_relay_statesUncheckedUpdateManyWithoutSso_providersInputSchema) ]),
}).strict();

export const sso_domainsUpsertWithWhereUniqueWithoutSso_providersInputSchema: z.ZodType<Prisma.sso_domainsUpsertWithWhereUniqueWithoutSso_providersInput> = z.object({
  where: z.lazy(() => sso_domainsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => sso_domainsUpdateWithoutSso_providersInputSchema),z.lazy(() => sso_domainsUncheckedUpdateWithoutSso_providersInputSchema) ]),
  create: z.union([ z.lazy(() => sso_domainsCreateWithoutSso_providersInputSchema),z.lazy(() => sso_domainsUncheckedCreateWithoutSso_providersInputSchema) ]),
}).strict();

export const sso_domainsUpdateWithWhereUniqueWithoutSso_providersInputSchema: z.ZodType<Prisma.sso_domainsUpdateWithWhereUniqueWithoutSso_providersInput> = z.object({
  where: z.lazy(() => sso_domainsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => sso_domainsUpdateWithoutSso_providersInputSchema),z.lazy(() => sso_domainsUncheckedUpdateWithoutSso_providersInputSchema) ]),
}).strict();

export const sso_domainsUpdateManyWithWhereWithoutSso_providersInputSchema: z.ZodType<Prisma.sso_domainsUpdateManyWithWhereWithoutSso_providersInput> = z.object({
  where: z.lazy(() => sso_domainsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => sso_domainsUpdateManyMutationInputSchema),z.lazy(() => sso_domainsUncheckedUpdateManyWithoutSso_providersInputSchema) ]),
}).strict();

export const sso_domainsScalarWhereInputSchema: z.ZodType<Prisma.sso_domainsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => sso_domainsScalarWhereInputSchema),z.lazy(() => sso_domainsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => sso_domainsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sso_domainsScalarWhereInputSchema),z.lazy(() => sso_domainsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  sso_provider_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  domain: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const identitiesCreateWithoutUsersInputSchema: z.ZodType<Prisma.identitiesCreateWithoutUsersInput> = z.object({
  provider_id: z.string(),
  identity_data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  provider: z.string(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  id: z.string().optional()
}).strict();

export const identitiesUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.identitiesUncheckedCreateWithoutUsersInput> = z.object({
  provider_id: z.string(),
  identity_data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  provider: z.string(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  id: z.string().optional()
}).strict();

export const identitiesCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.identitiesCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => identitiesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => identitiesCreateWithoutUsersInputSchema),z.lazy(() => identitiesUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const identitiesCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.identitiesCreateManyUsersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => identitiesCreateManyUsersInputSchema),z.lazy(() => identitiesCreateManyUsersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const mfa_factorsCreateWithoutUsersInputSchema: z.ZodType<Prisma.mfa_factorsCreateWithoutUsersInput> = z.object({
  id: z.string(),
  friendly_name: z.string().optional().nullable(),
  factor_type: z.lazy(() => factor_typeSchema),
  status: z.lazy(() => factor_statusSchema),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  secret: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  last_challenged_at: z.coerce.date().optional().nullable(),
  web_authn_credential: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  web_authn_aaguid: z.string().optional().nullable(),
  mfa_challenges: z.lazy(() => mfa_challengesCreateNestedManyWithoutMfa_factorsInputSchema).optional()
}).strict();

export const mfa_factorsUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.mfa_factorsUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string(),
  friendly_name: z.string().optional().nullable(),
  factor_type: z.lazy(() => factor_typeSchema),
  status: z.lazy(() => factor_statusSchema),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  secret: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  last_challenged_at: z.coerce.date().optional().nullable(),
  web_authn_credential: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  web_authn_aaguid: z.string().optional().nullable(),
  mfa_challenges: z.lazy(() => mfa_challengesUncheckedCreateNestedManyWithoutMfa_factorsInputSchema).optional()
}).strict();

export const mfa_factorsCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.mfa_factorsCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => mfa_factorsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => mfa_factorsCreateWithoutUsersInputSchema),z.lazy(() => mfa_factorsUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const mfa_factorsCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.mfa_factorsCreateManyUsersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => mfa_factorsCreateManyUsersInputSchema),z.lazy(() => mfa_factorsCreateManyUsersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const one_time_tokensCreateWithoutUsersInputSchema: z.ZodType<Prisma.one_time_tokensCreateWithoutUsersInput> = z.object({
  id: z.string(),
  token_type: z.lazy(() => one_time_token_typeSchema),
  token_hash: z.string(),
  relates_to: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const one_time_tokensUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.one_time_tokensUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string(),
  token_type: z.lazy(() => one_time_token_typeSchema),
  token_hash: z.string(),
  relates_to: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const one_time_tokensCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.one_time_tokensCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => one_time_tokensWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => one_time_tokensCreateWithoutUsersInputSchema),z.lazy(() => one_time_tokensUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const one_time_tokensCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.one_time_tokensCreateManyUsersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => one_time_tokensCreateManyUsersInputSchema),z.lazy(() => one_time_tokensCreateManyUsersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const sessionsCreateWithoutUsersInputSchema: z.ZodType<Prisma.sessionsCreateWithoutUsersInput> = z.object({
  id: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  factor_id: z.string().optional().nullable(),
  aal: z.lazy(() => aal_levelSchema).optional().nullable(),
  not_after: z.coerce.date().optional().nullable(),
  refreshed_at: z.coerce.date().optional().nullable(),
  user_agent: z.string().optional().nullable(),
  ip: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  mfa_amr_claims: z.lazy(() => mfa_amr_claimsCreateNestedManyWithoutSessionsInputSchema).optional(),
  refresh_tokens: z.lazy(() => refresh_tokensCreateNestedManyWithoutSessionsInputSchema).optional()
}).strict();

export const sessionsUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.sessionsUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  factor_id: z.string().optional().nullable(),
  aal: z.lazy(() => aal_levelSchema).optional().nullable(),
  not_after: z.coerce.date().optional().nullable(),
  refreshed_at: z.coerce.date().optional().nullable(),
  user_agent: z.string().optional().nullable(),
  ip: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  mfa_amr_claims: z.lazy(() => mfa_amr_claimsUncheckedCreateNestedManyWithoutSessionsInputSchema).optional(),
  refresh_tokens: z.lazy(() => refresh_tokensUncheckedCreateNestedManyWithoutSessionsInputSchema).optional()
}).strict();

export const sessionsCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.sessionsCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => sessionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => sessionsCreateWithoutUsersInputSchema),z.lazy(() => sessionsUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const sessionsCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.sessionsCreateManyUsersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => sessionsCreateManyUsersInputSchema),z.lazy(() => sessionsCreateManyUsersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const categoriesCreateWithoutUsersInputSchema: z.ZodType<Prisma.categoriesCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  color: z.string().optional().nullable(),
  image: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  stores: z.lazy(() => storesCreateNestedOneWithoutCategoriesInputSchema).optional(),
  products: z.lazy(() => productsCreateNestedManyWithoutCategoriesInputSchema).optional()
}).strict();

export const categoriesUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.categoriesUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  color: z.string().optional().nullable(),
  image: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutCategoriesInputSchema).optional()
}).strict();

export const categoriesCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.categoriesCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => categoriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => categoriesCreateWithoutUsersInputSchema),z.lazy(() => categoriesUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const categoriesCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.categoriesCreateManyUsersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => categoriesCreateManyUsersInputSchema),z.lazy(() => categoriesCreateManyUsersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const controller_adminsCreateWithoutUsersInputSchema: z.ZodType<Prisma.controller_adminsCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  email: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const controller_adminsUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.controller_adminsUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  email: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const controller_adminsCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.controller_adminsCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => controller_adminsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => controller_adminsCreateWithoutUsersInputSchema),z.lazy(() => controller_adminsUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const customersCreateWithoutUsersInputSchema: z.ZodType<Prisma.customersCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  stores: z.lazy(() => storesCreateNestedOneWithoutCustomersInputSchema).optional(),
  orders: z.lazy(() => ordersCreateNestedManyWithoutCustomersInputSchema).optional()
}).strict();

export const customersUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.customersUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutCustomersInputSchema).optional()
}).strict();

export const customersCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.customersCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => customersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => customersCreateWithoutUsersInputSchema),z.lazy(() => customersUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const customersCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.customersCreateManyUsersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => customersCreateManyUsersInputSchema),z.lazy(() => customersCreateManyUsersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const domain_ownersCreateWithoutUsersInputSchema: z.ZodType<Prisma.domain_ownersCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  domain: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  domain_type: z.string().optional()
}).strict();

export const domain_ownersUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.domain_ownersUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  domain: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  domain_type: z.string().optional()
}).strict();

export const domain_ownersCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.domain_ownersCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => domain_ownersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => domain_ownersCreateWithoutUsersInputSchema),z.lazy(() => domain_ownersUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const domain_ownersCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.domain_ownersCreateManyUsersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => domain_ownersCreateManyUsersInputSchema),z.lazy(() => domain_ownersCreateManyUsersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ordersCreateWithoutUsersInputSchema: z.ZodType<Prisma.ordersCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  customer_name: z.string(),
  customer_email: z.string().optional().nullable(),
  customer_phone: z.string().optional().nullable(),
  total_amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  order_items: z.lazy(() => order_itemsCreateNestedManyWithoutOrdersInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedOneWithoutOrdersInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedOneWithoutOrdersInputSchema).optional()
}).strict();

export const ordersUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.ordersUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  customer_id: z.string().optional().nullable(),
  customer_name: z.string(),
  customer_email: z.string().optional().nullable(),
  customer_phone: z.string().optional().nullable(),
  total_amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable(),
  order_items: z.lazy(() => order_itemsUncheckedCreateNestedManyWithoutOrdersInputSchema).optional()
}).strict();

export const ordersCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.ordersCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => ordersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ordersCreateWithoutUsersInputSchema),z.lazy(() => ordersUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const ordersCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.ordersCreateManyUsersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ordersCreateManyUsersInputSchema),z.lazy(() => ordersCreateManyUsersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const productsCreateWithoutUsersInputSchema: z.ZodType<Prisma.productsCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  stock: z.number().int().optional(),
  is_active: z.boolean().optional().nullable(),
  image: z.string().optional().nullable(),
  images: z.union([ z.lazy(() => productsCreateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  order_items: z.lazy(() => order_itemsCreateNestedManyWithoutProductsInputSchema).optional(),
  categories: z.lazy(() => categoriesCreateNestedOneWithoutProductsInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedOneWithoutProductsInputSchema).optional()
}).strict();

export const productsUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.productsUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  category_id: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  stock: z.number().int().optional(),
  is_active: z.boolean().optional().nullable(),
  image: z.string().optional().nullable(),
  images: z.union([ z.lazy(() => productsCreateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable(),
  order_items: z.lazy(() => order_itemsUncheckedCreateNestedManyWithoutProductsInputSchema).optional()
}).strict();

export const productsCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.productsCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => productsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => productsCreateWithoutUsersInputSchema),z.lazy(() => productsUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const productsCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.productsCreateManyUsersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => productsCreateManyUsersInputSchema),z.lazy(() => productsCreateManyUsersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const profilesCreateWithoutUsersInputSchema: z.ZodType<Prisma.profilesCreateWithoutUsersInput> = z.object({
  email: z.string(),
  full_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable()
}).strict();

export const profilesUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.profilesUncheckedCreateWithoutUsersInput> = z.object({
  email: z.string(),
  full_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable()
}).strict();

export const profilesCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.profilesCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => profilesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => profilesCreateWithoutUsersInputSchema),z.lazy(() => profilesUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const store_settingsCreateWithoutUsersInputSchema: z.ZodType<Prisma.store_settingsCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  store_name: z.string().optional(),
  store_description: z.string().optional().nullable(),
  mobile_logo: z.string().optional().nullable(),
  desktop_banner: z.string().optional().nullable(),
  mobile_banner_color: z.string().optional().nullable(),
  mobile_banner_image: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_subtitle: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable()
}).strict();

export const store_settingsUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.store_settingsUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  store_name: z.string().optional(),
  store_description: z.string().optional().nullable(),
  mobile_logo: z.string().optional().nullable(),
  desktop_banner: z.string().optional().nullable(),
  mobile_banner_color: z.string().optional().nullable(),
  mobile_banner_image: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_subtitle: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable()
}).strict();

export const store_settingsCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.store_settingsCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => store_settingsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => store_settingsCreateWithoutUsersInputSchema),z.lazy(() => store_settingsUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const storesCreateWithoutUsersInputSchema: z.ZodType<Prisma.storesCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  domain: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  logo_url: z.string().optional().nullable(),
  banner_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  theme_color: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  categories: z.lazy(() => categoriesCreateNestedManyWithoutStoresInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedManyWithoutStoresInputSchema).optional(),
  orders: z.lazy(() => ordersCreateNestedManyWithoutStoresInputSchema).optional(),
  products: z.lazy(() => productsCreateNestedManyWithoutStoresInputSchema).optional(),
  sales: z.lazy(() => salesCreateNestedManyWithoutStoresInputSchema).optional()
}).strict();

export const storesUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.storesUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  domain: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  logo_url: z.string().optional().nullable(),
  banner_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  theme_color: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  categories: z.lazy(() => categoriesUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  sales: z.lazy(() => salesUncheckedCreateNestedManyWithoutStoresInputSchema).optional()
}).strict();

export const storesCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.storesCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => storesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => storesCreateWithoutUsersInputSchema),z.lazy(() => storesUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const storesCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.storesCreateManyUsersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => storesCreateManyUsersInputSchema),z.lazy(() => storesCreateManyUsersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const identitiesUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.identitiesUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => identitiesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => identitiesUpdateWithoutUsersInputSchema),z.lazy(() => identitiesUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => identitiesCreateWithoutUsersInputSchema),z.lazy(() => identitiesUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const identitiesUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.identitiesUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => identitiesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => identitiesUpdateWithoutUsersInputSchema),z.lazy(() => identitiesUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const identitiesUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.identitiesUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => identitiesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => identitiesUpdateManyMutationInputSchema),z.lazy(() => identitiesUncheckedUpdateManyWithoutUsersInputSchema) ]),
}).strict();

export const identitiesScalarWhereInputSchema: z.ZodType<Prisma.identitiesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => identitiesScalarWhereInputSchema),z.lazy(() => identitiesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => identitiesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => identitiesScalarWhereInputSchema),z.lazy(() => identitiesScalarWhereInputSchema).array() ]).optional(),
  provider_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  identity_data: z.lazy(() => JsonFilterSchema).optional(),
  provider: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  last_sign_in_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
}).strict();

export const mfa_factorsUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.mfa_factorsUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => mfa_factorsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => mfa_factorsUpdateWithoutUsersInputSchema),z.lazy(() => mfa_factorsUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => mfa_factorsCreateWithoutUsersInputSchema),z.lazy(() => mfa_factorsUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const mfa_factorsUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.mfa_factorsUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => mfa_factorsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => mfa_factorsUpdateWithoutUsersInputSchema),z.lazy(() => mfa_factorsUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const mfa_factorsUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.mfa_factorsUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => mfa_factorsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => mfa_factorsUpdateManyMutationInputSchema),z.lazy(() => mfa_factorsUncheckedUpdateManyWithoutUsersInputSchema) ]),
}).strict();

export const mfa_factorsScalarWhereInputSchema: z.ZodType<Prisma.mfa_factorsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => mfa_factorsScalarWhereInputSchema),z.lazy(() => mfa_factorsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => mfa_factorsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => mfa_factorsScalarWhereInputSchema),z.lazy(() => mfa_factorsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  friendly_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  factor_type: z.union([ z.lazy(() => Enumfactor_typeFilterSchema),z.lazy(() => factor_typeSchema) ]).optional(),
  status: z.union([ z.lazy(() => Enumfactor_statusFilterSchema),z.lazy(() => factor_statusSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  secret: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  last_challenged_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  web_authn_credential: z.lazy(() => JsonNullableFilterSchema).optional(),
  web_authn_aaguid: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const one_time_tokensUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.one_time_tokensUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => one_time_tokensWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => one_time_tokensUpdateWithoutUsersInputSchema),z.lazy(() => one_time_tokensUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => one_time_tokensCreateWithoutUsersInputSchema),z.lazy(() => one_time_tokensUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const one_time_tokensUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.one_time_tokensUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => one_time_tokensWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => one_time_tokensUpdateWithoutUsersInputSchema),z.lazy(() => one_time_tokensUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const one_time_tokensUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.one_time_tokensUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => one_time_tokensScalarWhereInputSchema),
  data: z.union([ z.lazy(() => one_time_tokensUpdateManyMutationInputSchema),z.lazy(() => one_time_tokensUncheckedUpdateManyWithoutUsersInputSchema) ]),
}).strict();

export const one_time_tokensScalarWhereInputSchema: z.ZodType<Prisma.one_time_tokensScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => one_time_tokensScalarWhereInputSchema),z.lazy(() => one_time_tokensScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => one_time_tokensScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => one_time_tokensScalarWhereInputSchema),z.lazy(() => one_time_tokensScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  token_type: z.union([ z.lazy(() => Enumone_time_token_typeFilterSchema),z.lazy(() => one_time_token_typeSchema) ]).optional(),
  token_hash: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  relates_to: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const sessionsUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.sessionsUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => sessionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => sessionsUpdateWithoutUsersInputSchema),z.lazy(() => sessionsUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => sessionsCreateWithoutUsersInputSchema),z.lazy(() => sessionsUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const sessionsUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.sessionsUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => sessionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => sessionsUpdateWithoutUsersInputSchema),z.lazy(() => sessionsUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const sessionsUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.sessionsUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => sessionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => sessionsUpdateManyMutationInputSchema),z.lazy(() => sessionsUncheckedUpdateManyWithoutUsersInputSchema) ]),
}).strict();

export const sessionsScalarWhereInputSchema: z.ZodType<Prisma.sessionsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => sessionsScalarWhereInputSchema),z.lazy(() => sessionsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => sessionsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sessionsScalarWhereInputSchema),z.lazy(() => sessionsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  factor_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  aal: z.union([ z.lazy(() => Enumaal_levelNullableFilterSchema),z.lazy(() => aal_levelSchema) ]).optional().nullable(),
  not_after: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  user_agent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tag: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const categoriesUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.categoriesUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => categoriesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => categoriesUpdateWithoutUsersInputSchema),z.lazy(() => categoriesUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => categoriesCreateWithoutUsersInputSchema),z.lazy(() => categoriesUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const categoriesUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.categoriesUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => categoriesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => categoriesUpdateWithoutUsersInputSchema),z.lazy(() => categoriesUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const categoriesUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.categoriesUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => categoriesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => categoriesUpdateManyMutationInputSchema),z.lazy(() => categoriesUncheckedUpdateManyWithoutUsersInputSchema) ]),
}).strict();

export const categoriesScalarWhereInputSchema: z.ZodType<Prisma.categoriesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => categoriesScalarWhereInputSchema),z.lazy(() => categoriesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => categoriesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => categoriesScalarWhereInputSchema),z.lazy(() => categoriesScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const controller_adminsUpsertWithoutUsersInputSchema: z.ZodType<Prisma.controller_adminsUpsertWithoutUsersInput> = z.object({
  update: z.union([ z.lazy(() => controller_adminsUpdateWithoutUsersInputSchema),z.lazy(() => controller_adminsUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => controller_adminsCreateWithoutUsersInputSchema),z.lazy(() => controller_adminsUncheckedCreateWithoutUsersInputSchema) ]),
  where: z.lazy(() => controller_adminsWhereInputSchema).optional()
}).strict();

export const controller_adminsUpdateToOneWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.controller_adminsUpdateToOneWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => controller_adminsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => controller_adminsUpdateWithoutUsersInputSchema),z.lazy(() => controller_adminsUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const controller_adminsUpdateWithoutUsersInputSchema: z.ZodType<Prisma.controller_adminsUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const controller_adminsUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.controller_adminsUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const customersUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.customersUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => customersWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => customersUpdateWithoutUsersInputSchema),z.lazy(() => customersUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => customersCreateWithoutUsersInputSchema),z.lazy(() => customersUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const customersUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.customersUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => customersWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => customersUpdateWithoutUsersInputSchema),z.lazy(() => customersUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const customersUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.customersUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => customersScalarWhereInputSchema),
  data: z.union([ z.lazy(() => customersUpdateManyMutationInputSchema),z.lazy(() => customersUncheckedUpdateManyWithoutUsersInputSchema) ]),
}).strict();

export const customersScalarWhereInputSchema: z.ZodType<Prisma.customersScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => customersScalarWhereInputSchema),z.lazy(() => customersScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => customersScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => customersScalarWhereInputSchema),z.lazy(() => customersScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  store_owner_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const domain_ownersUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.domain_ownersUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => domain_ownersWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => domain_ownersUpdateWithoutUsersInputSchema),z.lazy(() => domain_ownersUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => domain_ownersCreateWithoutUsersInputSchema),z.lazy(() => domain_ownersUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const domain_ownersUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.domain_ownersUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => domain_ownersWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => domain_ownersUpdateWithoutUsersInputSchema),z.lazy(() => domain_ownersUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const domain_ownersUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.domain_ownersUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => domain_ownersScalarWhereInputSchema),
  data: z.union([ z.lazy(() => domain_ownersUpdateManyMutationInputSchema),z.lazy(() => domain_ownersUncheckedUpdateManyWithoutUsersInputSchema) ]),
}).strict();

export const domain_ownersScalarWhereInputSchema: z.ZodType<Prisma.domain_ownersScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => domain_ownersScalarWhereInputSchema),z.lazy(() => domain_ownersScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => domain_ownersScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => domain_ownersScalarWhereInputSchema),z.lazy(() => domain_ownersScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  domain: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  domain_type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const ordersUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.ordersUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => ordersWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ordersUpdateWithoutUsersInputSchema),z.lazy(() => ordersUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => ordersCreateWithoutUsersInputSchema),z.lazy(() => ordersUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const ordersUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.ordersUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => ordersWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ordersUpdateWithoutUsersInputSchema),z.lazy(() => ordersUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const ordersUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.ordersUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => ordersScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ordersUpdateManyMutationInputSchema),z.lazy(() => ordersUncheckedUpdateManyWithoutUsersInputSchema) ]),
}).strict();

export const ordersScalarWhereInputSchema: z.ZodType<Prisma.ordersScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ordersScalarWhereInputSchema),z.lazy(() => ordersScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ordersScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ordersScalarWhereInputSchema),z.lazy(() => ordersScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  store_owner_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  customer_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  customer_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customer_email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  customer_phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  total_amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const productsUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.productsUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => productsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => productsUpdateWithoutUsersInputSchema),z.lazy(() => productsUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => productsCreateWithoutUsersInputSchema),z.lazy(() => productsUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const productsUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.productsUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => productsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => productsUpdateWithoutUsersInputSchema),z.lazy(() => productsUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const productsUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.productsUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => productsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => productsUpdateManyMutationInputSchema),z.lazy(() => productsUncheckedUpdateManyWithoutUsersInputSchema) ]),
}).strict();

export const productsScalarWhereInputSchema: z.ZodType<Prisma.productsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => productsScalarWhereInputSchema),z.lazy(() => productsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => productsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => productsScalarWhereInputSchema),z.lazy(() => productsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  category_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  stock: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  is_active: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  images: z.lazy(() => StringNullableListFilterSchema).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const profilesUpsertWithoutUsersInputSchema: z.ZodType<Prisma.profilesUpsertWithoutUsersInput> = z.object({
  update: z.union([ z.lazy(() => profilesUpdateWithoutUsersInputSchema),z.lazy(() => profilesUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => profilesCreateWithoutUsersInputSchema),z.lazy(() => profilesUncheckedCreateWithoutUsersInputSchema) ]),
  where: z.lazy(() => profilesWhereInputSchema).optional()
}).strict();

export const profilesUpdateToOneWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.profilesUpdateToOneWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => profilesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => profilesUpdateWithoutUsersInputSchema),z.lazy(() => profilesUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const profilesUpdateWithoutUsersInputSchema: z.ZodType<Prisma.profilesUpdateWithoutUsersInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  full_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const profilesUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.profilesUncheckedUpdateWithoutUsersInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  full_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const store_settingsUpsertWithoutUsersInputSchema: z.ZodType<Prisma.store_settingsUpsertWithoutUsersInput> = z.object({
  update: z.union([ z.lazy(() => store_settingsUpdateWithoutUsersInputSchema),z.lazy(() => store_settingsUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => store_settingsCreateWithoutUsersInputSchema),z.lazy(() => store_settingsUncheckedCreateWithoutUsersInputSchema) ]),
  where: z.lazy(() => store_settingsWhereInputSchema).optional()
}).strict();

export const store_settingsUpdateToOneWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.store_settingsUpdateToOneWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => store_settingsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => store_settingsUpdateWithoutUsersInputSchema),z.lazy(() => store_settingsUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const store_settingsUpdateWithoutUsersInputSchema: z.ZodType<Prisma.store_settingsUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile_logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  desktop_banner: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile_banner_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile_banner_image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_subtitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const store_settingsUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.store_settingsUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile_logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  desktop_banner: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile_banner_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile_banner_image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_subtitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const storesUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.storesUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => storesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => storesUpdateWithoutUsersInputSchema),z.lazy(() => storesUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => storesCreateWithoutUsersInputSchema),z.lazy(() => storesUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const storesUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.storesUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => storesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => storesUpdateWithoutUsersInputSchema),z.lazy(() => storesUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const storesUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.storesUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => storesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => storesUpdateManyMutationInputSchema),z.lazy(() => storesUncheckedUpdateManyWithoutUsersInputSchema) ]),
}).strict();

export const storesScalarWhereInputSchema: z.ZodType<Prisma.storesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => storesScalarWhereInputSchema),z.lazy(() => storesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => storesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => storesScalarWhereInputSchema),z.lazy(() => storesScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  domain: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  logo_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  banner_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  whatsapp_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  instagram_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  theme_color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const storesCreateWithoutCategoriesInputSchema: z.ZodType<Prisma.storesCreateWithoutCategoriesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  domain: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  logo_url: z.string().optional().nullable(),
  banner_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  theme_color: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  customers: z.lazy(() => customersCreateNestedManyWithoutStoresInputSchema).optional(),
  orders: z.lazy(() => ordersCreateNestedManyWithoutStoresInputSchema).optional(),
  products: z.lazy(() => productsCreateNestedManyWithoutStoresInputSchema).optional(),
  sales: z.lazy(() => salesCreateNestedManyWithoutStoresInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutStoresInputSchema)
}).strict();

export const storesUncheckedCreateWithoutCategoriesInputSchema: z.ZodType<Prisma.storesUncheckedCreateWithoutCategoriesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  domain: z.string().optional().nullable(),
  user_id: z.string(),
  description: z.string().optional().nullable(),
  logo_url: z.string().optional().nullable(),
  banner_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  theme_color: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  customers: z.lazy(() => customersUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  sales: z.lazy(() => salesUncheckedCreateNestedManyWithoutStoresInputSchema).optional()
}).strict();

export const storesCreateOrConnectWithoutCategoriesInputSchema: z.ZodType<Prisma.storesCreateOrConnectWithoutCategoriesInput> = z.object({
  where: z.lazy(() => storesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => storesCreateWithoutCategoriesInputSchema),z.lazy(() => storesUncheckedCreateWithoutCategoriesInputSchema) ]),
}).strict();

export const usersCreateWithoutCategoriesInputSchema: z.ZodType<Prisma.usersCreateWithoutCategoriesInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutCategoriesInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutCategoriesInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutCategoriesInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutCategoriesInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutCategoriesInputSchema),z.lazy(() => usersUncheckedCreateWithoutCategoriesInputSchema) ]),
}).strict();

export const productsCreateWithoutCategoriesInputSchema: z.ZodType<Prisma.productsCreateWithoutCategoriesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  stock: z.number().int().optional(),
  is_active: z.boolean().optional().nullable(),
  image: z.string().optional().nullable(),
  images: z.union([ z.lazy(() => productsCreateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  order_items: z.lazy(() => order_itemsCreateNestedManyWithoutProductsInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedOneWithoutProductsInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutProductsInputSchema)
}).strict();

export const productsUncheckedCreateWithoutCategoriesInputSchema: z.ZodType<Prisma.productsUncheckedCreateWithoutCategoriesInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  stock: z.number().int().optional(),
  is_active: z.boolean().optional().nullable(),
  image: z.string().optional().nullable(),
  images: z.union([ z.lazy(() => productsCreateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable(),
  order_items: z.lazy(() => order_itemsUncheckedCreateNestedManyWithoutProductsInputSchema).optional()
}).strict();

export const productsCreateOrConnectWithoutCategoriesInputSchema: z.ZodType<Prisma.productsCreateOrConnectWithoutCategoriesInput> = z.object({
  where: z.lazy(() => productsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => productsCreateWithoutCategoriesInputSchema),z.lazy(() => productsUncheckedCreateWithoutCategoriesInputSchema) ]),
}).strict();

export const productsCreateManyCategoriesInputEnvelopeSchema: z.ZodType<Prisma.productsCreateManyCategoriesInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => productsCreateManyCategoriesInputSchema),z.lazy(() => productsCreateManyCategoriesInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const storesUpsertWithoutCategoriesInputSchema: z.ZodType<Prisma.storesUpsertWithoutCategoriesInput> = z.object({
  update: z.union([ z.lazy(() => storesUpdateWithoutCategoriesInputSchema),z.lazy(() => storesUncheckedUpdateWithoutCategoriesInputSchema) ]),
  create: z.union([ z.lazy(() => storesCreateWithoutCategoriesInputSchema),z.lazy(() => storesUncheckedCreateWithoutCategoriesInputSchema) ]),
  where: z.lazy(() => storesWhereInputSchema).optional()
}).strict();

export const storesUpdateToOneWithWhereWithoutCategoriesInputSchema: z.ZodType<Prisma.storesUpdateToOneWithWhereWithoutCategoriesInput> = z.object({
  where: z.lazy(() => storesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => storesUpdateWithoutCategoriesInputSchema),z.lazy(() => storesUncheckedUpdateWithoutCategoriesInputSchema) ]),
}).strict();

export const storesUpdateWithoutCategoriesInputSchema: z.ZodType<Prisma.storesUpdateWithoutCategoriesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banner_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  theme_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customers: z.lazy(() => customersUpdateManyWithoutStoresNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutStoresNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutStoresNestedInputSchema).optional(),
  sales: z.lazy(() => salesUpdateManyWithoutStoresNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutStoresNestedInputSchema).optional()
}).strict();

export const storesUncheckedUpdateWithoutCategoriesInputSchema: z.ZodType<Prisma.storesUncheckedUpdateWithoutCategoriesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banner_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  theme_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customers: z.lazy(() => customersUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  sales: z.lazy(() => salesUncheckedUpdateManyWithoutStoresNestedInputSchema).optional()
}).strict();

export const usersUpsertWithoutCategoriesInputSchema: z.ZodType<Prisma.usersUpsertWithoutCategoriesInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutCategoriesInputSchema),z.lazy(() => usersUncheckedUpdateWithoutCategoriesInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutCategoriesInputSchema),z.lazy(() => usersUncheckedCreateWithoutCategoriesInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutCategoriesInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutCategoriesInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutCategoriesInputSchema),z.lazy(() => usersUncheckedUpdateWithoutCategoriesInputSchema) ]),
}).strict();

export const usersUpdateWithoutCategoriesInputSchema: z.ZodType<Prisma.usersUpdateWithoutCategoriesInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutCategoriesInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutCategoriesInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const productsUpsertWithWhereUniqueWithoutCategoriesInputSchema: z.ZodType<Prisma.productsUpsertWithWhereUniqueWithoutCategoriesInput> = z.object({
  where: z.lazy(() => productsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => productsUpdateWithoutCategoriesInputSchema),z.lazy(() => productsUncheckedUpdateWithoutCategoriesInputSchema) ]),
  create: z.union([ z.lazy(() => productsCreateWithoutCategoriesInputSchema),z.lazy(() => productsUncheckedCreateWithoutCategoriesInputSchema) ]),
}).strict();

export const productsUpdateWithWhereUniqueWithoutCategoriesInputSchema: z.ZodType<Prisma.productsUpdateWithWhereUniqueWithoutCategoriesInput> = z.object({
  where: z.lazy(() => productsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => productsUpdateWithoutCategoriesInputSchema),z.lazy(() => productsUncheckedUpdateWithoutCategoriesInputSchema) ]),
}).strict();

export const productsUpdateManyWithWhereWithoutCategoriesInputSchema: z.ZodType<Prisma.productsUpdateManyWithWhereWithoutCategoriesInput> = z.object({
  where: z.lazy(() => productsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => productsUpdateManyMutationInputSchema),z.lazy(() => productsUncheckedUpdateManyWithoutCategoriesInputSchema) ]),
}).strict();

export const usersCreateWithoutController_adminsInputSchema: z.ZodType<Prisma.usersCreateWithoutController_adminsInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesCreateNestedManyWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutController_adminsInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutController_adminsInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutController_adminsInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutController_adminsInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutController_adminsInputSchema),z.lazy(() => usersUncheckedCreateWithoutController_adminsInputSchema) ]),
}).strict();

export const usersUpsertWithoutController_adminsInputSchema: z.ZodType<Prisma.usersUpsertWithoutController_adminsInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutController_adminsInputSchema),z.lazy(() => usersUncheckedUpdateWithoutController_adminsInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutController_adminsInputSchema),z.lazy(() => usersUncheckedCreateWithoutController_adminsInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutController_adminsInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutController_adminsInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutController_adminsInputSchema),z.lazy(() => usersUncheckedUpdateWithoutController_adminsInputSchema) ]),
}).strict();

export const usersUpdateWithoutController_adminsInputSchema: z.ZodType<Prisma.usersUpdateWithoutController_adminsInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUpdateManyWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutController_adminsInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutController_adminsInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const credit_transactionsCreateWithoutCredit_accountsInputSchema: z.ZodType<Prisma.credit_transactionsCreateWithoutCredit_accountsInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  created_at: z.coerce.date().optional()
}).strict();

export const credit_transactionsUncheckedCreateWithoutCredit_accountsInputSchema: z.ZodType<Prisma.credit_transactionsUncheckedCreateWithoutCredit_accountsInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  created_at: z.coerce.date().optional()
}).strict();

export const credit_transactionsCreateOrConnectWithoutCredit_accountsInputSchema: z.ZodType<Prisma.credit_transactionsCreateOrConnectWithoutCredit_accountsInput> = z.object({
  where: z.lazy(() => credit_transactionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => credit_transactionsCreateWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsUncheckedCreateWithoutCredit_accountsInputSchema) ]),
}).strict();

export const credit_transactionsCreateManyCredit_accountsInputEnvelopeSchema: z.ZodType<Prisma.credit_transactionsCreateManyCredit_accountsInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => credit_transactionsCreateManyCredit_accountsInputSchema),z.lazy(() => credit_transactionsCreateManyCredit_accountsInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const credit_transactionsUpsertWithWhereUniqueWithoutCredit_accountsInputSchema: z.ZodType<Prisma.credit_transactionsUpsertWithWhereUniqueWithoutCredit_accountsInput> = z.object({
  where: z.lazy(() => credit_transactionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => credit_transactionsUpdateWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsUncheckedUpdateWithoutCredit_accountsInputSchema) ]),
  create: z.union([ z.lazy(() => credit_transactionsCreateWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsUncheckedCreateWithoutCredit_accountsInputSchema) ]),
}).strict();

export const credit_transactionsUpdateWithWhereUniqueWithoutCredit_accountsInputSchema: z.ZodType<Prisma.credit_transactionsUpdateWithWhereUniqueWithoutCredit_accountsInput> = z.object({
  where: z.lazy(() => credit_transactionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => credit_transactionsUpdateWithoutCredit_accountsInputSchema),z.lazy(() => credit_transactionsUncheckedUpdateWithoutCredit_accountsInputSchema) ]),
}).strict();

export const credit_transactionsUpdateManyWithWhereWithoutCredit_accountsInputSchema: z.ZodType<Prisma.credit_transactionsUpdateManyWithWhereWithoutCredit_accountsInput> = z.object({
  where: z.lazy(() => credit_transactionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => credit_transactionsUpdateManyMutationInputSchema),z.lazy(() => credit_transactionsUncheckedUpdateManyWithoutCredit_accountsInputSchema) ]),
}).strict();

export const credit_transactionsScalarWhereInputSchema: z.ZodType<Prisma.credit_transactionsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => credit_transactionsScalarWhereInputSchema),z.lazy(() => credit_transactionsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => credit_transactionsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => credit_transactionsScalarWhereInputSchema),z.lazy(() => credit_transactionsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  credit_account_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const credit_accountsCreateWithoutCredit_transactionsInputSchema: z.ZodType<Prisma.credit_accountsCreateWithoutCredit_transactionsInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  store_id: z.string().optional().nullable(),
  customer_name: z.string(),
  customer_phone: z.string().optional().nullable(),
  total_debt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  status: z.string().optional()
}).strict();

export const credit_accountsUncheckedCreateWithoutCredit_transactionsInputSchema: z.ZodType<Prisma.credit_accountsUncheckedCreateWithoutCredit_transactionsInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  store_id: z.string().optional().nullable(),
  customer_name: z.string(),
  customer_phone: z.string().optional().nullable(),
  total_debt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  status: z.string().optional()
}).strict();

export const credit_accountsCreateOrConnectWithoutCredit_transactionsInputSchema: z.ZodType<Prisma.credit_accountsCreateOrConnectWithoutCredit_transactionsInput> = z.object({
  where: z.lazy(() => credit_accountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => credit_accountsCreateWithoutCredit_transactionsInputSchema),z.lazy(() => credit_accountsUncheckedCreateWithoutCredit_transactionsInputSchema) ]),
}).strict();

export const credit_accountsUpsertWithoutCredit_transactionsInputSchema: z.ZodType<Prisma.credit_accountsUpsertWithoutCredit_transactionsInput> = z.object({
  update: z.union([ z.lazy(() => credit_accountsUpdateWithoutCredit_transactionsInputSchema),z.lazy(() => credit_accountsUncheckedUpdateWithoutCredit_transactionsInputSchema) ]),
  create: z.union([ z.lazy(() => credit_accountsCreateWithoutCredit_transactionsInputSchema),z.lazy(() => credit_accountsUncheckedCreateWithoutCredit_transactionsInputSchema) ]),
  where: z.lazy(() => credit_accountsWhereInputSchema).optional()
}).strict();

export const credit_accountsUpdateToOneWithWhereWithoutCredit_transactionsInputSchema: z.ZodType<Prisma.credit_accountsUpdateToOneWithWhereWithoutCredit_transactionsInput> = z.object({
  where: z.lazy(() => credit_accountsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => credit_accountsUpdateWithoutCredit_transactionsInputSchema),z.lazy(() => credit_accountsUncheckedUpdateWithoutCredit_transactionsInputSchema) ]),
}).strict();

export const credit_accountsUpdateWithoutCredit_transactionsInputSchema: z.ZodType<Prisma.credit_accountsUpdateWithoutCredit_transactionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_debt: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const credit_accountsUncheckedUpdateWithoutCredit_transactionsInputSchema: z.ZodType<Prisma.credit_accountsUncheckedUpdateWithoutCredit_transactionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_debt: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const storesCreateWithoutCustomersInputSchema: z.ZodType<Prisma.storesCreateWithoutCustomersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  domain: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  logo_url: z.string().optional().nullable(),
  banner_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  theme_color: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  categories: z.lazy(() => categoriesCreateNestedManyWithoutStoresInputSchema).optional(),
  orders: z.lazy(() => ordersCreateNestedManyWithoutStoresInputSchema).optional(),
  products: z.lazy(() => productsCreateNestedManyWithoutStoresInputSchema).optional(),
  sales: z.lazy(() => salesCreateNestedManyWithoutStoresInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutStoresInputSchema)
}).strict();

export const storesUncheckedCreateWithoutCustomersInputSchema: z.ZodType<Prisma.storesUncheckedCreateWithoutCustomersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  domain: z.string().optional().nullable(),
  user_id: z.string(),
  description: z.string().optional().nullable(),
  logo_url: z.string().optional().nullable(),
  banner_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  theme_color: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  categories: z.lazy(() => categoriesUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  sales: z.lazy(() => salesUncheckedCreateNestedManyWithoutStoresInputSchema).optional()
}).strict();

export const storesCreateOrConnectWithoutCustomersInputSchema: z.ZodType<Prisma.storesCreateOrConnectWithoutCustomersInput> = z.object({
  where: z.lazy(() => storesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => storesCreateWithoutCustomersInputSchema),z.lazy(() => storesUncheckedCreateWithoutCustomersInputSchema) ]),
}).strict();

export const usersCreateWithoutCustomersInputSchema: z.ZodType<Prisma.usersCreateWithoutCustomersInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsCreateNestedOneWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutCustomersInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutCustomersInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutCustomersInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutCustomersInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutCustomersInputSchema),z.lazy(() => usersUncheckedCreateWithoutCustomersInputSchema) ]),
}).strict();

export const ordersCreateWithoutCustomersInputSchema: z.ZodType<Prisma.ordersCreateWithoutCustomersInput> = z.object({
  id: z.string().optional(),
  customer_name: z.string(),
  customer_email: z.string().optional().nullable(),
  customer_phone: z.string().optional().nullable(),
  total_amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  order_items: z.lazy(() => order_itemsCreateNestedManyWithoutOrdersInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedOneWithoutOrdersInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutOrdersInputSchema)
}).strict();

export const ordersUncheckedCreateWithoutCustomersInputSchema: z.ZodType<Prisma.ordersUncheckedCreateWithoutCustomersInput> = z.object({
  id: z.string().optional(),
  store_owner_id: z.string(),
  customer_name: z.string(),
  customer_email: z.string().optional().nullable(),
  customer_phone: z.string().optional().nullable(),
  total_amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable(),
  order_items: z.lazy(() => order_itemsUncheckedCreateNestedManyWithoutOrdersInputSchema).optional()
}).strict();

export const ordersCreateOrConnectWithoutCustomersInputSchema: z.ZodType<Prisma.ordersCreateOrConnectWithoutCustomersInput> = z.object({
  where: z.lazy(() => ordersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ordersCreateWithoutCustomersInputSchema),z.lazy(() => ordersUncheckedCreateWithoutCustomersInputSchema) ]),
}).strict();

export const ordersCreateManyCustomersInputEnvelopeSchema: z.ZodType<Prisma.ordersCreateManyCustomersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ordersCreateManyCustomersInputSchema),z.lazy(() => ordersCreateManyCustomersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const storesUpsertWithoutCustomersInputSchema: z.ZodType<Prisma.storesUpsertWithoutCustomersInput> = z.object({
  update: z.union([ z.lazy(() => storesUpdateWithoutCustomersInputSchema),z.lazy(() => storesUncheckedUpdateWithoutCustomersInputSchema) ]),
  create: z.union([ z.lazy(() => storesCreateWithoutCustomersInputSchema),z.lazy(() => storesUncheckedCreateWithoutCustomersInputSchema) ]),
  where: z.lazy(() => storesWhereInputSchema).optional()
}).strict();

export const storesUpdateToOneWithWhereWithoutCustomersInputSchema: z.ZodType<Prisma.storesUpdateToOneWithWhereWithoutCustomersInput> = z.object({
  where: z.lazy(() => storesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => storesUpdateWithoutCustomersInputSchema),z.lazy(() => storesUncheckedUpdateWithoutCustomersInputSchema) ]),
}).strict();

export const storesUpdateWithoutCustomersInputSchema: z.ZodType<Prisma.storesUpdateWithoutCustomersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banner_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  theme_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categories: z.lazy(() => categoriesUpdateManyWithoutStoresNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutStoresNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutStoresNestedInputSchema).optional(),
  sales: z.lazy(() => salesUpdateManyWithoutStoresNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutStoresNestedInputSchema).optional()
}).strict();

export const storesUncheckedUpdateWithoutCustomersInputSchema: z.ZodType<Prisma.storesUncheckedUpdateWithoutCustomersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banner_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  theme_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categories: z.lazy(() => categoriesUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  sales: z.lazy(() => salesUncheckedUpdateManyWithoutStoresNestedInputSchema).optional()
}).strict();

export const usersUpsertWithoutCustomersInputSchema: z.ZodType<Prisma.usersUpsertWithoutCustomersInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutCustomersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutCustomersInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutCustomersInputSchema),z.lazy(() => usersUncheckedCreateWithoutCustomersInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutCustomersInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutCustomersInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutCustomersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutCustomersInputSchema) ]),
}).strict();

export const usersUpdateWithoutCustomersInputSchema: z.ZodType<Prisma.usersUpdateWithoutCustomersInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUpdateOneWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutCustomersInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutCustomersInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const ordersUpsertWithWhereUniqueWithoutCustomersInputSchema: z.ZodType<Prisma.ordersUpsertWithWhereUniqueWithoutCustomersInput> = z.object({
  where: z.lazy(() => ordersWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ordersUpdateWithoutCustomersInputSchema),z.lazy(() => ordersUncheckedUpdateWithoutCustomersInputSchema) ]),
  create: z.union([ z.lazy(() => ordersCreateWithoutCustomersInputSchema),z.lazy(() => ordersUncheckedCreateWithoutCustomersInputSchema) ]),
}).strict();

export const ordersUpdateWithWhereUniqueWithoutCustomersInputSchema: z.ZodType<Prisma.ordersUpdateWithWhereUniqueWithoutCustomersInput> = z.object({
  where: z.lazy(() => ordersWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ordersUpdateWithoutCustomersInputSchema),z.lazy(() => ordersUncheckedUpdateWithoutCustomersInputSchema) ]),
}).strict();

export const ordersUpdateManyWithWhereWithoutCustomersInputSchema: z.ZodType<Prisma.ordersUpdateManyWithWhereWithoutCustomersInput> = z.object({
  where: z.lazy(() => ordersScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ordersUpdateManyMutationInputSchema),z.lazy(() => ordersUncheckedUpdateManyWithoutCustomersInputSchema) ]),
}).strict();

export const usersCreateWithoutDomain_ownersInputSchema: z.ZodType<Prisma.usersCreateWithoutDomain_ownersInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutDomain_ownersInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutDomain_ownersInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutDomain_ownersInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutDomain_ownersInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutDomain_ownersInputSchema),z.lazy(() => usersUncheckedCreateWithoutDomain_ownersInputSchema) ]),
}).strict();

export const usersUpsertWithoutDomain_ownersInputSchema: z.ZodType<Prisma.usersUpsertWithoutDomain_ownersInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutDomain_ownersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutDomain_ownersInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutDomain_ownersInputSchema),z.lazy(() => usersUncheckedCreateWithoutDomain_ownersInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutDomain_ownersInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutDomain_ownersInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutDomain_ownersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutDomain_ownersInputSchema) ]),
}).strict();

export const usersUpdateWithoutDomain_ownersInputSchema: z.ZodType<Prisma.usersUpdateWithoutDomain_ownersInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutDomain_ownersInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutDomain_ownersInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const ordersCreateWithoutOrder_itemsInputSchema: z.ZodType<Prisma.ordersCreateWithoutOrder_itemsInput> = z.object({
  id: z.string().optional(),
  customer_name: z.string(),
  customer_email: z.string().optional().nullable(),
  customer_phone: z.string().optional().nullable(),
  total_amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  customers: z.lazy(() => customersCreateNestedOneWithoutOrdersInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedOneWithoutOrdersInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutOrdersInputSchema)
}).strict();

export const ordersUncheckedCreateWithoutOrder_itemsInputSchema: z.ZodType<Prisma.ordersUncheckedCreateWithoutOrder_itemsInput> = z.object({
  id: z.string().optional(),
  store_owner_id: z.string(),
  customer_id: z.string().optional().nullable(),
  customer_name: z.string(),
  customer_email: z.string().optional().nullable(),
  customer_phone: z.string().optional().nullable(),
  total_amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable()
}).strict();

export const ordersCreateOrConnectWithoutOrder_itemsInputSchema: z.ZodType<Prisma.ordersCreateOrConnectWithoutOrder_itemsInput> = z.object({
  where: z.lazy(() => ordersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ordersCreateWithoutOrder_itemsInputSchema),z.lazy(() => ordersUncheckedCreateWithoutOrder_itemsInputSchema) ]),
}).strict();

export const productsCreateWithoutOrder_itemsInputSchema: z.ZodType<Prisma.productsCreateWithoutOrder_itemsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  stock: z.number().int().optional(),
  is_active: z.boolean().optional().nullable(),
  image: z.string().optional().nullable(),
  images: z.union([ z.lazy(() => productsCreateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  categories: z.lazy(() => categoriesCreateNestedOneWithoutProductsInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedOneWithoutProductsInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutProductsInputSchema)
}).strict();

export const productsUncheckedCreateWithoutOrder_itemsInputSchema: z.ZodType<Prisma.productsUncheckedCreateWithoutOrder_itemsInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  category_id: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  stock: z.number().int().optional(),
  is_active: z.boolean().optional().nullable(),
  image: z.string().optional().nullable(),
  images: z.union([ z.lazy(() => productsCreateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable()
}).strict();

export const productsCreateOrConnectWithoutOrder_itemsInputSchema: z.ZodType<Prisma.productsCreateOrConnectWithoutOrder_itemsInput> = z.object({
  where: z.lazy(() => productsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => productsCreateWithoutOrder_itemsInputSchema),z.lazy(() => productsUncheckedCreateWithoutOrder_itemsInputSchema) ]),
}).strict();

export const ordersUpsertWithoutOrder_itemsInputSchema: z.ZodType<Prisma.ordersUpsertWithoutOrder_itemsInput> = z.object({
  update: z.union([ z.lazy(() => ordersUpdateWithoutOrder_itemsInputSchema),z.lazy(() => ordersUncheckedUpdateWithoutOrder_itemsInputSchema) ]),
  create: z.union([ z.lazy(() => ordersCreateWithoutOrder_itemsInputSchema),z.lazy(() => ordersUncheckedCreateWithoutOrder_itemsInputSchema) ]),
  where: z.lazy(() => ordersWhereInputSchema).optional()
}).strict();

export const ordersUpdateToOneWithWhereWithoutOrder_itemsInputSchema: z.ZodType<Prisma.ordersUpdateToOneWithWhereWithoutOrder_itemsInput> = z.object({
  where: z.lazy(() => ordersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ordersUpdateWithoutOrder_itemsInputSchema),z.lazy(() => ordersUncheckedUpdateWithoutOrder_itemsInputSchema) ]),
}).strict();

export const ordersUpdateWithoutOrder_itemsInputSchema: z.ZodType<Prisma.ordersUpdateWithoutOrder_itemsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customers: z.lazy(() => customersUpdateOneWithoutOrdersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateOneWithoutOrdersNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutOrdersNestedInputSchema).optional()
}).strict();

export const ordersUncheckedUpdateWithoutOrder_itemsInputSchema: z.ZodType<Prisma.ordersUncheckedUpdateWithoutOrder_itemsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const productsUpsertWithoutOrder_itemsInputSchema: z.ZodType<Prisma.productsUpsertWithoutOrder_itemsInput> = z.object({
  update: z.union([ z.lazy(() => productsUpdateWithoutOrder_itemsInputSchema),z.lazy(() => productsUncheckedUpdateWithoutOrder_itemsInputSchema) ]),
  create: z.union([ z.lazy(() => productsCreateWithoutOrder_itemsInputSchema),z.lazy(() => productsUncheckedCreateWithoutOrder_itemsInputSchema) ]),
  where: z.lazy(() => productsWhereInputSchema).optional()
}).strict();

export const productsUpdateToOneWithWhereWithoutOrder_itemsInputSchema: z.ZodType<Prisma.productsUpdateToOneWithWhereWithoutOrder_itemsInput> = z.object({
  where: z.lazy(() => productsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => productsUpdateWithoutOrder_itemsInputSchema),z.lazy(() => productsUncheckedUpdateWithoutOrder_itemsInputSchema) ]),
}).strict();

export const productsUpdateWithoutOrder_itemsInputSchema: z.ZodType<Prisma.productsUpdateWithoutOrder_itemsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  images: z.union([ z.lazy(() => productsUpdateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categories: z.lazy(() => categoriesUpdateOneWithoutProductsNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateOneWithoutProductsNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutProductsNestedInputSchema).optional()
}).strict();

export const productsUncheckedUpdateWithoutOrder_itemsInputSchema: z.ZodType<Prisma.productsUncheckedUpdateWithoutOrder_itemsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  images: z.union([ z.lazy(() => productsUpdateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const order_itemsCreateWithoutOrdersInputSchema: z.ZodType<Prisma.order_itemsCreateWithoutOrdersInput> = z.object({
  id: z.string().optional(),
  quantity: z.number().int().optional(),
  unit_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  total_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  created_at: z.coerce.date().optional().nullable(),
  products: z.lazy(() => productsCreateNestedOneWithoutOrder_itemsInputSchema)
}).strict();

export const order_itemsUncheckedCreateWithoutOrdersInputSchema: z.ZodType<Prisma.order_itemsUncheckedCreateWithoutOrdersInput> = z.object({
  id: z.string().optional(),
  product_id: z.string(),
  quantity: z.number().int().optional(),
  unit_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  total_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  created_at: z.coerce.date().optional().nullable()
}).strict();

export const order_itemsCreateOrConnectWithoutOrdersInputSchema: z.ZodType<Prisma.order_itemsCreateOrConnectWithoutOrdersInput> = z.object({
  where: z.lazy(() => order_itemsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => order_itemsCreateWithoutOrdersInputSchema),z.lazy(() => order_itemsUncheckedCreateWithoutOrdersInputSchema) ]),
}).strict();

export const order_itemsCreateManyOrdersInputEnvelopeSchema: z.ZodType<Prisma.order_itemsCreateManyOrdersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => order_itemsCreateManyOrdersInputSchema),z.lazy(() => order_itemsCreateManyOrdersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const customersCreateWithoutOrdersInputSchema: z.ZodType<Prisma.customersCreateWithoutOrdersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  stores: z.lazy(() => storesCreateNestedOneWithoutCustomersInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutCustomersInputSchema)
}).strict();

export const customersUncheckedCreateWithoutOrdersInputSchema: z.ZodType<Prisma.customersUncheckedCreateWithoutOrdersInput> = z.object({
  id: z.string().optional(),
  store_owner_id: z.string(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable()
}).strict();

export const customersCreateOrConnectWithoutOrdersInputSchema: z.ZodType<Prisma.customersCreateOrConnectWithoutOrdersInput> = z.object({
  where: z.lazy(() => customersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => customersCreateWithoutOrdersInputSchema),z.lazy(() => customersUncheckedCreateWithoutOrdersInputSchema) ]),
}).strict();

export const storesCreateWithoutOrdersInputSchema: z.ZodType<Prisma.storesCreateWithoutOrdersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  domain: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  logo_url: z.string().optional().nullable(),
  banner_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  theme_color: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  categories: z.lazy(() => categoriesCreateNestedManyWithoutStoresInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedManyWithoutStoresInputSchema).optional(),
  products: z.lazy(() => productsCreateNestedManyWithoutStoresInputSchema).optional(),
  sales: z.lazy(() => salesCreateNestedManyWithoutStoresInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutStoresInputSchema)
}).strict();

export const storesUncheckedCreateWithoutOrdersInputSchema: z.ZodType<Prisma.storesUncheckedCreateWithoutOrdersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  domain: z.string().optional().nullable(),
  user_id: z.string(),
  description: z.string().optional().nullable(),
  logo_url: z.string().optional().nullable(),
  banner_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  theme_color: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  categories: z.lazy(() => categoriesUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  sales: z.lazy(() => salesUncheckedCreateNestedManyWithoutStoresInputSchema).optional()
}).strict();

export const storesCreateOrConnectWithoutOrdersInputSchema: z.ZodType<Prisma.storesCreateOrConnectWithoutOrdersInput> = z.object({
  where: z.lazy(() => storesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => storesCreateWithoutOrdersInputSchema),z.lazy(() => storesUncheckedCreateWithoutOrdersInputSchema) ]),
}).strict();

export const usersCreateWithoutOrdersInputSchema: z.ZodType<Prisma.usersCreateWithoutOrdersInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutOrdersInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutOrdersInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutOrdersInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutOrdersInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutOrdersInputSchema),z.lazy(() => usersUncheckedCreateWithoutOrdersInputSchema) ]),
}).strict();

export const order_itemsUpsertWithWhereUniqueWithoutOrdersInputSchema: z.ZodType<Prisma.order_itemsUpsertWithWhereUniqueWithoutOrdersInput> = z.object({
  where: z.lazy(() => order_itemsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => order_itemsUpdateWithoutOrdersInputSchema),z.lazy(() => order_itemsUncheckedUpdateWithoutOrdersInputSchema) ]),
  create: z.union([ z.lazy(() => order_itemsCreateWithoutOrdersInputSchema),z.lazy(() => order_itemsUncheckedCreateWithoutOrdersInputSchema) ]),
}).strict();

export const order_itemsUpdateWithWhereUniqueWithoutOrdersInputSchema: z.ZodType<Prisma.order_itemsUpdateWithWhereUniqueWithoutOrdersInput> = z.object({
  where: z.lazy(() => order_itemsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => order_itemsUpdateWithoutOrdersInputSchema),z.lazy(() => order_itemsUncheckedUpdateWithoutOrdersInputSchema) ]),
}).strict();

export const order_itemsUpdateManyWithWhereWithoutOrdersInputSchema: z.ZodType<Prisma.order_itemsUpdateManyWithWhereWithoutOrdersInput> = z.object({
  where: z.lazy(() => order_itemsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => order_itemsUpdateManyMutationInputSchema),z.lazy(() => order_itemsUncheckedUpdateManyWithoutOrdersInputSchema) ]),
}).strict();

export const order_itemsScalarWhereInputSchema: z.ZodType<Prisma.order_itemsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => order_itemsScalarWhereInputSchema),z.lazy(() => order_itemsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => order_itemsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => order_itemsScalarWhereInputSchema),z.lazy(() => order_itemsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  order_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  product_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  unit_price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  total_price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const customersUpsertWithoutOrdersInputSchema: z.ZodType<Prisma.customersUpsertWithoutOrdersInput> = z.object({
  update: z.union([ z.lazy(() => customersUpdateWithoutOrdersInputSchema),z.lazy(() => customersUncheckedUpdateWithoutOrdersInputSchema) ]),
  create: z.union([ z.lazy(() => customersCreateWithoutOrdersInputSchema),z.lazy(() => customersUncheckedCreateWithoutOrdersInputSchema) ]),
  where: z.lazy(() => customersWhereInputSchema).optional()
}).strict();

export const customersUpdateToOneWithWhereWithoutOrdersInputSchema: z.ZodType<Prisma.customersUpdateToOneWithWhereWithoutOrdersInput> = z.object({
  where: z.lazy(() => customersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => customersUpdateWithoutOrdersInputSchema),z.lazy(() => customersUncheckedUpdateWithoutOrdersInputSchema) ]),
}).strict();

export const customersUpdateWithoutOrdersInputSchema: z.ZodType<Prisma.customersUpdateWithoutOrdersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stores: z.lazy(() => storesUpdateOneWithoutCustomersNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutCustomersNestedInputSchema).optional()
}).strict();

export const customersUncheckedUpdateWithoutOrdersInputSchema: z.ZodType<Prisma.customersUncheckedUpdateWithoutOrdersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const storesUpsertWithoutOrdersInputSchema: z.ZodType<Prisma.storesUpsertWithoutOrdersInput> = z.object({
  update: z.union([ z.lazy(() => storesUpdateWithoutOrdersInputSchema),z.lazy(() => storesUncheckedUpdateWithoutOrdersInputSchema) ]),
  create: z.union([ z.lazy(() => storesCreateWithoutOrdersInputSchema),z.lazy(() => storesUncheckedCreateWithoutOrdersInputSchema) ]),
  where: z.lazy(() => storesWhereInputSchema).optional()
}).strict();

export const storesUpdateToOneWithWhereWithoutOrdersInputSchema: z.ZodType<Prisma.storesUpdateToOneWithWhereWithoutOrdersInput> = z.object({
  where: z.lazy(() => storesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => storesUpdateWithoutOrdersInputSchema),z.lazy(() => storesUncheckedUpdateWithoutOrdersInputSchema) ]),
}).strict();

export const storesUpdateWithoutOrdersInputSchema: z.ZodType<Prisma.storesUpdateWithoutOrdersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banner_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  theme_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categories: z.lazy(() => categoriesUpdateManyWithoutStoresNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateManyWithoutStoresNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutStoresNestedInputSchema).optional(),
  sales: z.lazy(() => salesUpdateManyWithoutStoresNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutStoresNestedInputSchema).optional()
}).strict();

export const storesUncheckedUpdateWithoutOrdersInputSchema: z.ZodType<Prisma.storesUncheckedUpdateWithoutOrdersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banner_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  theme_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categories: z.lazy(() => categoriesUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  sales: z.lazy(() => salesUncheckedUpdateManyWithoutStoresNestedInputSchema).optional()
}).strict();

export const usersUpsertWithoutOrdersInputSchema: z.ZodType<Prisma.usersUpsertWithoutOrdersInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutOrdersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutOrdersInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutOrdersInputSchema),z.lazy(() => usersUncheckedCreateWithoutOrdersInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutOrdersInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutOrdersInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutOrdersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutOrdersInputSchema) ]),
}).strict();

export const usersUpdateWithoutOrdersInputSchema: z.ZodType<Prisma.usersUpdateWithoutOrdersInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutOrdersInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutOrdersInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const order_itemsCreateWithoutProductsInputSchema: z.ZodType<Prisma.order_itemsCreateWithoutProductsInput> = z.object({
  id: z.string().optional(),
  quantity: z.number().int().optional(),
  unit_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  total_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  created_at: z.coerce.date().optional().nullable(),
  orders: z.lazy(() => ordersCreateNestedOneWithoutOrder_itemsInputSchema)
}).strict();

export const order_itemsUncheckedCreateWithoutProductsInputSchema: z.ZodType<Prisma.order_itemsUncheckedCreateWithoutProductsInput> = z.object({
  id: z.string().optional(),
  order_id: z.string(),
  quantity: z.number().int().optional(),
  unit_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  total_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  created_at: z.coerce.date().optional().nullable()
}).strict();

export const order_itemsCreateOrConnectWithoutProductsInputSchema: z.ZodType<Prisma.order_itemsCreateOrConnectWithoutProductsInput> = z.object({
  where: z.lazy(() => order_itemsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => order_itemsCreateWithoutProductsInputSchema),z.lazy(() => order_itemsUncheckedCreateWithoutProductsInputSchema) ]),
}).strict();

export const order_itemsCreateManyProductsInputEnvelopeSchema: z.ZodType<Prisma.order_itemsCreateManyProductsInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => order_itemsCreateManyProductsInputSchema),z.lazy(() => order_itemsCreateManyProductsInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const categoriesCreateWithoutProductsInputSchema: z.ZodType<Prisma.categoriesCreateWithoutProductsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  color: z.string().optional().nullable(),
  image: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  stores: z.lazy(() => storesCreateNestedOneWithoutCategoriesInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutCategoriesInputSchema)
}).strict();

export const categoriesUncheckedCreateWithoutProductsInputSchema: z.ZodType<Prisma.categoriesUncheckedCreateWithoutProductsInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  name: z.string(),
  color: z.string().optional().nullable(),
  image: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable()
}).strict();

export const categoriesCreateOrConnectWithoutProductsInputSchema: z.ZodType<Prisma.categoriesCreateOrConnectWithoutProductsInput> = z.object({
  where: z.lazy(() => categoriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => categoriesCreateWithoutProductsInputSchema),z.lazy(() => categoriesUncheckedCreateWithoutProductsInputSchema) ]),
}).strict();

export const storesCreateWithoutProductsInputSchema: z.ZodType<Prisma.storesCreateWithoutProductsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  domain: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  logo_url: z.string().optional().nullable(),
  banner_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  theme_color: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  categories: z.lazy(() => categoriesCreateNestedManyWithoutStoresInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedManyWithoutStoresInputSchema).optional(),
  orders: z.lazy(() => ordersCreateNestedManyWithoutStoresInputSchema).optional(),
  sales: z.lazy(() => salesCreateNestedManyWithoutStoresInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutStoresInputSchema)
}).strict();

export const storesUncheckedCreateWithoutProductsInputSchema: z.ZodType<Prisma.storesUncheckedCreateWithoutProductsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  domain: z.string().optional().nullable(),
  user_id: z.string(),
  description: z.string().optional().nullable(),
  logo_url: z.string().optional().nullable(),
  banner_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  theme_color: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  categories: z.lazy(() => categoriesUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  sales: z.lazy(() => salesUncheckedCreateNestedManyWithoutStoresInputSchema).optional()
}).strict();

export const storesCreateOrConnectWithoutProductsInputSchema: z.ZodType<Prisma.storesCreateOrConnectWithoutProductsInput> = z.object({
  where: z.lazy(() => storesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => storesCreateWithoutProductsInputSchema),z.lazy(() => storesUncheckedCreateWithoutProductsInputSchema) ]),
}).strict();

export const usersCreateWithoutProductsInputSchema: z.ZodType<Prisma.usersCreateWithoutProductsInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutProductsInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutProductsInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutProductsInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutProductsInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutProductsInputSchema),z.lazy(() => usersUncheckedCreateWithoutProductsInputSchema) ]),
}).strict();

export const order_itemsUpsertWithWhereUniqueWithoutProductsInputSchema: z.ZodType<Prisma.order_itemsUpsertWithWhereUniqueWithoutProductsInput> = z.object({
  where: z.lazy(() => order_itemsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => order_itemsUpdateWithoutProductsInputSchema),z.lazy(() => order_itemsUncheckedUpdateWithoutProductsInputSchema) ]),
  create: z.union([ z.lazy(() => order_itemsCreateWithoutProductsInputSchema),z.lazy(() => order_itemsUncheckedCreateWithoutProductsInputSchema) ]),
}).strict();

export const order_itemsUpdateWithWhereUniqueWithoutProductsInputSchema: z.ZodType<Prisma.order_itemsUpdateWithWhereUniqueWithoutProductsInput> = z.object({
  where: z.lazy(() => order_itemsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => order_itemsUpdateWithoutProductsInputSchema),z.lazy(() => order_itemsUncheckedUpdateWithoutProductsInputSchema) ]),
}).strict();

export const order_itemsUpdateManyWithWhereWithoutProductsInputSchema: z.ZodType<Prisma.order_itemsUpdateManyWithWhereWithoutProductsInput> = z.object({
  where: z.lazy(() => order_itemsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => order_itemsUpdateManyMutationInputSchema),z.lazy(() => order_itemsUncheckedUpdateManyWithoutProductsInputSchema) ]),
}).strict();

export const categoriesUpsertWithoutProductsInputSchema: z.ZodType<Prisma.categoriesUpsertWithoutProductsInput> = z.object({
  update: z.union([ z.lazy(() => categoriesUpdateWithoutProductsInputSchema),z.lazy(() => categoriesUncheckedUpdateWithoutProductsInputSchema) ]),
  create: z.union([ z.lazy(() => categoriesCreateWithoutProductsInputSchema),z.lazy(() => categoriesUncheckedCreateWithoutProductsInputSchema) ]),
  where: z.lazy(() => categoriesWhereInputSchema).optional()
}).strict();

export const categoriesUpdateToOneWithWhereWithoutProductsInputSchema: z.ZodType<Prisma.categoriesUpdateToOneWithWhereWithoutProductsInput> = z.object({
  where: z.lazy(() => categoriesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => categoriesUpdateWithoutProductsInputSchema),z.lazy(() => categoriesUncheckedUpdateWithoutProductsInputSchema) ]),
}).strict();

export const categoriesUpdateWithoutProductsInputSchema: z.ZodType<Prisma.categoriesUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stores: z.lazy(() => storesUpdateOneWithoutCategoriesNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutCategoriesNestedInputSchema).optional()
}).strict();

export const categoriesUncheckedUpdateWithoutProductsInputSchema: z.ZodType<Prisma.categoriesUncheckedUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const storesUpsertWithoutProductsInputSchema: z.ZodType<Prisma.storesUpsertWithoutProductsInput> = z.object({
  update: z.union([ z.lazy(() => storesUpdateWithoutProductsInputSchema),z.lazy(() => storesUncheckedUpdateWithoutProductsInputSchema) ]),
  create: z.union([ z.lazy(() => storesCreateWithoutProductsInputSchema),z.lazy(() => storesUncheckedCreateWithoutProductsInputSchema) ]),
  where: z.lazy(() => storesWhereInputSchema).optional()
}).strict();

export const storesUpdateToOneWithWhereWithoutProductsInputSchema: z.ZodType<Prisma.storesUpdateToOneWithWhereWithoutProductsInput> = z.object({
  where: z.lazy(() => storesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => storesUpdateWithoutProductsInputSchema),z.lazy(() => storesUncheckedUpdateWithoutProductsInputSchema) ]),
}).strict();

export const storesUpdateWithoutProductsInputSchema: z.ZodType<Prisma.storesUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banner_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  theme_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categories: z.lazy(() => categoriesUpdateManyWithoutStoresNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateManyWithoutStoresNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutStoresNestedInputSchema).optional(),
  sales: z.lazy(() => salesUpdateManyWithoutStoresNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutStoresNestedInputSchema).optional()
}).strict();

export const storesUncheckedUpdateWithoutProductsInputSchema: z.ZodType<Prisma.storesUncheckedUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banner_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  theme_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categories: z.lazy(() => categoriesUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  sales: z.lazy(() => salesUncheckedUpdateManyWithoutStoresNestedInputSchema).optional()
}).strict();

export const usersUpsertWithoutProductsInputSchema: z.ZodType<Prisma.usersUpsertWithoutProductsInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutProductsInputSchema),z.lazy(() => usersUncheckedUpdateWithoutProductsInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutProductsInputSchema),z.lazy(() => usersUncheckedCreateWithoutProductsInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutProductsInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutProductsInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutProductsInputSchema),z.lazy(() => usersUncheckedUpdateWithoutProductsInputSchema) ]),
}).strict();

export const usersUpdateWithoutProductsInputSchema: z.ZodType<Prisma.usersUpdateWithoutProductsInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutProductsInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutProductsInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const usersCreateWithoutProfilesInputSchema: z.ZodType<Prisma.usersCreateWithoutProfilesInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsCreateNestedManyWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutProfilesInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutProfilesInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutProfilesInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutProfilesInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutProfilesInputSchema),z.lazy(() => usersUncheckedCreateWithoutProfilesInputSchema) ]),
}).strict();

export const usersUpsertWithoutProfilesInputSchema: z.ZodType<Prisma.usersUpsertWithoutProfilesInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutProfilesInputSchema),z.lazy(() => usersUncheckedUpdateWithoutProfilesInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutProfilesInputSchema),z.lazy(() => usersUncheckedCreateWithoutProfilesInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutProfilesInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutProfilesInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutProfilesInputSchema),z.lazy(() => usersUncheckedUpdateWithoutProfilesInputSchema) ]),
}).strict();

export const usersUpdateWithoutProfilesInputSchema: z.ZodType<Prisma.usersUpdateWithoutProfilesInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutProfilesInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutProfilesInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const storesCreateWithoutSalesInputSchema: z.ZodType<Prisma.storesCreateWithoutSalesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  domain: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  logo_url: z.string().optional().nullable(),
  banner_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  theme_color: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  categories: z.lazy(() => categoriesCreateNestedManyWithoutStoresInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedManyWithoutStoresInputSchema).optional(),
  orders: z.lazy(() => ordersCreateNestedManyWithoutStoresInputSchema).optional(),
  products: z.lazy(() => productsCreateNestedManyWithoutStoresInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutStoresInputSchema)
}).strict();

export const storesUncheckedCreateWithoutSalesInputSchema: z.ZodType<Prisma.storesUncheckedCreateWithoutSalesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  domain: z.string().optional().nullable(),
  user_id: z.string(),
  description: z.string().optional().nullable(),
  logo_url: z.string().optional().nullable(),
  banner_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  theme_color: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  categories: z.lazy(() => categoriesUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutStoresInputSchema).optional(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutStoresInputSchema).optional()
}).strict();

export const storesCreateOrConnectWithoutSalesInputSchema: z.ZodType<Prisma.storesCreateOrConnectWithoutSalesInput> = z.object({
  where: z.lazy(() => storesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => storesCreateWithoutSalesInputSchema),z.lazy(() => storesUncheckedCreateWithoutSalesInputSchema) ]),
}).strict();

export const storesUpsertWithoutSalesInputSchema: z.ZodType<Prisma.storesUpsertWithoutSalesInput> = z.object({
  update: z.union([ z.lazy(() => storesUpdateWithoutSalesInputSchema),z.lazy(() => storesUncheckedUpdateWithoutSalesInputSchema) ]),
  create: z.union([ z.lazy(() => storesCreateWithoutSalesInputSchema),z.lazy(() => storesUncheckedCreateWithoutSalesInputSchema) ]),
  where: z.lazy(() => storesWhereInputSchema).optional()
}).strict();

export const storesUpdateToOneWithWhereWithoutSalesInputSchema: z.ZodType<Prisma.storesUpdateToOneWithWhereWithoutSalesInput> = z.object({
  where: z.lazy(() => storesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => storesUpdateWithoutSalesInputSchema),z.lazy(() => storesUncheckedUpdateWithoutSalesInputSchema) ]),
}).strict();

export const storesUpdateWithoutSalesInputSchema: z.ZodType<Prisma.storesUpdateWithoutSalesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banner_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  theme_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categories: z.lazy(() => categoriesUpdateManyWithoutStoresNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateManyWithoutStoresNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutStoresNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutStoresNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutStoresNestedInputSchema).optional()
}).strict();

export const storesUncheckedUpdateWithoutSalesInputSchema: z.ZodType<Prisma.storesUncheckedUpdateWithoutSalesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banner_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  theme_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categories: z.lazy(() => categoriesUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutStoresNestedInputSchema).optional()
}).strict();

export const usersCreateWithoutStore_settingsInputSchema: z.ZodType<Prisma.usersCreateWithoutStore_settingsInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutStore_settingsInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutStore_settingsInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutStore_settingsInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutStore_settingsInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutStore_settingsInputSchema),z.lazy(() => usersUncheckedCreateWithoutStore_settingsInputSchema) ]),
}).strict();

export const usersUpsertWithoutStore_settingsInputSchema: z.ZodType<Prisma.usersUpsertWithoutStore_settingsInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutStore_settingsInputSchema),z.lazy(() => usersUncheckedUpdateWithoutStore_settingsInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutStore_settingsInputSchema),z.lazy(() => usersUncheckedCreateWithoutStore_settingsInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutStore_settingsInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutStore_settingsInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutStore_settingsInputSchema),z.lazy(() => usersUncheckedUpdateWithoutStore_settingsInputSchema) ]),
}).strict();

export const usersUpdateWithoutStore_settingsInputSchema: z.ZodType<Prisma.usersUpdateWithoutStore_settingsInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutStore_settingsInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutStore_settingsInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const categoriesCreateWithoutStoresInputSchema: z.ZodType<Prisma.categoriesCreateWithoutStoresInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  color: z.string().optional().nullable(),
  image: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  users: z.lazy(() => usersCreateNestedOneWithoutCategoriesInputSchema),
  products: z.lazy(() => productsCreateNestedManyWithoutCategoriesInputSchema).optional()
}).strict();

export const categoriesUncheckedCreateWithoutStoresInputSchema: z.ZodType<Prisma.categoriesUncheckedCreateWithoutStoresInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  name: z.string(),
  color: z.string().optional().nullable(),
  image: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutCategoriesInputSchema).optional()
}).strict();

export const categoriesCreateOrConnectWithoutStoresInputSchema: z.ZodType<Prisma.categoriesCreateOrConnectWithoutStoresInput> = z.object({
  where: z.lazy(() => categoriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => categoriesCreateWithoutStoresInputSchema),z.lazy(() => categoriesUncheckedCreateWithoutStoresInputSchema) ]),
}).strict();

export const categoriesCreateManyStoresInputEnvelopeSchema: z.ZodType<Prisma.categoriesCreateManyStoresInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => categoriesCreateManyStoresInputSchema),z.lazy(() => categoriesCreateManyStoresInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const customersCreateWithoutStoresInputSchema: z.ZodType<Prisma.customersCreateWithoutStoresInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  users: z.lazy(() => usersCreateNestedOneWithoutCustomersInputSchema),
  orders: z.lazy(() => ordersCreateNestedManyWithoutCustomersInputSchema).optional()
}).strict();

export const customersUncheckedCreateWithoutStoresInputSchema: z.ZodType<Prisma.customersUncheckedCreateWithoutStoresInput> = z.object({
  id: z.string().optional(),
  store_owner_id: z.string(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutCustomersInputSchema).optional()
}).strict();

export const customersCreateOrConnectWithoutStoresInputSchema: z.ZodType<Prisma.customersCreateOrConnectWithoutStoresInput> = z.object({
  where: z.lazy(() => customersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => customersCreateWithoutStoresInputSchema),z.lazy(() => customersUncheckedCreateWithoutStoresInputSchema) ]),
}).strict();

export const customersCreateManyStoresInputEnvelopeSchema: z.ZodType<Prisma.customersCreateManyStoresInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => customersCreateManyStoresInputSchema),z.lazy(() => customersCreateManyStoresInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ordersCreateWithoutStoresInputSchema: z.ZodType<Prisma.ordersCreateWithoutStoresInput> = z.object({
  id: z.string().optional(),
  customer_name: z.string(),
  customer_email: z.string().optional().nullable(),
  customer_phone: z.string().optional().nullable(),
  total_amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  order_items: z.lazy(() => order_itemsCreateNestedManyWithoutOrdersInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedOneWithoutOrdersInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutOrdersInputSchema)
}).strict();

export const ordersUncheckedCreateWithoutStoresInputSchema: z.ZodType<Prisma.ordersUncheckedCreateWithoutStoresInput> = z.object({
  id: z.string().optional(),
  store_owner_id: z.string(),
  customer_id: z.string().optional().nullable(),
  customer_name: z.string(),
  customer_email: z.string().optional().nullable(),
  customer_phone: z.string().optional().nullable(),
  total_amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  order_items: z.lazy(() => order_itemsUncheckedCreateNestedManyWithoutOrdersInputSchema).optional()
}).strict();

export const ordersCreateOrConnectWithoutStoresInputSchema: z.ZodType<Prisma.ordersCreateOrConnectWithoutStoresInput> = z.object({
  where: z.lazy(() => ordersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ordersCreateWithoutStoresInputSchema),z.lazy(() => ordersUncheckedCreateWithoutStoresInputSchema) ]),
}).strict();

export const ordersCreateManyStoresInputEnvelopeSchema: z.ZodType<Prisma.ordersCreateManyStoresInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ordersCreateManyStoresInputSchema),z.lazy(() => ordersCreateManyStoresInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const productsCreateWithoutStoresInputSchema: z.ZodType<Prisma.productsCreateWithoutStoresInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  stock: z.number().int().optional(),
  is_active: z.boolean().optional().nullable(),
  image: z.string().optional().nullable(),
  images: z.union([ z.lazy(() => productsCreateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  order_items: z.lazy(() => order_itemsCreateNestedManyWithoutProductsInputSchema).optional(),
  categories: z.lazy(() => categoriesCreateNestedOneWithoutProductsInputSchema).optional(),
  users: z.lazy(() => usersCreateNestedOneWithoutProductsInputSchema)
}).strict();

export const productsUncheckedCreateWithoutStoresInputSchema: z.ZodType<Prisma.productsUncheckedCreateWithoutStoresInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  category_id: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  stock: z.number().int().optional(),
  is_active: z.boolean().optional().nullable(),
  image: z.string().optional().nullable(),
  images: z.union([ z.lazy(() => productsCreateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  order_items: z.lazy(() => order_itemsUncheckedCreateNestedManyWithoutProductsInputSchema).optional()
}).strict();

export const productsCreateOrConnectWithoutStoresInputSchema: z.ZodType<Prisma.productsCreateOrConnectWithoutStoresInput> = z.object({
  where: z.lazy(() => productsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => productsCreateWithoutStoresInputSchema),z.lazy(() => productsUncheckedCreateWithoutStoresInputSchema) ]),
}).strict();

export const productsCreateManyStoresInputEnvelopeSchema: z.ZodType<Prisma.productsCreateManyStoresInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => productsCreateManyStoresInputSchema),z.lazy(() => productsCreateManyStoresInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const salesCreateWithoutStoresInputSchema: z.ZodType<Prisma.salesCreateWithoutStoresInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  product_name: z.string(),
  quantity: z.number().int().optional(),
  unit_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  total_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  sale_date: z.coerce.date(),
  status: z.string().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const salesUncheckedCreateWithoutStoresInputSchema: z.ZodType<Prisma.salesUncheckedCreateWithoutStoresInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  product_name: z.string(),
  quantity: z.number().int().optional(),
  unit_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  total_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  sale_date: z.coerce.date(),
  status: z.string().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const salesCreateOrConnectWithoutStoresInputSchema: z.ZodType<Prisma.salesCreateOrConnectWithoutStoresInput> = z.object({
  where: z.lazy(() => salesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => salesCreateWithoutStoresInputSchema),z.lazy(() => salesUncheckedCreateWithoutStoresInputSchema) ]),
}).strict();

export const salesCreateManyStoresInputEnvelopeSchema: z.ZodType<Prisma.salesCreateManyStoresInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => salesCreateManyStoresInputSchema),z.lazy(() => salesCreateManyStoresInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const usersCreateWithoutStoresInputSchema: z.ZodType<Prisma.usersCreateWithoutStoresInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsCreateNestedOneWithoutUsersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutStoresInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutStoresInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.string(),
  aud: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  encrypted_password: z.string().optional().nullable(),
  email_confirmed_at: z.coerce.date().optional().nullable(),
  invited_at: z.coerce.date().optional().nullable(),
  confirmation_token: z.string().optional().nullable(),
  confirmation_sent_at: z.coerce.date().optional().nullable(),
  recovery_token: z.string().optional().nullable(),
  recovery_sent_at: z.coerce.date().optional().nullable(),
  email_change_token_new: z.string().optional().nullable(),
  email_change: z.string().optional().nullable(),
  email_change_sent_at: z.coerce.date().optional().nullable(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  phone: z.string().optional().nullable(),
  phone_confirmed_at: z.coerce.date().optional().nullable(),
  phone_change: z.string().optional().nullable(),
  phone_change_token: z.string().optional().nullable(),
  phone_change_sent_at: z.coerce.date().optional().nullable(),
  confirmed_at: z.coerce.date().optional().nullable(),
  email_change_token_current: z.string().optional().nullable(),
  email_change_confirm_status: z.number().int().optional().nullable(),
  banned_until: z.coerce.date().optional().nullable(),
  reauthentication_token: z.string().optional().nullable(),
  reauthentication_sent_at: z.coerce.date().optional().nullable(),
  is_sso_user: z.boolean().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  is_anonymous: z.boolean().optional(),
  identities: z.lazy(() => identitiesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  products: z.lazy(() => productsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedCreateNestedOneWithoutUsersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutStoresInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutStoresInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutStoresInputSchema),z.lazy(() => usersUncheckedCreateWithoutStoresInputSchema) ]),
}).strict();

export const categoriesUpsertWithWhereUniqueWithoutStoresInputSchema: z.ZodType<Prisma.categoriesUpsertWithWhereUniqueWithoutStoresInput> = z.object({
  where: z.lazy(() => categoriesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => categoriesUpdateWithoutStoresInputSchema),z.lazy(() => categoriesUncheckedUpdateWithoutStoresInputSchema) ]),
  create: z.union([ z.lazy(() => categoriesCreateWithoutStoresInputSchema),z.lazy(() => categoriesUncheckedCreateWithoutStoresInputSchema) ]),
}).strict();

export const categoriesUpdateWithWhereUniqueWithoutStoresInputSchema: z.ZodType<Prisma.categoriesUpdateWithWhereUniqueWithoutStoresInput> = z.object({
  where: z.lazy(() => categoriesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => categoriesUpdateWithoutStoresInputSchema),z.lazy(() => categoriesUncheckedUpdateWithoutStoresInputSchema) ]),
}).strict();

export const categoriesUpdateManyWithWhereWithoutStoresInputSchema: z.ZodType<Prisma.categoriesUpdateManyWithWhereWithoutStoresInput> = z.object({
  where: z.lazy(() => categoriesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => categoriesUpdateManyMutationInputSchema),z.lazy(() => categoriesUncheckedUpdateManyWithoutStoresInputSchema) ]),
}).strict();

export const customersUpsertWithWhereUniqueWithoutStoresInputSchema: z.ZodType<Prisma.customersUpsertWithWhereUniqueWithoutStoresInput> = z.object({
  where: z.lazy(() => customersWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => customersUpdateWithoutStoresInputSchema),z.lazy(() => customersUncheckedUpdateWithoutStoresInputSchema) ]),
  create: z.union([ z.lazy(() => customersCreateWithoutStoresInputSchema),z.lazy(() => customersUncheckedCreateWithoutStoresInputSchema) ]),
}).strict();

export const customersUpdateWithWhereUniqueWithoutStoresInputSchema: z.ZodType<Prisma.customersUpdateWithWhereUniqueWithoutStoresInput> = z.object({
  where: z.lazy(() => customersWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => customersUpdateWithoutStoresInputSchema),z.lazy(() => customersUncheckedUpdateWithoutStoresInputSchema) ]),
}).strict();

export const customersUpdateManyWithWhereWithoutStoresInputSchema: z.ZodType<Prisma.customersUpdateManyWithWhereWithoutStoresInput> = z.object({
  where: z.lazy(() => customersScalarWhereInputSchema),
  data: z.union([ z.lazy(() => customersUpdateManyMutationInputSchema),z.lazy(() => customersUncheckedUpdateManyWithoutStoresInputSchema) ]),
}).strict();

export const ordersUpsertWithWhereUniqueWithoutStoresInputSchema: z.ZodType<Prisma.ordersUpsertWithWhereUniqueWithoutStoresInput> = z.object({
  where: z.lazy(() => ordersWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ordersUpdateWithoutStoresInputSchema),z.lazy(() => ordersUncheckedUpdateWithoutStoresInputSchema) ]),
  create: z.union([ z.lazy(() => ordersCreateWithoutStoresInputSchema),z.lazy(() => ordersUncheckedCreateWithoutStoresInputSchema) ]),
}).strict();

export const ordersUpdateWithWhereUniqueWithoutStoresInputSchema: z.ZodType<Prisma.ordersUpdateWithWhereUniqueWithoutStoresInput> = z.object({
  where: z.lazy(() => ordersWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ordersUpdateWithoutStoresInputSchema),z.lazy(() => ordersUncheckedUpdateWithoutStoresInputSchema) ]),
}).strict();

export const ordersUpdateManyWithWhereWithoutStoresInputSchema: z.ZodType<Prisma.ordersUpdateManyWithWhereWithoutStoresInput> = z.object({
  where: z.lazy(() => ordersScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ordersUpdateManyMutationInputSchema),z.lazy(() => ordersUncheckedUpdateManyWithoutStoresInputSchema) ]),
}).strict();

export const productsUpsertWithWhereUniqueWithoutStoresInputSchema: z.ZodType<Prisma.productsUpsertWithWhereUniqueWithoutStoresInput> = z.object({
  where: z.lazy(() => productsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => productsUpdateWithoutStoresInputSchema),z.lazy(() => productsUncheckedUpdateWithoutStoresInputSchema) ]),
  create: z.union([ z.lazy(() => productsCreateWithoutStoresInputSchema),z.lazy(() => productsUncheckedCreateWithoutStoresInputSchema) ]),
}).strict();

export const productsUpdateWithWhereUniqueWithoutStoresInputSchema: z.ZodType<Prisma.productsUpdateWithWhereUniqueWithoutStoresInput> = z.object({
  where: z.lazy(() => productsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => productsUpdateWithoutStoresInputSchema),z.lazy(() => productsUncheckedUpdateWithoutStoresInputSchema) ]),
}).strict();

export const productsUpdateManyWithWhereWithoutStoresInputSchema: z.ZodType<Prisma.productsUpdateManyWithWhereWithoutStoresInput> = z.object({
  where: z.lazy(() => productsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => productsUpdateManyMutationInputSchema),z.lazy(() => productsUncheckedUpdateManyWithoutStoresInputSchema) ]),
}).strict();

export const salesUpsertWithWhereUniqueWithoutStoresInputSchema: z.ZodType<Prisma.salesUpsertWithWhereUniqueWithoutStoresInput> = z.object({
  where: z.lazy(() => salesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => salesUpdateWithoutStoresInputSchema),z.lazy(() => salesUncheckedUpdateWithoutStoresInputSchema) ]),
  create: z.union([ z.lazy(() => salesCreateWithoutStoresInputSchema),z.lazy(() => salesUncheckedCreateWithoutStoresInputSchema) ]),
}).strict();

export const salesUpdateWithWhereUniqueWithoutStoresInputSchema: z.ZodType<Prisma.salesUpdateWithWhereUniqueWithoutStoresInput> = z.object({
  where: z.lazy(() => salesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => salesUpdateWithoutStoresInputSchema),z.lazy(() => salesUncheckedUpdateWithoutStoresInputSchema) ]),
}).strict();

export const salesUpdateManyWithWhereWithoutStoresInputSchema: z.ZodType<Prisma.salesUpdateManyWithWhereWithoutStoresInput> = z.object({
  where: z.lazy(() => salesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => salesUpdateManyMutationInputSchema),z.lazy(() => salesUncheckedUpdateManyWithoutStoresInputSchema) ]),
}).strict();

export const salesScalarWhereInputSchema: z.ZodType<Prisma.salesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => salesScalarWhereInputSchema),z.lazy(() => salesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => salesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => salesScalarWhereInputSchema),z.lazy(() => salesScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  product_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  unit_price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  total_price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  sale_date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  store_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const usersUpsertWithoutStoresInputSchema: z.ZodType<Prisma.usersUpsertWithoutStoresInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutStoresInputSchema),z.lazy(() => usersUncheckedUpdateWithoutStoresInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutStoresInputSchema),z.lazy(() => usersUncheckedCreateWithoutStoresInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutStoresInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutStoresInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutStoresInputSchema),z.lazy(() => usersUncheckedUpdateWithoutStoresInputSchema) ]),
}).strict();

export const usersUpdateWithoutStoresInputSchema: z.ZodType<Prisma.usersUpdateWithoutStoresInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUpdateOneWithoutUsersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutStoresInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutStoresInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aud: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encrypted_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invited_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmation_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recovery_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_new: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raw_app_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  raw_user_meta_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  is_super_admin: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone_change_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_token_current: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_change_confirm_status: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned_until: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reauthentication_sent_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_sso_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_anonymous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  identities: z.lazy(() => identitiesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  mfa_factors: z.lazy(() => mfa_factorsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  one_time_tokens: z.lazy(() => one_time_tokensUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  controller_admins: z.lazy(() => controller_adminsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  domain_owners: z.lazy(() => domain_ownersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  profiles: z.lazy(() => profilesUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  store_settings: z.lazy(() => store_settingsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional()
}).strict();

export const DomainCreateWithoutUserInputSchema: z.ZodType<Prisma.DomainCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  slug: z.string(),
  createdAt: z.coerce.date().optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutDomainInputSchema).optional()
}).strict();

export const DomainUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.DomainUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  slug: z.string(),
  createdAt: z.coerce.date().optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutDomainInputSchema).optional()
}).strict();

export const DomainCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.DomainCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => DomainWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DomainCreateWithoutUserInputSchema),z.lazy(() => DomainUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const DomainCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.DomainCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => DomainCreateManyUserInputSchema),z.lazy(() => DomainCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DomainUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.DomainUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => DomainWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DomainUpdateWithoutUserInputSchema),z.lazy(() => DomainUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => DomainCreateWithoutUserInputSchema),z.lazy(() => DomainUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const DomainUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.DomainUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => DomainWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DomainUpdateWithoutUserInputSchema),z.lazy(() => DomainUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const DomainUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.DomainUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => DomainScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DomainUpdateManyMutationInputSchema),z.lazy(() => DomainUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const DomainScalarWhereInputSchema: z.ZodType<Prisma.DomainScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DomainScalarWhereInputSchema),z.lazy(() => DomainScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DomainScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DomainScalarWhereInputSchema),z.lazy(() => DomainScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserCreateWithoutDomainsInputSchema: z.ZodType<Prisma.UserCreateWithoutDomainsInput> = z.object({
  id: z.string().uuid().optional(),
  email: z.string(),
  password: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const UserUncheckedCreateWithoutDomainsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutDomainsInput> = z.object({
  id: z.string().uuid().optional(),
  email: z.string(),
  password: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const UserCreateOrConnectWithoutDomainsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutDomainsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutDomainsInputSchema),z.lazy(() => UserUncheckedCreateWithoutDomainsInputSchema) ]),
}).strict();

export const ProductCreateWithoutDomainInputSchema: z.ZodType<Prisma.ProductCreateWithoutDomainInput> = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  description: z.string(),
  price: z.number(),
  imageUrl: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const ProductUncheckedCreateWithoutDomainInputSchema: z.ZodType<Prisma.ProductUncheckedCreateWithoutDomainInput> = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  description: z.string(),
  price: z.number(),
  imageUrl: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const ProductCreateOrConnectWithoutDomainInputSchema: z.ZodType<Prisma.ProductCreateOrConnectWithoutDomainInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCreateWithoutDomainInputSchema),z.lazy(() => ProductUncheckedCreateWithoutDomainInputSchema) ]),
}).strict();

export const ProductCreateManyDomainInputEnvelopeSchema: z.ZodType<Prisma.ProductCreateManyDomainInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProductCreateManyDomainInputSchema),z.lazy(() => ProductCreateManyDomainInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserUpsertWithoutDomainsInputSchema: z.ZodType<Prisma.UserUpsertWithoutDomainsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutDomainsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutDomainsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutDomainsInputSchema),z.lazy(() => UserUncheckedCreateWithoutDomainsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutDomainsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutDomainsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutDomainsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutDomainsInputSchema) ]),
}).strict();

export const UserUpdateWithoutDomainsInputSchema: z.ZodType<Prisma.UserUpdateWithoutDomainsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUncheckedUpdateWithoutDomainsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutDomainsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductUpsertWithWhereUniqueWithoutDomainInputSchema: z.ZodType<Prisma.ProductUpsertWithWhereUniqueWithoutDomainInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProductUpdateWithoutDomainInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutDomainInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCreateWithoutDomainInputSchema),z.lazy(() => ProductUncheckedCreateWithoutDomainInputSchema) ]),
}).strict();

export const ProductUpdateWithWhereUniqueWithoutDomainInputSchema: z.ZodType<Prisma.ProductUpdateWithWhereUniqueWithoutDomainInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProductUpdateWithoutDomainInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutDomainInputSchema) ]),
}).strict();

export const ProductUpdateManyWithWhereWithoutDomainInputSchema: z.ZodType<Prisma.ProductUpdateManyWithWhereWithoutDomainInput> = z.object({
  where: z.lazy(() => ProductScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProductUpdateManyMutationInputSchema),z.lazy(() => ProductUncheckedUpdateManyWithoutDomainInputSchema) ]),
}).strict();

export const ProductScalarWhereInputSchema: z.ZodType<Prisma.ProductScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  imageUrl: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  domainId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const DomainCreateWithoutProductsInputSchema: z.ZodType<Prisma.DomainCreateWithoutProductsInput> = z.object({
  id: z.string().uuid().optional(),
  slug: z.string(),
  createdAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutDomainsInputSchema)
}).strict();

export const DomainUncheckedCreateWithoutProductsInputSchema: z.ZodType<Prisma.DomainUncheckedCreateWithoutProductsInput> = z.object({
  id: z.string().uuid().optional(),
  slug: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const DomainCreateOrConnectWithoutProductsInputSchema: z.ZodType<Prisma.DomainCreateOrConnectWithoutProductsInput> = z.object({
  where: z.lazy(() => DomainWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DomainCreateWithoutProductsInputSchema),z.lazy(() => DomainUncheckedCreateWithoutProductsInputSchema) ]),
}).strict();

export const DomainUpsertWithoutProductsInputSchema: z.ZodType<Prisma.DomainUpsertWithoutProductsInput> = z.object({
  update: z.union([ z.lazy(() => DomainUpdateWithoutProductsInputSchema),z.lazy(() => DomainUncheckedUpdateWithoutProductsInputSchema) ]),
  create: z.union([ z.lazy(() => DomainCreateWithoutProductsInputSchema),z.lazy(() => DomainUncheckedCreateWithoutProductsInputSchema) ]),
  where: z.lazy(() => DomainWhereInputSchema).optional()
}).strict();

export const DomainUpdateToOneWithWhereWithoutProductsInputSchema: z.ZodType<Prisma.DomainUpdateToOneWithWhereWithoutProductsInput> = z.object({
  where: z.lazy(() => DomainWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => DomainUpdateWithoutProductsInputSchema),z.lazy(() => DomainUncheckedUpdateWithoutProductsInputSchema) ]),
}).strict();

export const DomainUpdateWithoutProductsInputSchema: z.ZodType<Prisma.DomainUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutDomainsNestedInputSchema).optional()
}).strict();

export const DomainUncheckedUpdateWithoutProductsInputSchema: z.ZodType<Prisma.DomainUncheckedUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const saml_relay_statesCreateManyFlow_stateInputSchema: z.ZodType<Prisma.saml_relay_statesCreateManyFlow_stateInput> = z.object({
  id: z.string(),
  sso_provider_id: z.string(),
  request_id: z.string(),
  for_email: z.string().optional().nullable(),
  redirect_to: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable()
}).strict();

export const saml_relay_statesUpdateWithoutFlow_stateInputSchema: z.ZodType<Prisma.saml_relay_statesUpdateWithoutFlow_stateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  request_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  for_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  redirect_to: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sso_providers: z.lazy(() => sso_providersUpdateOneRequiredWithoutSaml_relay_statesNestedInputSchema).optional()
}).strict();

export const saml_relay_statesUncheckedUpdateWithoutFlow_stateInputSchema: z.ZodType<Prisma.saml_relay_statesUncheckedUpdateWithoutFlow_stateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sso_provider_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  request_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  for_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  redirect_to: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const saml_relay_statesUncheckedUpdateManyWithoutFlow_stateInputSchema: z.ZodType<Prisma.saml_relay_statesUncheckedUpdateManyWithoutFlow_stateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sso_provider_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  request_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  for_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  redirect_to: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const mfa_challengesCreateManyMfa_factorsInputSchema: z.ZodType<Prisma.mfa_challengesCreateManyMfa_factorsInput> = z.object({
  id: z.string(),
  created_at: z.coerce.date(),
  verified_at: z.coerce.date().optional().nullable(),
  ip_address: z.string(),
  otp_code: z.string().optional().nullable(),
  web_authn_session_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const mfa_challengesUpdateWithoutMfa_factorsInputSchema: z.ZodType<Prisma.mfa_challengesUpdateWithoutMfa_factorsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  verified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  otp_code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_authn_session_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const mfa_challengesUncheckedUpdateWithoutMfa_factorsInputSchema: z.ZodType<Prisma.mfa_challengesUncheckedUpdateWithoutMfa_factorsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  verified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  otp_code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_authn_session_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const mfa_challengesUncheckedUpdateManyWithoutMfa_factorsInputSchema: z.ZodType<Prisma.mfa_challengesUncheckedUpdateManyWithoutMfa_factorsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  verified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  otp_code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_authn_session_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const mfa_amr_claimsCreateManySessionsInputSchema: z.ZodType<Prisma.mfa_amr_claimsCreateManySessionsInput> = z.object({
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  authentication_method: z.string(),
  id: z.string()
}).strict();

export const refresh_tokensCreateManySessionsInputSchema: z.ZodType<Prisma.refresh_tokensCreateManySessionsInput> = z.object({
  instance_id: z.string().optional().nullable(),
  id: z.bigint().optional(),
  token: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
  revoked: z.boolean().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  parent: z.string().optional().nullable()
}).strict();

export const mfa_amr_claimsUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.mfa_amr_claimsUpdateWithoutSessionsInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  authentication_method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const mfa_amr_claimsUncheckedUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.mfa_amr_claimsUncheckedUpdateWithoutSessionsInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  authentication_method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const mfa_amr_claimsUncheckedUpdateManyWithoutSessionsInputSchema: z.ZodType<Prisma.mfa_amr_claimsUncheckedUpdateManyWithoutSessionsInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  authentication_method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const refresh_tokensUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.refresh_tokensUpdateWithoutSessionsInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  revoked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const refresh_tokensUncheckedUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.refresh_tokensUncheckedUpdateWithoutSessionsInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  revoked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const refresh_tokensUncheckedUpdateManyWithoutSessionsInputSchema: z.ZodType<Prisma.refresh_tokensUncheckedUpdateManyWithoutSessionsInput> = z.object({
  instance_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  revoked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const saml_providersCreateManySso_providersInputSchema: z.ZodType<Prisma.saml_providersCreateManySso_providersInput> = z.object({
  id: z.string(),
  entity_id: z.string(),
  metadata_xml: z.string(),
  metadata_url: z.string().optional().nullable(),
  attribute_mapping: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  name_id_format: z.string().optional().nullable()
}).strict();

export const saml_relay_statesCreateManySso_providersInputSchema: z.ZodType<Prisma.saml_relay_statesCreateManySso_providersInput> = z.object({
  id: z.string(),
  request_id: z.string(),
  for_email: z.string().optional().nullable(),
  redirect_to: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  flow_state_id: z.string().optional().nullable()
}).strict();

export const sso_domainsCreateManySso_providersInputSchema: z.ZodType<Prisma.sso_domainsCreateManySso_providersInput> = z.object({
  id: z.string(),
  domain: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable()
}).strict();

export const saml_providersUpdateWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_providersUpdateWithoutSso_providersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata_xml: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribute_mapping: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_id_format: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const saml_providersUncheckedUpdateWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_providersUncheckedUpdateWithoutSso_providersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata_xml: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribute_mapping: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_id_format: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const saml_providersUncheckedUpdateManyWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_providersUncheckedUpdateManyWithoutSso_providersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata_xml: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribute_mapping: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_id_format: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const saml_relay_statesUpdateWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_relay_statesUpdateWithoutSso_providersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  request_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  for_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  redirect_to: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  flow_state: z.lazy(() => flow_stateUpdateOneWithoutSaml_relay_statesNestedInputSchema).optional()
}).strict();

export const saml_relay_statesUncheckedUpdateWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_relay_statesUncheckedUpdateWithoutSso_providersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  request_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  for_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  redirect_to: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  flow_state_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const saml_relay_statesUncheckedUpdateManyWithoutSso_providersInputSchema: z.ZodType<Prisma.saml_relay_statesUncheckedUpdateManyWithoutSso_providersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  request_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  for_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  redirect_to: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  flow_state_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const sso_domainsUpdateWithoutSso_providersInputSchema: z.ZodType<Prisma.sso_domainsUpdateWithoutSso_providersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const sso_domainsUncheckedUpdateWithoutSso_providersInputSchema: z.ZodType<Prisma.sso_domainsUncheckedUpdateWithoutSso_providersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const sso_domainsUncheckedUpdateManyWithoutSso_providersInputSchema: z.ZodType<Prisma.sso_domainsUncheckedUpdateManyWithoutSso_providersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const identitiesCreateManyUsersInputSchema: z.ZodType<Prisma.identitiesCreateManyUsersInput> = z.object({
  provider_id: z.string(),
  identity_data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  provider: z.string(),
  last_sign_in_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  id: z.string().optional()
}).strict();

export const mfa_factorsCreateManyUsersInputSchema: z.ZodType<Prisma.mfa_factorsCreateManyUsersInput> = z.object({
  id: z.string(),
  friendly_name: z.string().optional().nullable(),
  factor_type: z.lazy(() => factor_typeSchema),
  status: z.lazy(() => factor_statusSchema),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  secret: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  last_challenged_at: z.coerce.date().optional().nullable(),
  web_authn_credential: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  web_authn_aaguid: z.string().optional().nullable()
}).strict();

export const one_time_tokensCreateManyUsersInputSchema: z.ZodType<Prisma.one_time_tokensCreateManyUsersInput> = z.object({
  id: z.string(),
  token_type: z.lazy(() => one_time_token_typeSchema),
  token_hash: z.string(),
  relates_to: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const sessionsCreateManyUsersInputSchema: z.ZodType<Prisma.sessionsCreateManyUsersInput> = z.object({
  id: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  factor_id: z.string().optional().nullable(),
  aal: z.lazy(() => aal_levelSchema).optional().nullable(),
  not_after: z.coerce.date().optional().nullable(),
  refreshed_at: z.coerce.date().optional().nullable(),
  user_agent: z.string().optional().nullable(),
  ip: z.string().optional().nullable(),
  tag: z.string().optional().nullable()
}).strict();

export const categoriesCreateManyUsersInputSchema: z.ZodType<Prisma.categoriesCreateManyUsersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  color: z.string().optional().nullable(),
  image: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable()
}).strict();

export const customersCreateManyUsersInputSchema: z.ZodType<Prisma.customersCreateManyUsersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable()
}).strict();

export const domain_ownersCreateManyUsersInputSchema: z.ZodType<Prisma.domain_ownersCreateManyUsersInput> = z.object({
  id: z.string().optional(),
  domain: z.string(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  domain_type: z.string().optional()
}).strict();

export const ordersCreateManyUsersInputSchema: z.ZodType<Prisma.ordersCreateManyUsersInput> = z.object({
  id: z.string().optional(),
  customer_id: z.string().optional().nullable(),
  customer_name: z.string(),
  customer_email: z.string().optional().nullable(),
  customer_phone: z.string().optional().nullable(),
  total_amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable()
}).strict();

export const productsCreateManyUsersInputSchema: z.ZodType<Prisma.productsCreateManyUsersInput> = z.object({
  id: z.string().optional(),
  category_id: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  stock: z.number().int().optional(),
  is_active: z.boolean().optional().nullable(),
  image: z.string().optional().nullable(),
  images: z.union([ z.lazy(() => productsCreateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable()
}).strict();

export const storesCreateManyUsersInputSchema: z.ZodType<Prisma.storesCreateManyUsersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  domain: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  logo_url: z.string().optional().nullable(),
  banner_url: z.string().optional().nullable(),
  whatsapp_number: z.string().optional().nullable(),
  instagram_url: z.string().optional().nullable(),
  theme_color: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable()
}).strict();

export const identitiesUpdateWithoutUsersInputSchema: z.ZodType<Prisma.identitiesUpdateWithoutUsersInput> = z.object({
  provider_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identity_data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const identitiesUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.identitiesUncheckedUpdateWithoutUsersInput> = z.object({
  provider_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identity_data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const identitiesUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<Prisma.identitiesUncheckedUpdateManyWithoutUsersInput> = z.object({
  provider_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identity_data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_sign_in_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const mfa_factorsUpdateWithoutUsersInputSchema: z.ZodType<Prisma.mfa_factorsUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friendly_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  factor_type: z.union([ z.lazy(() => factor_typeSchema),z.lazy(() => Enumfactor_typeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => factor_statusSchema),z.lazy(() => Enumfactor_statusFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_challenged_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_authn_credential: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  web_authn_aaguid: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mfa_challenges: z.lazy(() => mfa_challengesUpdateManyWithoutMfa_factorsNestedInputSchema).optional()
}).strict();

export const mfa_factorsUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.mfa_factorsUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friendly_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  factor_type: z.union([ z.lazy(() => factor_typeSchema),z.lazy(() => Enumfactor_typeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => factor_statusSchema),z.lazy(() => Enumfactor_statusFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_challenged_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_authn_credential: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  web_authn_aaguid: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mfa_challenges: z.lazy(() => mfa_challengesUncheckedUpdateManyWithoutMfa_factorsNestedInputSchema).optional()
}).strict();

export const mfa_factorsUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<Prisma.mfa_factorsUncheckedUpdateManyWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friendly_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  factor_type: z.union([ z.lazy(() => factor_typeSchema),z.lazy(() => Enumfactor_typeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => factor_statusSchema),z.lazy(() => Enumfactor_statusFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_challenged_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_authn_credential: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  web_authn_aaguid: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const one_time_tokensUpdateWithoutUsersInputSchema: z.ZodType<Prisma.one_time_tokensUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token_type: z.union([ z.lazy(() => one_time_token_typeSchema),z.lazy(() => Enumone_time_token_typeFieldUpdateOperationsInputSchema) ]).optional(),
  token_hash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relates_to: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const one_time_tokensUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.one_time_tokensUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token_type: z.union([ z.lazy(() => one_time_token_typeSchema),z.lazy(() => Enumone_time_token_typeFieldUpdateOperationsInputSchema) ]).optional(),
  token_hash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relates_to: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const one_time_tokensUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<Prisma.one_time_tokensUncheckedUpdateManyWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token_type: z.union([ z.lazy(() => one_time_token_typeSchema),z.lazy(() => Enumone_time_token_typeFieldUpdateOperationsInputSchema) ]).optional(),
  token_hash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relates_to: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const sessionsUpdateWithoutUsersInputSchema: z.ZodType<Prisma.sessionsUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  factor_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aal: z.union([ z.lazy(() => aal_levelSchema),z.lazy(() => NullableEnumaal_levelFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  not_after: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_agent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mfa_amr_claims: z.lazy(() => mfa_amr_claimsUpdateManyWithoutSessionsNestedInputSchema).optional(),
  refresh_tokens: z.lazy(() => refresh_tokensUpdateManyWithoutSessionsNestedInputSchema).optional()
}).strict();

export const sessionsUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.sessionsUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  factor_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aal: z.union([ z.lazy(() => aal_levelSchema),z.lazy(() => NullableEnumaal_levelFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  not_after: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_agent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mfa_amr_claims: z.lazy(() => mfa_amr_claimsUncheckedUpdateManyWithoutSessionsNestedInputSchema).optional(),
  refresh_tokens: z.lazy(() => refresh_tokensUncheckedUpdateManyWithoutSessionsNestedInputSchema).optional()
}).strict();

export const sessionsUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<Prisma.sessionsUncheckedUpdateManyWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  factor_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aal: z.union([ z.lazy(() => aal_levelSchema),z.lazy(() => NullableEnumaal_levelFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  not_after: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_agent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const categoriesUpdateWithoutUsersInputSchema: z.ZodType<Prisma.categoriesUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stores: z.lazy(() => storesUpdateOneWithoutCategoriesNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutCategoriesNestedInputSchema).optional()
}).strict();

export const categoriesUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.categoriesUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutCategoriesNestedInputSchema).optional()
}).strict();

export const categoriesUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<Prisma.categoriesUncheckedUpdateManyWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const customersUpdateWithoutUsersInputSchema: z.ZodType<Prisma.customersUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stores: z.lazy(() => storesUpdateOneWithoutCustomersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutCustomersNestedInputSchema).optional()
}).strict();

export const customersUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.customersUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutCustomersNestedInputSchema).optional()
}).strict();

export const customersUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<Prisma.customersUncheckedUpdateManyWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const domain_ownersUpdateWithoutUsersInputSchema: z.ZodType<Prisma.domain_ownersUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  domain_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const domain_ownersUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.domain_ownersUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  domain_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const domain_ownersUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<Prisma.domain_ownersUncheckedUpdateManyWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  domain_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ordersUpdateWithoutUsersInputSchema: z.ZodType<Prisma.ordersUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order_items: z.lazy(() => order_itemsUpdateManyWithoutOrdersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateOneWithoutOrdersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateOneWithoutOrdersNestedInputSchema).optional()
}).strict();

export const ordersUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.ordersUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order_items: z.lazy(() => order_itemsUncheckedUpdateManyWithoutOrdersNestedInputSchema).optional()
}).strict();

export const ordersUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<Prisma.ordersUncheckedUpdateManyWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const productsUpdateWithoutUsersInputSchema: z.ZodType<Prisma.productsUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  images: z.union([ z.lazy(() => productsUpdateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order_items: z.lazy(() => order_itemsUpdateManyWithoutProductsNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUpdateOneWithoutProductsNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateOneWithoutProductsNestedInputSchema).optional()
}).strict();

export const productsUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.productsUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  images: z.union([ z.lazy(() => productsUpdateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order_items: z.lazy(() => order_itemsUncheckedUpdateManyWithoutProductsNestedInputSchema).optional()
}).strict();

export const productsUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<Prisma.productsUncheckedUpdateManyWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  images: z.union([ z.lazy(() => productsUpdateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const storesUpdateWithoutUsersInputSchema: z.ZodType<Prisma.storesUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banner_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  theme_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categories: z.lazy(() => categoriesUpdateManyWithoutStoresNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateManyWithoutStoresNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutStoresNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutStoresNestedInputSchema).optional(),
  sales: z.lazy(() => salesUpdateManyWithoutStoresNestedInputSchema).optional()
}).strict();

export const storesUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.storesUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banner_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  theme_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categories: z.lazy(() => categoriesUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  customers: z.lazy(() => customersUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutStoresNestedInputSchema).optional(),
  sales: z.lazy(() => salesUncheckedUpdateManyWithoutStoresNestedInputSchema).optional()
}).strict();

export const storesUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<Prisma.storesUncheckedUpdateManyWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banner_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsapp_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instagram_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  theme_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const productsCreateManyCategoriesInputSchema: z.ZodType<Prisma.productsCreateManyCategoriesInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  stock: z.number().int().optional(),
  is_active: z.boolean().optional().nullable(),
  image: z.string().optional().nullable(),
  images: z.union([ z.lazy(() => productsCreateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable()
}).strict();

export const productsUpdateWithoutCategoriesInputSchema: z.ZodType<Prisma.productsUpdateWithoutCategoriesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  images: z.union([ z.lazy(() => productsUpdateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order_items: z.lazy(() => order_itemsUpdateManyWithoutProductsNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateOneWithoutProductsNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutProductsNestedInputSchema).optional()
}).strict();

export const productsUncheckedUpdateWithoutCategoriesInputSchema: z.ZodType<Prisma.productsUncheckedUpdateWithoutCategoriesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  images: z.union([ z.lazy(() => productsUpdateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order_items: z.lazy(() => order_itemsUncheckedUpdateManyWithoutProductsNestedInputSchema).optional()
}).strict();

export const productsUncheckedUpdateManyWithoutCategoriesInputSchema: z.ZodType<Prisma.productsUncheckedUpdateManyWithoutCategoriesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  images: z.union([ z.lazy(() => productsUpdateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const credit_transactionsCreateManyCredit_accountsInputSchema: z.ZodType<Prisma.credit_transactionsCreateManyCredit_accountsInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  created_at: z.coerce.date().optional()
}).strict();

export const credit_transactionsUpdateWithoutCredit_accountsInputSchema: z.ZodType<Prisma.credit_transactionsUpdateWithoutCredit_accountsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const credit_transactionsUncheckedUpdateWithoutCredit_accountsInputSchema: z.ZodType<Prisma.credit_transactionsUncheckedUpdateWithoutCredit_accountsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const credit_transactionsUncheckedUpdateManyWithoutCredit_accountsInputSchema: z.ZodType<Prisma.credit_transactionsUncheckedUpdateManyWithoutCredit_accountsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ordersCreateManyCustomersInputSchema: z.ZodType<Prisma.ordersCreateManyCustomersInput> = z.object({
  id: z.string().optional(),
  store_owner_id: z.string(),
  customer_name: z.string(),
  customer_email: z.string().optional().nullable(),
  customer_phone: z.string().optional().nullable(),
  total_amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable(),
  store_id: z.string().optional().nullable()
}).strict();

export const ordersUpdateWithoutCustomersInputSchema: z.ZodType<Prisma.ordersUpdateWithoutCustomersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order_items: z.lazy(() => order_itemsUpdateManyWithoutOrdersNestedInputSchema).optional(),
  stores: z.lazy(() => storesUpdateOneWithoutOrdersNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutOrdersNestedInputSchema).optional()
}).strict();

export const ordersUncheckedUpdateWithoutCustomersInputSchema: z.ZodType<Prisma.ordersUncheckedUpdateWithoutCustomersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order_items: z.lazy(() => order_itemsUncheckedUpdateManyWithoutOrdersNestedInputSchema).optional()
}).strict();

export const ordersUncheckedUpdateManyWithoutCustomersInputSchema: z.ZodType<Prisma.ordersUncheckedUpdateManyWithoutCustomersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  store_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const order_itemsCreateManyOrdersInputSchema: z.ZodType<Prisma.order_itemsCreateManyOrdersInput> = z.object({
  id: z.string().optional(),
  product_id: z.string(),
  quantity: z.number().int().optional(),
  unit_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  total_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  created_at: z.coerce.date().optional().nullable()
}).strict();

export const order_itemsUpdateWithoutOrdersInputSchema: z.ZodType<Prisma.order_itemsUpdateWithoutOrdersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  total_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  products: z.lazy(() => productsUpdateOneRequiredWithoutOrder_itemsNestedInputSchema).optional()
}).strict();

export const order_itemsUncheckedUpdateWithoutOrdersInputSchema: z.ZodType<Prisma.order_itemsUncheckedUpdateWithoutOrdersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  product_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  total_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const order_itemsUncheckedUpdateManyWithoutOrdersInputSchema: z.ZodType<Prisma.order_itemsUncheckedUpdateManyWithoutOrdersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  product_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  total_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const order_itemsCreateManyProductsInputSchema: z.ZodType<Prisma.order_itemsCreateManyProductsInput> = z.object({
  id: z.string().optional(),
  order_id: z.string(),
  quantity: z.number().int().optional(),
  unit_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  total_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  created_at: z.coerce.date().optional().nullable()
}).strict();

export const order_itemsUpdateWithoutProductsInputSchema: z.ZodType<Prisma.order_itemsUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  total_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  orders: z.lazy(() => ordersUpdateOneRequiredWithoutOrder_itemsNestedInputSchema).optional()
}).strict();

export const order_itemsUncheckedUpdateWithoutProductsInputSchema: z.ZodType<Prisma.order_itemsUncheckedUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  total_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const order_itemsUncheckedUpdateManyWithoutProductsInputSchema: z.ZodType<Prisma.order_itemsUncheckedUpdateManyWithoutProductsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  total_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const categoriesCreateManyStoresInputSchema: z.ZodType<Prisma.categoriesCreateManyStoresInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  name: z.string(),
  color: z.string().optional().nullable(),
  image: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable()
}).strict();

export const customersCreateManyStoresInputSchema: z.ZodType<Prisma.customersCreateManyStoresInput> = z.object({
  id: z.string().optional(),
  store_owner_id: z.string(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable()
}).strict();

export const ordersCreateManyStoresInputSchema: z.ZodType<Prisma.ordersCreateManyStoresInput> = z.object({
  id: z.string().optional(),
  store_owner_id: z.string(),
  customer_id: z.string().optional().nullable(),
  customer_name: z.string(),
  customer_email: z.string().optional().nullable(),
  customer_phone: z.string().optional().nullable(),
  total_amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional().nullable(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable()
}).strict();

export const productsCreateManyStoresInputSchema: z.ZodType<Prisma.productsCreateManyStoresInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  category_id: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  stock: z.number().int().optional(),
  is_active: z.boolean().optional().nullable(),
  image: z.string().optional().nullable(),
  images: z.union([ z.lazy(() => productsCreateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.coerce.date().optional().nullable(),
  updated_at: z.coerce.date().optional().nullable()
}).strict();

export const salesCreateManyStoresInputSchema: z.ZodType<Prisma.salesCreateManyStoresInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  product_name: z.string(),
  quantity: z.number().int().optional(),
  unit_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  total_price: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  sale_date: z.coerce.date(),
  status: z.string().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const categoriesUpdateWithoutStoresInputSchema: z.ZodType<Prisma.categoriesUpdateWithoutStoresInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutCategoriesNestedInputSchema).optional(),
  products: z.lazy(() => productsUpdateManyWithoutCategoriesNestedInputSchema).optional()
}).strict();

export const categoriesUncheckedUpdateWithoutStoresInputSchema: z.ZodType<Prisma.categoriesUncheckedUpdateWithoutStoresInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  products: z.lazy(() => productsUncheckedUpdateManyWithoutCategoriesNestedInputSchema).optional()
}).strict();

export const categoriesUncheckedUpdateManyWithoutStoresInputSchema: z.ZodType<Prisma.categoriesUncheckedUpdateManyWithoutStoresInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const customersUpdateWithoutStoresInputSchema: z.ZodType<Prisma.customersUpdateWithoutStoresInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  orders: z.lazy(() => ordersUpdateManyWithoutCustomersNestedInputSchema).optional()
}).strict();

export const customersUncheckedUpdateWithoutStoresInputSchema: z.ZodType<Prisma.customersUncheckedUpdateWithoutStoresInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  orders: z.lazy(() => ordersUncheckedUpdateManyWithoutCustomersNestedInputSchema).optional()
}).strict();

export const customersUncheckedUpdateManyWithoutStoresInputSchema: z.ZodType<Prisma.customersUncheckedUpdateManyWithoutStoresInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ordersUpdateWithoutStoresInputSchema: z.ZodType<Prisma.ordersUpdateWithoutStoresInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order_items: z.lazy(() => order_itemsUpdateManyWithoutOrdersNestedInputSchema).optional(),
  customers: z.lazy(() => customersUpdateOneWithoutOrdersNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutOrdersNestedInputSchema).optional()
}).strict();

export const ordersUncheckedUpdateWithoutStoresInputSchema: z.ZodType<Prisma.ordersUncheckedUpdateWithoutStoresInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order_items: z.lazy(() => order_itemsUncheckedUpdateManyWithoutOrdersNestedInputSchema).optional()
}).strict();

export const ordersUncheckedUpdateManyWithoutStoresInputSchema: z.ZodType<Prisma.ordersUncheckedUpdateManyWithoutStoresInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  store_owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customer_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer_phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total_amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const productsUpdateWithoutStoresInputSchema: z.ZodType<Prisma.productsUpdateWithoutStoresInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  images: z.union([ z.lazy(() => productsUpdateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order_items: z.lazy(() => order_itemsUpdateManyWithoutProductsNestedInputSchema).optional(),
  categories: z.lazy(() => categoriesUpdateOneWithoutProductsNestedInputSchema).optional(),
  users: z.lazy(() => usersUpdateOneRequiredWithoutProductsNestedInputSchema).optional()
}).strict();

export const productsUncheckedUpdateWithoutStoresInputSchema: z.ZodType<Prisma.productsUncheckedUpdateWithoutStoresInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  images: z.union([ z.lazy(() => productsUpdateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order_items: z.lazy(() => order_itemsUncheckedUpdateManyWithoutProductsNestedInputSchema).optional()
}).strict();

export const productsUncheckedUpdateManyWithoutStoresInputSchema: z.ZodType<Prisma.productsUncheckedUpdateManyWithoutStoresInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  images: z.union([ z.lazy(() => productsUpdateimagesInputSchema),z.string().array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const salesUpdateWithoutStoresInputSchema: z.ZodType<Prisma.salesUpdateWithoutStoresInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  product_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  total_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  sale_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const salesUncheckedUpdateWithoutStoresInputSchema: z.ZodType<Prisma.salesUncheckedUpdateWithoutStoresInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  product_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  total_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  sale_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const salesUncheckedUpdateManyWithoutStoresInputSchema: z.ZodType<Prisma.salesUncheckedUpdateManyWithoutStoresInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  product_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  total_price: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  sale_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DomainCreateManyUserInputSchema: z.ZodType<Prisma.DomainCreateManyUserInput> = z.object({
  id: z.string().uuid().optional(),
  slug: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const DomainUpdateWithoutUserInputSchema: z.ZodType<Prisma.DomainUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutDomainNestedInputSchema).optional()
}).strict();

export const DomainUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.DomainUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutDomainNestedInputSchema).optional()
}).strict();

export const DomainUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.DomainUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductCreateManyDomainInputSchema: z.ZodType<Prisma.ProductCreateManyDomainInput> = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  description: z.string(),
  price: z.number(),
  imageUrl: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const ProductUpdateWithoutDomainInputSchema: z.ZodType<Prisma.ProductUpdateWithoutDomainInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductUncheckedUpdateWithoutDomainInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateWithoutDomainInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductUncheckedUpdateManyWithoutDomainInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyWithoutDomainInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const audit_log_entriesFindFirstArgsSchema: z.ZodType<Prisma.audit_log_entriesFindFirstArgs> = z.object({
  select: audit_log_entriesSelectSchema.optional(),
  where: audit_log_entriesWhereInputSchema.optional(),
  orderBy: z.union([ audit_log_entriesOrderByWithRelationInputSchema.array(),audit_log_entriesOrderByWithRelationInputSchema ]).optional(),
  cursor: audit_log_entriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Audit_log_entriesScalarFieldEnumSchema,Audit_log_entriesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const audit_log_entriesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.audit_log_entriesFindFirstOrThrowArgs> = z.object({
  select: audit_log_entriesSelectSchema.optional(),
  where: audit_log_entriesWhereInputSchema.optional(),
  orderBy: z.union([ audit_log_entriesOrderByWithRelationInputSchema.array(),audit_log_entriesOrderByWithRelationInputSchema ]).optional(),
  cursor: audit_log_entriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Audit_log_entriesScalarFieldEnumSchema,Audit_log_entriesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const audit_log_entriesFindManyArgsSchema: z.ZodType<Prisma.audit_log_entriesFindManyArgs> = z.object({
  select: audit_log_entriesSelectSchema.optional(),
  where: audit_log_entriesWhereInputSchema.optional(),
  orderBy: z.union([ audit_log_entriesOrderByWithRelationInputSchema.array(),audit_log_entriesOrderByWithRelationInputSchema ]).optional(),
  cursor: audit_log_entriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Audit_log_entriesScalarFieldEnumSchema,Audit_log_entriesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const audit_log_entriesAggregateArgsSchema: z.ZodType<Prisma.audit_log_entriesAggregateArgs> = z.object({
  where: audit_log_entriesWhereInputSchema.optional(),
  orderBy: z.union([ audit_log_entriesOrderByWithRelationInputSchema.array(),audit_log_entriesOrderByWithRelationInputSchema ]).optional(),
  cursor: audit_log_entriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const audit_log_entriesGroupByArgsSchema: z.ZodType<Prisma.audit_log_entriesGroupByArgs> = z.object({
  where: audit_log_entriesWhereInputSchema.optional(),
  orderBy: z.union([ audit_log_entriesOrderByWithAggregationInputSchema.array(),audit_log_entriesOrderByWithAggregationInputSchema ]).optional(),
  by: Audit_log_entriesScalarFieldEnumSchema.array(),
  having: audit_log_entriesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const audit_log_entriesFindUniqueArgsSchema: z.ZodType<Prisma.audit_log_entriesFindUniqueArgs> = z.object({
  select: audit_log_entriesSelectSchema.optional(),
  where: audit_log_entriesWhereUniqueInputSchema,
}).strict() ;

export const audit_log_entriesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.audit_log_entriesFindUniqueOrThrowArgs> = z.object({
  select: audit_log_entriesSelectSchema.optional(),
  where: audit_log_entriesWhereUniqueInputSchema,
}).strict() ;

export const flow_stateFindFirstArgsSchema: z.ZodType<Prisma.flow_stateFindFirstArgs> = z.object({
  select: flow_stateSelectSchema.optional(),
  include: flow_stateIncludeSchema.optional(),
  where: flow_stateWhereInputSchema.optional(),
  orderBy: z.union([ flow_stateOrderByWithRelationInputSchema.array(),flow_stateOrderByWithRelationInputSchema ]).optional(),
  cursor: flow_stateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Flow_stateScalarFieldEnumSchema,Flow_stateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const flow_stateFindFirstOrThrowArgsSchema: z.ZodType<Prisma.flow_stateFindFirstOrThrowArgs> = z.object({
  select: flow_stateSelectSchema.optional(),
  include: flow_stateIncludeSchema.optional(),
  where: flow_stateWhereInputSchema.optional(),
  orderBy: z.union([ flow_stateOrderByWithRelationInputSchema.array(),flow_stateOrderByWithRelationInputSchema ]).optional(),
  cursor: flow_stateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Flow_stateScalarFieldEnumSchema,Flow_stateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const flow_stateFindManyArgsSchema: z.ZodType<Prisma.flow_stateFindManyArgs> = z.object({
  select: flow_stateSelectSchema.optional(),
  include: flow_stateIncludeSchema.optional(),
  where: flow_stateWhereInputSchema.optional(),
  orderBy: z.union([ flow_stateOrderByWithRelationInputSchema.array(),flow_stateOrderByWithRelationInputSchema ]).optional(),
  cursor: flow_stateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Flow_stateScalarFieldEnumSchema,Flow_stateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const flow_stateAggregateArgsSchema: z.ZodType<Prisma.flow_stateAggregateArgs> = z.object({
  where: flow_stateWhereInputSchema.optional(),
  orderBy: z.union([ flow_stateOrderByWithRelationInputSchema.array(),flow_stateOrderByWithRelationInputSchema ]).optional(),
  cursor: flow_stateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const flow_stateGroupByArgsSchema: z.ZodType<Prisma.flow_stateGroupByArgs> = z.object({
  where: flow_stateWhereInputSchema.optional(),
  orderBy: z.union([ flow_stateOrderByWithAggregationInputSchema.array(),flow_stateOrderByWithAggregationInputSchema ]).optional(),
  by: Flow_stateScalarFieldEnumSchema.array(),
  having: flow_stateScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const flow_stateFindUniqueArgsSchema: z.ZodType<Prisma.flow_stateFindUniqueArgs> = z.object({
  select: flow_stateSelectSchema.optional(),
  include: flow_stateIncludeSchema.optional(),
  where: flow_stateWhereUniqueInputSchema,
}).strict() ;

export const flow_stateFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.flow_stateFindUniqueOrThrowArgs> = z.object({
  select: flow_stateSelectSchema.optional(),
  include: flow_stateIncludeSchema.optional(),
  where: flow_stateWhereUniqueInputSchema,
}).strict() ;

export const identitiesFindFirstArgsSchema: z.ZodType<Prisma.identitiesFindFirstArgs> = z.object({
  select: identitiesSelectSchema.optional(),
  include: identitiesIncludeSchema.optional(),
  where: identitiesWhereInputSchema.optional(),
  orderBy: z.union([ identitiesOrderByWithRelationInputSchema.array(),identitiesOrderByWithRelationInputSchema ]).optional(),
  cursor: identitiesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ IdentitiesScalarFieldEnumSchema,IdentitiesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const identitiesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.identitiesFindFirstOrThrowArgs> = z.object({
  select: identitiesSelectSchema.optional(),
  include: identitiesIncludeSchema.optional(),
  where: identitiesWhereInputSchema.optional(),
  orderBy: z.union([ identitiesOrderByWithRelationInputSchema.array(),identitiesOrderByWithRelationInputSchema ]).optional(),
  cursor: identitiesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ IdentitiesScalarFieldEnumSchema,IdentitiesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const identitiesFindManyArgsSchema: z.ZodType<Prisma.identitiesFindManyArgs> = z.object({
  select: identitiesSelectSchema.optional(),
  include: identitiesIncludeSchema.optional(),
  where: identitiesWhereInputSchema.optional(),
  orderBy: z.union([ identitiesOrderByWithRelationInputSchema.array(),identitiesOrderByWithRelationInputSchema ]).optional(),
  cursor: identitiesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ IdentitiesScalarFieldEnumSchema,IdentitiesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const identitiesAggregateArgsSchema: z.ZodType<Prisma.identitiesAggregateArgs> = z.object({
  where: identitiesWhereInputSchema.optional(),
  orderBy: z.union([ identitiesOrderByWithRelationInputSchema.array(),identitiesOrderByWithRelationInputSchema ]).optional(),
  cursor: identitiesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const identitiesGroupByArgsSchema: z.ZodType<Prisma.identitiesGroupByArgs> = z.object({
  where: identitiesWhereInputSchema.optional(),
  orderBy: z.union([ identitiesOrderByWithAggregationInputSchema.array(),identitiesOrderByWithAggregationInputSchema ]).optional(),
  by: IdentitiesScalarFieldEnumSchema.array(),
  having: identitiesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const identitiesFindUniqueArgsSchema: z.ZodType<Prisma.identitiesFindUniqueArgs> = z.object({
  select: identitiesSelectSchema.optional(),
  include: identitiesIncludeSchema.optional(),
  where: identitiesWhereUniqueInputSchema,
}).strict() ;

export const identitiesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.identitiesFindUniqueOrThrowArgs> = z.object({
  select: identitiesSelectSchema.optional(),
  include: identitiesIncludeSchema.optional(),
  where: identitiesWhereUniqueInputSchema,
}).strict() ;

export const instancesFindFirstArgsSchema: z.ZodType<Prisma.instancesFindFirstArgs> = z.object({
  select: instancesSelectSchema.optional(),
  where: instancesWhereInputSchema.optional(),
  orderBy: z.union([ instancesOrderByWithRelationInputSchema.array(),instancesOrderByWithRelationInputSchema ]).optional(),
  cursor: instancesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InstancesScalarFieldEnumSchema,InstancesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const instancesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.instancesFindFirstOrThrowArgs> = z.object({
  select: instancesSelectSchema.optional(),
  where: instancesWhereInputSchema.optional(),
  orderBy: z.union([ instancesOrderByWithRelationInputSchema.array(),instancesOrderByWithRelationInputSchema ]).optional(),
  cursor: instancesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InstancesScalarFieldEnumSchema,InstancesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const instancesFindManyArgsSchema: z.ZodType<Prisma.instancesFindManyArgs> = z.object({
  select: instancesSelectSchema.optional(),
  where: instancesWhereInputSchema.optional(),
  orderBy: z.union([ instancesOrderByWithRelationInputSchema.array(),instancesOrderByWithRelationInputSchema ]).optional(),
  cursor: instancesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InstancesScalarFieldEnumSchema,InstancesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const instancesAggregateArgsSchema: z.ZodType<Prisma.instancesAggregateArgs> = z.object({
  where: instancesWhereInputSchema.optional(),
  orderBy: z.union([ instancesOrderByWithRelationInputSchema.array(),instancesOrderByWithRelationInputSchema ]).optional(),
  cursor: instancesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const instancesGroupByArgsSchema: z.ZodType<Prisma.instancesGroupByArgs> = z.object({
  where: instancesWhereInputSchema.optional(),
  orderBy: z.union([ instancesOrderByWithAggregationInputSchema.array(),instancesOrderByWithAggregationInputSchema ]).optional(),
  by: InstancesScalarFieldEnumSchema.array(),
  having: instancesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const instancesFindUniqueArgsSchema: z.ZodType<Prisma.instancesFindUniqueArgs> = z.object({
  select: instancesSelectSchema.optional(),
  where: instancesWhereUniqueInputSchema,
}).strict() ;

export const instancesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.instancesFindUniqueOrThrowArgs> = z.object({
  select: instancesSelectSchema.optional(),
  where: instancesWhereUniqueInputSchema,
}).strict() ;

export const mfa_amr_claimsFindFirstArgsSchema: z.ZodType<Prisma.mfa_amr_claimsFindFirstArgs> = z.object({
  select: mfa_amr_claimsSelectSchema.optional(),
  include: mfa_amr_claimsIncludeSchema.optional(),
  where: mfa_amr_claimsWhereInputSchema.optional(),
  orderBy: z.union([ mfa_amr_claimsOrderByWithRelationInputSchema.array(),mfa_amr_claimsOrderByWithRelationInputSchema ]).optional(),
  cursor: mfa_amr_claimsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Mfa_amr_claimsScalarFieldEnumSchema,Mfa_amr_claimsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const mfa_amr_claimsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.mfa_amr_claimsFindFirstOrThrowArgs> = z.object({
  select: mfa_amr_claimsSelectSchema.optional(),
  include: mfa_amr_claimsIncludeSchema.optional(),
  where: mfa_amr_claimsWhereInputSchema.optional(),
  orderBy: z.union([ mfa_amr_claimsOrderByWithRelationInputSchema.array(),mfa_amr_claimsOrderByWithRelationInputSchema ]).optional(),
  cursor: mfa_amr_claimsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Mfa_amr_claimsScalarFieldEnumSchema,Mfa_amr_claimsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const mfa_amr_claimsFindManyArgsSchema: z.ZodType<Prisma.mfa_amr_claimsFindManyArgs> = z.object({
  select: mfa_amr_claimsSelectSchema.optional(),
  include: mfa_amr_claimsIncludeSchema.optional(),
  where: mfa_amr_claimsWhereInputSchema.optional(),
  orderBy: z.union([ mfa_amr_claimsOrderByWithRelationInputSchema.array(),mfa_amr_claimsOrderByWithRelationInputSchema ]).optional(),
  cursor: mfa_amr_claimsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Mfa_amr_claimsScalarFieldEnumSchema,Mfa_amr_claimsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const mfa_amr_claimsAggregateArgsSchema: z.ZodType<Prisma.mfa_amr_claimsAggregateArgs> = z.object({
  where: mfa_amr_claimsWhereInputSchema.optional(),
  orderBy: z.union([ mfa_amr_claimsOrderByWithRelationInputSchema.array(),mfa_amr_claimsOrderByWithRelationInputSchema ]).optional(),
  cursor: mfa_amr_claimsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const mfa_amr_claimsGroupByArgsSchema: z.ZodType<Prisma.mfa_amr_claimsGroupByArgs> = z.object({
  where: mfa_amr_claimsWhereInputSchema.optional(),
  orderBy: z.union([ mfa_amr_claimsOrderByWithAggregationInputSchema.array(),mfa_amr_claimsOrderByWithAggregationInputSchema ]).optional(),
  by: Mfa_amr_claimsScalarFieldEnumSchema.array(),
  having: mfa_amr_claimsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const mfa_amr_claimsFindUniqueArgsSchema: z.ZodType<Prisma.mfa_amr_claimsFindUniqueArgs> = z.object({
  select: mfa_amr_claimsSelectSchema.optional(),
  include: mfa_amr_claimsIncludeSchema.optional(),
  where: mfa_amr_claimsWhereUniqueInputSchema,
}).strict() ;

export const mfa_amr_claimsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.mfa_amr_claimsFindUniqueOrThrowArgs> = z.object({
  select: mfa_amr_claimsSelectSchema.optional(),
  include: mfa_amr_claimsIncludeSchema.optional(),
  where: mfa_amr_claimsWhereUniqueInputSchema,
}).strict() ;

export const mfa_challengesFindFirstArgsSchema: z.ZodType<Prisma.mfa_challengesFindFirstArgs> = z.object({
  select: mfa_challengesSelectSchema.optional(),
  include: mfa_challengesIncludeSchema.optional(),
  where: mfa_challengesWhereInputSchema.optional(),
  orderBy: z.union([ mfa_challengesOrderByWithRelationInputSchema.array(),mfa_challengesOrderByWithRelationInputSchema ]).optional(),
  cursor: mfa_challengesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Mfa_challengesScalarFieldEnumSchema,Mfa_challengesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const mfa_challengesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.mfa_challengesFindFirstOrThrowArgs> = z.object({
  select: mfa_challengesSelectSchema.optional(),
  include: mfa_challengesIncludeSchema.optional(),
  where: mfa_challengesWhereInputSchema.optional(),
  orderBy: z.union([ mfa_challengesOrderByWithRelationInputSchema.array(),mfa_challengesOrderByWithRelationInputSchema ]).optional(),
  cursor: mfa_challengesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Mfa_challengesScalarFieldEnumSchema,Mfa_challengesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const mfa_challengesFindManyArgsSchema: z.ZodType<Prisma.mfa_challengesFindManyArgs> = z.object({
  select: mfa_challengesSelectSchema.optional(),
  include: mfa_challengesIncludeSchema.optional(),
  where: mfa_challengesWhereInputSchema.optional(),
  orderBy: z.union([ mfa_challengesOrderByWithRelationInputSchema.array(),mfa_challengesOrderByWithRelationInputSchema ]).optional(),
  cursor: mfa_challengesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Mfa_challengesScalarFieldEnumSchema,Mfa_challengesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const mfa_challengesAggregateArgsSchema: z.ZodType<Prisma.mfa_challengesAggregateArgs> = z.object({
  where: mfa_challengesWhereInputSchema.optional(),
  orderBy: z.union([ mfa_challengesOrderByWithRelationInputSchema.array(),mfa_challengesOrderByWithRelationInputSchema ]).optional(),
  cursor: mfa_challengesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const mfa_challengesGroupByArgsSchema: z.ZodType<Prisma.mfa_challengesGroupByArgs> = z.object({
  where: mfa_challengesWhereInputSchema.optional(),
  orderBy: z.union([ mfa_challengesOrderByWithAggregationInputSchema.array(),mfa_challengesOrderByWithAggregationInputSchema ]).optional(),
  by: Mfa_challengesScalarFieldEnumSchema.array(),
  having: mfa_challengesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const mfa_challengesFindUniqueArgsSchema: z.ZodType<Prisma.mfa_challengesFindUniqueArgs> = z.object({
  select: mfa_challengesSelectSchema.optional(),
  include: mfa_challengesIncludeSchema.optional(),
  where: mfa_challengesWhereUniqueInputSchema,
}).strict() ;

export const mfa_challengesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.mfa_challengesFindUniqueOrThrowArgs> = z.object({
  select: mfa_challengesSelectSchema.optional(),
  include: mfa_challengesIncludeSchema.optional(),
  where: mfa_challengesWhereUniqueInputSchema,
}).strict() ;

export const mfa_factorsFindFirstArgsSchema: z.ZodType<Prisma.mfa_factorsFindFirstArgs> = z.object({
  select: mfa_factorsSelectSchema.optional(),
  include: mfa_factorsIncludeSchema.optional(),
  where: mfa_factorsWhereInputSchema.optional(),
  orderBy: z.union([ mfa_factorsOrderByWithRelationInputSchema.array(),mfa_factorsOrderByWithRelationInputSchema ]).optional(),
  cursor: mfa_factorsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Mfa_factorsScalarFieldEnumSchema,Mfa_factorsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const mfa_factorsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.mfa_factorsFindFirstOrThrowArgs> = z.object({
  select: mfa_factorsSelectSchema.optional(),
  include: mfa_factorsIncludeSchema.optional(),
  where: mfa_factorsWhereInputSchema.optional(),
  orderBy: z.union([ mfa_factorsOrderByWithRelationInputSchema.array(),mfa_factorsOrderByWithRelationInputSchema ]).optional(),
  cursor: mfa_factorsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Mfa_factorsScalarFieldEnumSchema,Mfa_factorsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const mfa_factorsFindManyArgsSchema: z.ZodType<Prisma.mfa_factorsFindManyArgs> = z.object({
  select: mfa_factorsSelectSchema.optional(),
  include: mfa_factorsIncludeSchema.optional(),
  where: mfa_factorsWhereInputSchema.optional(),
  orderBy: z.union([ mfa_factorsOrderByWithRelationInputSchema.array(),mfa_factorsOrderByWithRelationInputSchema ]).optional(),
  cursor: mfa_factorsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Mfa_factorsScalarFieldEnumSchema,Mfa_factorsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const mfa_factorsAggregateArgsSchema: z.ZodType<Prisma.mfa_factorsAggregateArgs> = z.object({
  where: mfa_factorsWhereInputSchema.optional(),
  orderBy: z.union([ mfa_factorsOrderByWithRelationInputSchema.array(),mfa_factorsOrderByWithRelationInputSchema ]).optional(),
  cursor: mfa_factorsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const mfa_factorsGroupByArgsSchema: z.ZodType<Prisma.mfa_factorsGroupByArgs> = z.object({
  where: mfa_factorsWhereInputSchema.optional(),
  orderBy: z.union([ mfa_factorsOrderByWithAggregationInputSchema.array(),mfa_factorsOrderByWithAggregationInputSchema ]).optional(),
  by: Mfa_factorsScalarFieldEnumSchema.array(),
  having: mfa_factorsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const mfa_factorsFindUniqueArgsSchema: z.ZodType<Prisma.mfa_factorsFindUniqueArgs> = z.object({
  select: mfa_factorsSelectSchema.optional(),
  include: mfa_factorsIncludeSchema.optional(),
  where: mfa_factorsWhereUniqueInputSchema,
}).strict() ;

export const mfa_factorsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.mfa_factorsFindUniqueOrThrowArgs> = z.object({
  select: mfa_factorsSelectSchema.optional(),
  include: mfa_factorsIncludeSchema.optional(),
  where: mfa_factorsWhereUniqueInputSchema,
}).strict() ;

export const one_time_tokensFindFirstArgsSchema: z.ZodType<Prisma.one_time_tokensFindFirstArgs> = z.object({
  select: one_time_tokensSelectSchema.optional(),
  include: one_time_tokensIncludeSchema.optional(),
  where: one_time_tokensWhereInputSchema.optional(),
  orderBy: z.union([ one_time_tokensOrderByWithRelationInputSchema.array(),one_time_tokensOrderByWithRelationInputSchema ]).optional(),
  cursor: one_time_tokensWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ One_time_tokensScalarFieldEnumSchema,One_time_tokensScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const one_time_tokensFindFirstOrThrowArgsSchema: z.ZodType<Prisma.one_time_tokensFindFirstOrThrowArgs> = z.object({
  select: one_time_tokensSelectSchema.optional(),
  include: one_time_tokensIncludeSchema.optional(),
  where: one_time_tokensWhereInputSchema.optional(),
  orderBy: z.union([ one_time_tokensOrderByWithRelationInputSchema.array(),one_time_tokensOrderByWithRelationInputSchema ]).optional(),
  cursor: one_time_tokensWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ One_time_tokensScalarFieldEnumSchema,One_time_tokensScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const one_time_tokensFindManyArgsSchema: z.ZodType<Prisma.one_time_tokensFindManyArgs> = z.object({
  select: one_time_tokensSelectSchema.optional(),
  include: one_time_tokensIncludeSchema.optional(),
  where: one_time_tokensWhereInputSchema.optional(),
  orderBy: z.union([ one_time_tokensOrderByWithRelationInputSchema.array(),one_time_tokensOrderByWithRelationInputSchema ]).optional(),
  cursor: one_time_tokensWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ One_time_tokensScalarFieldEnumSchema,One_time_tokensScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const one_time_tokensAggregateArgsSchema: z.ZodType<Prisma.one_time_tokensAggregateArgs> = z.object({
  where: one_time_tokensWhereInputSchema.optional(),
  orderBy: z.union([ one_time_tokensOrderByWithRelationInputSchema.array(),one_time_tokensOrderByWithRelationInputSchema ]).optional(),
  cursor: one_time_tokensWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const one_time_tokensGroupByArgsSchema: z.ZodType<Prisma.one_time_tokensGroupByArgs> = z.object({
  where: one_time_tokensWhereInputSchema.optional(),
  orderBy: z.union([ one_time_tokensOrderByWithAggregationInputSchema.array(),one_time_tokensOrderByWithAggregationInputSchema ]).optional(),
  by: One_time_tokensScalarFieldEnumSchema.array(),
  having: one_time_tokensScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const one_time_tokensFindUniqueArgsSchema: z.ZodType<Prisma.one_time_tokensFindUniqueArgs> = z.object({
  select: one_time_tokensSelectSchema.optional(),
  include: one_time_tokensIncludeSchema.optional(),
  where: one_time_tokensWhereUniqueInputSchema,
}).strict() ;

export const one_time_tokensFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.one_time_tokensFindUniqueOrThrowArgs> = z.object({
  select: one_time_tokensSelectSchema.optional(),
  include: one_time_tokensIncludeSchema.optional(),
  where: one_time_tokensWhereUniqueInputSchema,
}).strict() ;

export const refresh_tokensFindFirstArgsSchema: z.ZodType<Prisma.refresh_tokensFindFirstArgs> = z.object({
  select: refresh_tokensSelectSchema.optional(),
  include: refresh_tokensIncludeSchema.optional(),
  where: refresh_tokensWhereInputSchema.optional(),
  orderBy: z.union([ refresh_tokensOrderByWithRelationInputSchema.array(),refresh_tokensOrderByWithRelationInputSchema ]).optional(),
  cursor: refresh_tokensWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Refresh_tokensScalarFieldEnumSchema,Refresh_tokensScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const refresh_tokensFindFirstOrThrowArgsSchema: z.ZodType<Prisma.refresh_tokensFindFirstOrThrowArgs> = z.object({
  select: refresh_tokensSelectSchema.optional(),
  include: refresh_tokensIncludeSchema.optional(),
  where: refresh_tokensWhereInputSchema.optional(),
  orderBy: z.union([ refresh_tokensOrderByWithRelationInputSchema.array(),refresh_tokensOrderByWithRelationInputSchema ]).optional(),
  cursor: refresh_tokensWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Refresh_tokensScalarFieldEnumSchema,Refresh_tokensScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const refresh_tokensFindManyArgsSchema: z.ZodType<Prisma.refresh_tokensFindManyArgs> = z.object({
  select: refresh_tokensSelectSchema.optional(),
  include: refresh_tokensIncludeSchema.optional(),
  where: refresh_tokensWhereInputSchema.optional(),
  orderBy: z.union([ refresh_tokensOrderByWithRelationInputSchema.array(),refresh_tokensOrderByWithRelationInputSchema ]).optional(),
  cursor: refresh_tokensWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Refresh_tokensScalarFieldEnumSchema,Refresh_tokensScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const refresh_tokensAggregateArgsSchema: z.ZodType<Prisma.refresh_tokensAggregateArgs> = z.object({
  where: refresh_tokensWhereInputSchema.optional(),
  orderBy: z.union([ refresh_tokensOrderByWithRelationInputSchema.array(),refresh_tokensOrderByWithRelationInputSchema ]).optional(),
  cursor: refresh_tokensWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const refresh_tokensGroupByArgsSchema: z.ZodType<Prisma.refresh_tokensGroupByArgs> = z.object({
  where: refresh_tokensWhereInputSchema.optional(),
  orderBy: z.union([ refresh_tokensOrderByWithAggregationInputSchema.array(),refresh_tokensOrderByWithAggregationInputSchema ]).optional(),
  by: Refresh_tokensScalarFieldEnumSchema.array(),
  having: refresh_tokensScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const refresh_tokensFindUniqueArgsSchema: z.ZodType<Prisma.refresh_tokensFindUniqueArgs> = z.object({
  select: refresh_tokensSelectSchema.optional(),
  include: refresh_tokensIncludeSchema.optional(),
  where: refresh_tokensWhereUniqueInputSchema,
}).strict() ;

export const refresh_tokensFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.refresh_tokensFindUniqueOrThrowArgs> = z.object({
  select: refresh_tokensSelectSchema.optional(),
  include: refresh_tokensIncludeSchema.optional(),
  where: refresh_tokensWhereUniqueInputSchema,
}).strict() ;

export const saml_providersFindFirstArgsSchema: z.ZodType<Prisma.saml_providersFindFirstArgs> = z.object({
  select: saml_providersSelectSchema.optional(),
  include: saml_providersIncludeSchema.optional(),
  where: saml_providersWhereInputSchema.optional(),
  orderBy: z.union([ saml_providersOrderByWithRelationInputSchema.array(),saml_providersOrderByWithRelationInputSchema ]).optional(),
  cursor: saml_providersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Saml_providersScalarFieldEnumSchema,Saml_providersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const saml_providersFindFirstOrThrowArgsSchema: z.ZodType<Prisma.saml_providersFindFirstOrThrowArgs> = z.object({
  select: saml_providersSelectSchema.optional(),
  include: saml_providersIncludeSchema.optional(),
  where: saml_providersWhereInputSchema.optional(),
  orderBy: z.union([ saml_providersOrderByWithRelationInputSchema.array(),saml_providersOrderByWithRelationInputSchema ]).optional(),
  cursor: saml_providersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Saml_providersScalarFieldEnumSchema,Saml_providersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const saml_providersFindManyArgsSchema: z.ZodType<Prisma.saml_providersFindManyArgs> = z.object({
  select: saml_providersSelectSchema.optional(),
  include: saml_providersIncludeSchema.optional(),
  where: saml_providersWhereInputSchema.optional(),
  orderBy: z.union([ saml_providersOrderByWithRelationInputSchema.array(),saml_providersOrderByWithRelationInputSchema ]).optional(),
  cursor: saml_providersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Saml_providersScalarFieldEnumSchema,Saml_providersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const saml_providersAggregateArgsSchema: z.ZodType<Prisma.saml_providersAggregateArgs> = z.object({
  where: saml_providersWhereInputSchema.optional(),
  orderBy: z.union([ saml_providersOrderByWithRelationInputSchema.array(),saml_providersOrderByWithRelationInputSchema ]).optional(),
  cursor: saml_providersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const saml_providersGroupByArgsSchema: z.ZodType<Prisma.saml_providersGroupByArgs> = z.object({
  where: saml_providersWhereInputSchema.optional(),
  orderBy: z.union([ saml_providersOrderByWithAggregationInputSchema.array(),saml_providersOrderByWithAggregationInputSchema ]).optional(),
  by: Saml_providersScalarFieldEnumSchema.array(),
  having: saml_providersScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const saml_providersFindUniqueArgsSchema: z.ZodType<Prisma.saml_providersFindUniqueArgs> = z.object({
  select: saml_providersSelectSchema.optional(),
  include: saml_providersIncludeSchema.optional(),
  where: saml_providersWhereUniqueInputSchema,
}).strict() ;

export const saml_providersFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.saml_providersFindUniqueOrThrowArgs> = z.object({
  select: saml_providersSelectSchema.optional(),
  include: saml_providersIncludeSchema.optional(),
  where: saml_providersWhereUniqueInputSchema,
}).strict() ;

export const saml_relay_statesFindFirstArgsSchema: z.ZodType<Prisma.saml_relay_statesFindFirstArgs> = z.object({
  select: saml_relay_statesSelectSchema.optional(),
  include: saml_relay_statesIncludeSchema.optional(),
  where: saml_relay_statesWhereInputSchema.optional(),
  orderBy: z.union([ saml_relay_statesOrderByWithRelationInputSchema.array(),saml_relay_statesOrderByWithRelationInputSchema ]).optional(),
  cursor: saml_relay_statesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Saml_relay_statesScalarFieldEnumSchema,Saml_relay_statesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const saml_relay_statesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.saml_relay_statesFindFirstOrThrowArgs> = z.object({
  select: saml_relay_statesSelectSchema.optional(),
  include: saml_relay_statesIncludeSchema.optional(),
  where: saml_relay_statesWhereInputSchema.optional(),
  orderBy: z.union([ saml_relay_statesOrderByWithRelationInputSchema.array(),saml_relay_statesOrderByWithRelationInputSchema ]).optional(),
  cursor: saml_relay_statesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Saml_relay_statesScalarFieldEnumSchema,Saml_relay_statesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const saml_relay_statesFindManyArgsSchema: z.ZodType<Prisma.saml_relay_statesFindManyArgs> = z.object({
  select: saml_relay_statesSelectSchema.optional(),
  include: saml_relay_statesIncludeSchema.optional(),
  where: saml_relay_statesWhereInputSchema.optional(),
  orderBy: z.union([ saml_relay_statesOrderByWithRelationInputSchema.array(),saml_relay_statesOrderByWithRelationInputSchema ]).optional(),
  cursor: saml_relay_statesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Saml_relay_statesScalarFieldEnumSchema,Saml_relay_statesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const saml_relay_statesAggregateArgsSchema: z.ZodType<Prisma.saml_relay_statesAggregateArgs> = z.object({
  where: saml_relay_statesWhereInputSchema.optional(),
  orderBy: z.union([ saml_relay_statesOrderByWithRelationInputSchema.array(),saml_relay_statesOrderByWithRelationInputSchema ]).optional(),
  cursor: saml_relay_statesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const saml_relay_statesGroupByArgsSchema: z.ZodType<Prisma.saml_relay_statesGroupByArgs> = z.object({
  where: saml_relay_statesWhereInputSchema.optional(),
  orderBy: z.union([ saml_relay_statesOrderByWithAggregationInputSchema.array(),saml_relay_statesOrderByWithAggregationInputSchema ]).optional(),
  by: Saml_relay_statesScalarFieldEnumSchema.array(),
  having: saml_relay_statesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const saml_relay_statesFindUniqueArgsSchema: z.ZodType<Prisma.saml_relay_statesFindUniqueArgs> = z.object({
  select: saml_relay_statesSelectSchema.optional(),
  include: saml_relay_statesIncludeSchema.optional(),
  where: saml_relay_statesWhereUniqueInputSchema,
}).strict() ;

export const saml_relay_statesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.saml_relay_statesFindUniqueOrThrowArgs> = z.object({
  select: saml_relay_statesSelectSchema.optional(),
  include: saml_relay_statesIncludeSchema.optional(),
  where: saml_relay_statesWhereUniqueInputSchema,
}).strict() ;

export const schema_migrationsFindFirstArgsSchema: z.ZodType<Prisma.schema_migrationsFindFirstArgs> = z.object({
  select: schema_migrationsSelectSchema.optional(),
  where: schema_migrationsWhereInputSchema.optional(),
  orderBy: z.union([ schema_migrationsOrderByWithRelationInputSchema.array(),schema_migrationsOrderByWithRelationInputSchema ]).optional(),
  cursor: schema_migrationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Schema_migrationsScalarFieldEnumSchema,Schema_migrationsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const schema_migrationsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.schema_migrationsFindFirstOrThrowArgs> = z.object({
  select: schema_migrationsSelectSchema.optional(),
  where: schema_migrationsWhereInputSchema.optional(),
  orderBy: z.union([ schema_migrationsOrderByWithRelationInputSchema.array(),schema_migrationsOrderByWithRelationInputSchema ]).optional(),
  cursor: schema_migrationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Schema_migrationsScalarFieldEnumSchema,Schema_migrationsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const schema_migrationsFindManyArgsSchema: z.ZodType<Prisma.schema_migrationsFindManyArgs> = z.object({
  select: schema_migrationsSelectSchema.optional(),
  where: schema_migrationsWhereInputSchema.optional(),
  orderBy: z.union([ schema_migrationsOrderByWithRelationInputSchema.array(),schema_migrationsOrderByWithRelationInputSchema ]).optional(),
  cursor: schema_migrationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Schema_migrationsScalarFieldEnumSchema,Schema_migrationsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const schema_migrationsAggregateArgsSchema: z.ZodType<Prisma.schema_migrationsAggregateArgs> = z.object({
  where: schema_migrationsWhereInputSchema.optional(),
  orderBy: z.union([ schema_migrationsOrderByWithRelationInputSchema.array(),schema_migrationsOrderByWithRelationInputSchema ]).optional(),
  cursor: schema_migrationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const schema_migrationsGroupByArgsSchema: z.ZodType<Prisma.schema_migrationsGroupByArgs> = z.object({
  where: schema_migrationsWhereInputSchema.optional(),
  orderBy: z.union([ schema_migrationsOrderByWithAggregationInputSchema.array(),schema_migrationsOrderByWithAggregationInputSchema ]).optional(),
  by: Schema_migrationsScalarFieldEnumSchema.array(),
  having: schema_migrationsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const schema_migrationsFindUniqueArgsSchema: z.ZodType<Prisma.schema_migrationsFindUniqueArgs> = z.object({
  select: schema_migrationsSelectSchema.optional(),
  where: schema_migrationsWhereUniqueInputSchema,
}).strict() ;

export const schema_migrationsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.schema_migrationsFindUniqueOrThrowArgs> = z.object({
  select: schema_migrationsSelectSchema.optional(),
  where: schema_migrationsWhereUniqueInputSchema,
}).strict() ;

export const sessionsFindFirstArgsSchema: z.ZodType<Prisma.sessionsFindFirstArgs> = z.object({
  select: sessionsSelectSchema.optional(),
  include: sessionsIncludeSchema.optional(),
  where: sessionsWhereInputSchema.optional(),
  orderBy: z.union([ sessionsOrderByWithRelationInputSchema.array(),sessionsOrderByWithRelationInputSchema ]).optional(),
  cursor: sessionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionsScalarFieldEnumSchema,SessionsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const sessionsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.sessionsFindFirstOrThrowArgs> = z.object({
  select: sessionsSelectSchema.optional(),
  include: sessionsIncludeSchema.optional(),
  where: sessionsWhereInputSchema.optional(),
  orderBy: z.union([ sessionsOrderByWithRelationInputSchema.array(),sessionsOrderByWithRelationInputSchema ]).optional(),
  cursor: sessionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionsScalarFieldEnumSchema,SessionsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const sessionsFindManyArgsSchema: z.ZodType<Prisma.sessionsFindManyArgs> = z.object({
  select: sessionsSelectSchema.optional(),
  include: sessionsIncludeSchema.optional(),
  where: sessionsWhereInputSchema.optional(),
  orderBy: z.union([ sessionsOrderByWithRelationInputSchema.array(),sessionsOrderByWithRelationInputSchema ]).optional(),
  cursor: sessionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionsScalarFieldEnumSchema,SessionsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const sessionsAggregateArgsSchema: z.ZodType<Prisma.sessionsAggregateArgs> = z.object({
  where: sessionsWhereInputSchema.optional(),
  orderBy: z.union([ sessionsOrderByWithRelationInputSchema.array(),sessionsOrderByWithRelationInputSchema ]).optional(),
  cursor: sessionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const sessionsGroupByArgsSchema: z.ZodType<Prisma.sessionsGroupByArgs> = z.object({
  where: sessionsWhereInputSchema.optional(),
  orderBy: z.union([ sessionsOrderByWithAggregationInputSchema.array(),sessionsOrderByWithAggregationInputSchema ]).optional(),
  by: SessionsScalarFieldEnumSchema.array(),
  having: sessionsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const sessionsFindUniqueArgsSchema: z.ZodType<Prisma.sessionsFindUniqueArgs> = z.object({
  select: sessionsSelectSchema.optional(),
  include: sessionsIncludeSchema.optional(),
  where: sessionsWhereUniqueInputSchema,
}).strict() ;

export const sessionsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.sessionsFindUniqueOrThrowArgs> = z.object({
  select: sessionsSelectSchema.optional(),
  include: sessionsIncludeSchema.optional(),
  where: sessionsWhereUniqueInputSchema,
}).strict() ;

export const sso_domainsFindFirstArgsSchema: z.ZodType<Prisma.sso_domainsFindFirstArgs> = z.object({
  select: sso_domainsSelectSchema.optional(),
  include: sso_domainsIncludeSchema.optional(),
  where: sso_domainsWhereInputSchema.optional(),
  orderBy: z.union([ sso_domainsOrderByWithRelationInputSchema.array(),sso_domainsOrderByWithRelationInputSchema ]).optional(),
  cursor: sso_domainsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Sso_domainsScalarFieldEnumSchema,Sso_domainsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const sso_domainsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.sso_domainsFindFirstOrThrowArgs> = z.object({
  select: sso_domainsSelectSchema.optional(),
  include: sso_domainsIncludeSchema.optional(),
  where: sso_domainsWhereInputSchema.optional(),
  orderBy: z.union([ sso_domainsOrderByWithRelationInputSchema.array(),sso_domainsOrderByWithRelationInputSchema ]).optional(),
  cursor: sso_domainsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Sso_domainsScalarFieldEnumSchema,Sso_domainsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const sso_domainsFindManyArgsSchema: z.ZodType<Prisma.sso_domainsFindManyArgs> = z.object({
  select: sso_domainsSelectSchema.optional(),
  include: sso_domainsIncludeSchema.optional(),
  where: sso_domainsWhereInputSchema.optional(),
  orderBy: z.union([ sso_domainsOrderByWithRelationInputSchema.array(),sso_domainsOrderByWithRelationInputSchema ]).optional(),
  cursor: sso_domainsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Sso_domainsScalarFieldEnumSchema,Sso_domainsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const sso_domainsAggregateArgsSchema: z.ZodType<Prisma.sso_domainsAggregateArgs> = z.object({
  where: sso_domainsWhereInputSchema.optional(),
  orderBy: z.union([ sso_domainsOrderByWithRelationInputSchema.array(),sso_domainsOrderByWithRelationInputSchema ]).optional(),
  cursor: sso_domainsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const sso_domainsGroupByArgsSchema: z.ZodType<Prisma.sso_domainsGroupByArgs> = z.object({
  where: sso_domainsWhereInputSchema.optional(),
  orderBy: z.union([ sso_domainsOrderByWithAggregationInputSchema.array(),sso_domainsOrderByWithAggregationInputSchema ]).optional(),
  by: Sso_domainsScalarFieldEnumSchema.array(),
  having: sso_domainsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const sso_domainsFindUniqueArgsSchema: z.ZodType<Prisma.sso_domainsFindUniqueArgs> = z.object({
  select: sso_domainsSelectSchema.optional(),
  include: sso_domainsIncludeSchema.optional(),
  where: sso_domainsWhereUniqueInputSchema,
}).strict() ;

export const sso_domainsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.sso_domainsFindUniqueOrThrowArgs> = z.object({
  select: sso_domainsSelectSchema.optional(),
  include: sso_domainsIncludeSchema.optional(),
  where: sso_domainsWhereUniqueInputSchema,
}).strict() ;

export const sso_providersFindFirstArgsSchema: z.ZodType<Prisma.sso_providersFindFirstArgs> = z.object({
  select: sso_providersSelectSchema.optional(),
  include: sso_providersIncludeSchema.optional(),
  where: sso_providersWhereInputSchema.optional(),
  orderBy: z.union([ sso_providersOrderByWithRelationInputSchema.array(),sso_providersOrderByWithRelationInputSchema ]).optional(),
  cursor: sso_providersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Sso_providersScalarFieldEnumSchema,Sso_providersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const sso_providersFindFirstOrThrowArgsSchema: z.ZodType<Prisma.sso_providersFindFirstOrThrowArgs> = z.object({
  select: sso_providersSelectSchema.optional(),
  include: sso_providersIncludeSchema.optional(),
  where: sso_providersWhereInputSchema.optional(),
  orderBy: z.union([ sso_providersOrderByWithRelationInputSchema.array(),sso_providersOrderByWithRelationInputSchema ]).optional(),
  cursor: sso_providersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Sso_providersScalarFieldEnumSchema,Sso_providersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const sso_providersFindManyArgsSchema: z.ZodType<Prisma.sso_providersFindManyArgs> = z.object({
  select: sso_providersSelectSchema.optional(),
  include: sso_providersIncludeSchema.optional(),
  where: sso_providersWhereInputSchema.optional(),
  orderBy: z.union([ sso_providersOrderByWithRelationInputSchema.array(),sso_providersOrderByWithRelationInputSchema ]).optional(),
  cursor: sso_providersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Sso_providersScalarFieldEnumSchema,Sso_providersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const sso_providersAggregateArgsSchema: z.ZodType<Prisma.sso_providersAggregateArgs> = z.object({
  where: sso_providersWhereInputSchema.optional(),
  orderBy: z.union([ sso_providersOrderByWithRelationInputSchema.array(),sso_providersOrderByWithRelationInputSchema ]).optional(),
  cursor: sso_providersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const sso_providersGroupByArgsSchema: z.ZodType<Prisma.sso_providersGroupByArgs> = z.object({
  where: sso_providersWhereInputSchema.optional(),
  orderBy: z.union([ sso_providersOrderByWithAggregationInputSchema.array(),sso_providersOrderByWithAggregationInputSchema ]).optional(),
  by: Sso_providersScalarFieldEnumSchema.array(),
  having: sso_providersScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const sso_providersFindUniqueArgsSchema: z.ZodType<Prisma.sso_providersFindUniqueArgs> = z.object({
  select: sso_providersSelectSchema.optional(),
  include: sso_providersIncludeSchema.optional(),
  where: sso_providersWhereUniqueInputSchema,
}).strict() ;

export const sso_providersFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.sso_providersFindUniqueOrThrowArgs> = z.object({
  select: sso_providersSelectSchema.optional(),
  include: sso_providersIncludeSchema.optional(),
  where: sso_providersWhereUniqueInputSchema,
}).strict() ;

export const usersFindFirstArgsSchema: z.ZodType<Prisma.usersFindFirstArgs> = z.object({
  select: usersSelectSchema.optional(),
  include: usersIncludeSchema.optional(),
  where: usersWhereInputSchema.optional(),
  orderBy: z.union([ usersOrderByWithRelationInputSchema.array(),usersOrderByWithRelationInputSchema ]).optional(),
  cursor: usersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UsersScalarFieldEnumSchema,UsersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const usersFindFirstOrThrowArgsSchema: z.ZodType<Prisma.usersFindFirstOrThrowArgs> = z.object({
  select: usersSelectSchema.optional(),
  include: usersIncludeSchema.optional(),
  where: usersWhereInputSchema.optional(),
  orderBy: z.union([ usersOrderByWithRelationInputSchema.array(),usersOrderByWithRelationInputSchema ]).optional(),
  cursor: usersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UsersScalarFieldEnumSchema,UsersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const usersFindManyArgsSchema: z.ZodType<Prisma.usersFindManyArgs> = z.object({
  select: usersSelectSchema.optional(),
  include: usersIncludeSchema.optional(),
  where: usersWhereInputSchema.optional(),
  orderBy: z.union([ usersOrderByWithRelationInputSchema.array(),usersOrderByWithRelationInputSchema ]).optional(),
  cursor: usersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UsersScalarFieldEnumSchema,UsersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const usersAggregateArgsSchema: z.ZodType<Prisma.usersAggregateArgs> = z.object({
  where: usersWhereInputSchema.optional(),
  orderBy: z.union([ usersOrderByWithRelationInputSchema.array(),usersOrderByWithRelationInputSchema ]).optional(),
  cursor: usersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const usersGroupByArgsSchema: z.ZodType<Prisma.usersGroupByArgs> = z.object({
  where: usersWhereInputSchema.optional(),
  orderBy: z.union([ usersOrderByWithAggregationInputSchema.array(),usersOrderByWithAggregationInputSchema ]).optional(),
  by: UsersScalarFieldEnumSchema.array(),
  having: usersScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const usersFindUniqueArgsSchema: z.ZodType<Prisma.usersFindUniqueArgs> = z.object({
  select: usersSelectSchema.optional(),
  include: usersIncludeSchema.optional(),
  where: usersWhereUniqueInputSchema,
}).strict() ;

export const usersFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.usersFindUniqueOrThrowArgs> = z.object({
  select: usersSelectSchema.optional(),
  include: usersIncludeSchema.optional(),
  where: usersWhereUniqueInputSchema,
}).strict() ;

export const cash_flowFindFirstArgsSchema: z.ZodType<Prisma.cash_flowFindFirstArgs> = z.object({
  select: cash_flowSelectSchema.optional(),
  where: cash_flowWhereInputSchema.optional(),
  orderBy: z.union([ cash_flowOrderByWithRelationInputSchema.array(),cash_flowOrderByWithRelationInputSchema ]).optional(),
  cursor: cash_flowWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Cash_flowScalarFieldEnumSchema,Cash_flowScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const cash_flowFindFirstOrThrowArgsSchema: z.ZodType<Prisma.cash_flowFindFirstOrThrowArgs> = z.object({
  select: cash_flowSelectSchema.optional(),
  where: cash_flowWhereInputSchema.optional(),
  orderBy: z.union([ cash_flowOrderByWithRelationInputSchema.array(),cash_flowOrderByWithRelationInputSchema ]).optional(),
  cursor: cash_flowWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Cash_flowScalarFieldEnumSchema,Cash_flowScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const cash_flowFindManyArgsSchema: z.ZodType<Prisma.cash_flowFindManyArgs> = z.object({
  select: cash_flowSelectSchema.optional(),
  where: cash_flowWhereInputSchema.optional(),
  orderBy: z.union([ cash_flowOrderByWithRelationInputSchema.array(),cash_flowOrderByWithRelationInputSchema ]).optional(),
  cursor: cash_flowWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Cash_flowScalarFieldEnumSchema,Cash_flowScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const cash_flowAggregateArgsSchema: z.ZodType<Prisma.cash_flowAggregateArgs> = z.object({
  where: cash_flowWhereInputSchema.optional(),
  orderBy: z.union([ cash_flowOrderByWithRelationInputSchema.array(),cash_flowOrderByWithRelationInputSchema ]).optional(),
  cursor: cash_flowWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const cash_flowGroupByArgsSchema: z.ZodType<Prisma.cash_flowGroupByArgs> = z.object({
  where: cash_flowWhereInputSchema.optional(),
  orderBy: z.union([ cash_flowOrderByWithAggregationInputSchema.array(),cash_flowOrderByWithAggregationInputSchema ]).optional(),
  by: Cash_flowScalarFieldEnumSchema.array(),
  having: cash_flowScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const cash_flowFindUniqueArgsSchema: z.ZodType<Prisma.cash_flowFindUniqueArgs> = z.object({
  select: cash_flowSelectSchema.optional(),
  where: cash_flowWhereUniqueInputSchema,
}).strict() ;

export const cash_flowFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.cash_flowFindUniqueOrThrowArgs> = z.object({
  select: cash_flowSelectSchema.optional(),
  where: cash_flowWhereUniqueInputSchema,
}).strict() ;

export const categoriesFindFirstArgsSchema: z.ZodType<Prisma.categoriesFindFirstArgs> = z.object({
  select: categoriesSelectSchema.optional(),
  include: categoriesIncludeSchema.optional(),
  where: categoriesWhereInputSchema.optional(),
  orderBy: z.union([ categoriesOrderByWithRelationInputSchema.array(),categoriesOrderByWithRelationInputSchema ]).optional(),
  cursor: categoriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CategoriesScalarFieldEnumSchema,CategoriesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const categoriesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.categoriesFindFirstOrThrowArgs> = z.object({
  select: categoriesSelectSchema.optional(),
  include: categoriesIncludeSchema.optional(),
  where: categoriesWhereInputSchema.optional(),
  orderBy: z.union([ categoriesOrderByWithRelationInputSchema.array(),categoriesOrderByWithRelationInputSchema ]).optional(),
  cursor: categoriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CategoriesScalarFieldEnumSchema,CategoriesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const categoriesFindManyArgsSchema: z.ZodType<Prisma.categoriesFindManyArgs> = z.object({
  select: categoriesSelectSchema.optional(),
  include: categoriesIncludeSchema.optional(),
  where: categoriesWhereInputSchema.optional(),
  orderBy: z.union([ categoriesOrderByWithRelationInputSchema.array(),categoriesOrderByWithRelationInputSchema ]).optional(),
  cursor: categoriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CategoriesScalarFieldEnumSchema,CategoriesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const categoriesAggregateArgsSchema: z.ZodType<Prisma.categoriesAggregateArgs> = z.object({
  where: categoriesWhereInputSchema.optional(),
  orderBy: z.union([ categoriesOrderByWithRelationInputSchema.array(),categoriesOrderByWithRelationInputSchema ]).optional(),
  cursor: categoriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const categoriesGroupByArgsSchema: z.ZodType<Prisma.categoriesGroupByArgs> = z.object({
  where: categoriesWhereInputSchema.optional(),
  orderBy: z.union([ categoriesOrderByWithAggregationInputSchema.array(),categoriesOrderByWithAggregationInputSchema ]).optional(),
  by: CategoriesScalarFieldEnumSchema.array(),
  having: categoriesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const categoriesFindUniqueArgsSchema: z.ZodType<Prisma.categoriesFindUniqueArgs> = z.object({
  select: categoriesSelectSchema.optional(),
  include: categoriesIncludeSchema.optional(),
  where: categoriesWhereUniqueInputSchema,
}).strict() ;

export const categoriesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.categoriesFindUniqueOrThrowArgs> = z.object({
  select: categoriesSelectSchema.optional(),
  include: categoriesIncludeSchema.optional(),
  where: categoriesWhereUniqueInputSchema,
}).strict() ;

export const controller_adminsFindFirstArgsSchema: z.ZodType<Prisma.controller_adminsFindFirstArgs> = z.object({
  select: controller_adminsSelectSchema.optional(),
  include: controller_adminsIncludeSchema.optional(),
  where: controller_adminsWhereInputSchema.optional(),
  orderBy: z.union([ controller_adminsOrderByWithRelationInputSchema.array(),controller_adminsOrderByWithRelationInputSchema ]).optional(),
  cursor: controller_adminsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Controller_adminsScalarFieldEnumSchema,Controller_adminsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const controller_adminsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.controller_adminsFindFirstOrThrowArgs> = z.object({
  select: controller_adminsSelectSchema.optional(),
  include: controller_adminsIncludeSchema.optional(),
  where: controller_adminsWhereInputSchema.optional(),
  orderBy: z.union([ controller_adminsOrderByWithRelationInputSchema.array(),controller_adminsOrderByWithRelationInputSchema ]).optional(),
  cursor: controller_adminsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Controller_adminsScalarFieldEnumSchema,Controller_adminsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const controller_adminsFindManyArgsSchema: z.ZodType<Prisma.controller_adminsFindManyArgs> = z.object({
  select: controller_adminsSelectSchema.optional(),
  include: controller_adminsIncludeSchema.optional(),
  where: controller_adminsWhereInputSchema.optional(),
  orderBy: z.union([ controller_adminsOrderByWithRelationInputSchema.array(),controller_adminsOrderByWithRelationInputSchema ]).optional(),
  cursor: controller_adminsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Controller_adminsScalarFieldEnumSchema,Controller_adminsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const controller_adminsAggregateArgsSchema: z.ZodType<Prisma.controller_adminsAggregateArgs> = z.object({
  where: controller_adminsWhereInputSchema.optional(),
  orderBy: z.union([ controller_adminsOrderByWithRelationInputSchema.array(),controller_adminsOrderByWithRelationInputSchema ]).optional(),
  cursor: controller_adminsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const controller_adminsGroupByArgsSchema: z.ZodType<Prisma.controller_adminsGroupByArgs> = z.object({
  where: controller_adminsWhereInputSchema.optional(),
  orderBy: z.union([ controller_adminsOrderByWithAggregationInputSchema.array(),controller_adminsOrderByWithAggregationInputSchema ]).optional(),
  by: Controller_adminsScalarFieldEnumSchema.array(),
  having: controller_adminsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const controller_adminsFindUniqueArgsSchema: z.ZodType<Prisma.controller_adminsFindUniqueArgs> = z.object({
  select: controller_adminsSelectSchema.optional(),
  include: controller_adminsIncludeSchema.optional(),
  where: controller_adminsWhereUniqueInputSchema,
}).strict() ;

export const controller_adminsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.controller_adminsFindUniqueOrThrowArgs> = z.object({
  select: controller_adminsSelectSchema.optional(),
  include: controller_adminsIncludeSchema.optional(),
  where: controller_adminsWhereUniqueInputSchema,
}).strict() ;

export const credit_accountsFindFirstArgsSchema: z.ZodType<Prisma.credit_accountsFindFirstArgs> = z.object({
  select: credit_accountsSelectSchema.optional(),
  include: credit_accountsIncludeSchema.optional(),
  where: credit_accountsWhereInputSchema.optional(),
  orderBy: z.union([ credit_accountsOrderByWithRelationInputSchema.array(),credit_accountsOrderByWithRelationInputSchema ]).optional(),
  cursor: credit_accountsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Credit_accountsScalarFieldEnumSchema,Credit_accountsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const credit_accountsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.credit_accountsFindFirstOrThrowArgs> = z.object({
  select: credit_accountsSelectSchema.optional(),
  include: credit_accountsIncludeSchema.optional(),
  where: credit_accountsWhereInputSchema.optional(),
  orderBy: z.union([ credit_accountsOrderByWithRelationInputSchema.array(),credit_accountsOrderByWithRelationInputSchema ]).optional(),
  cursor: credit_accountsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Credit_accountsScalarFieldEnumSchema,Credit_accountsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const credit_accountsFindManyArgsSchema: z.ZodType<Prisma.credit_accountsFindManyArgs> = z.object({
  select: credit_accountsSelectSchema.optional(),
  include: credit_accountsIncludeSchema.optional(),
  where: credit_accountsWhereInputSchema.optional(),
  orderBy: z.union([ credit_accountsOrderByWithRelationInputSchema.array(),credit_accountsOrderByWithRelationInputSchema ]).optional(),
  cursor: credit_accountsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Credit_accountsScalarFieldEnumSchema,Credit_accountsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const credit_accountsAggregateArgsSchema: z.ZodType<Prisma.credit_accountsAggregateArgs> = z.object({
  where: credit_accountsWhereInputSchema.optional(),
  orderBy: z.union([ credit_accountsOrderByWithRelationInputSchema.array(),credit_accountsOrderByWithRelationInputSchema ]).optional(),
  cursor: credit_accountsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const credit_accountsGroupByArgsSchema: z.ZodType<Prisma.credit_accountsGroupByArgs> = z.object({
  where: credit_accountsWhereInputSchema.optional(),
  orderBy: z.union([ credit_accountsOrderByWithAggregationInputSchema.array(),credit_accountsOrderByWithAggregationInputSchema ]).optional(),
  by: Credit_accountsScalarFieldEnumSchema.array(),
  having: credit_accountsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const credit_accountsFindUniqueArgsSchema: z.ZodType<Prisma.credit_accountsFindUniqueArgs> = z.object({
  select: credit_accountsSelectSchema.optional(),
  include: credit_accountsIncludeSchema.optional(),
  where: credit_accountsWhereUniqueInputSchema,
}).strict() ;

export const credit_accountsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.credit_accountsFindUniqueOrThrowArgs> = z.object({
  select: credit_accountsSelectSchema.optional(),
  include: credit_accountsIncludeSchema.optional(),
  where: credit_accountsWhereUniqueInputSchema,
}).strict() ;

export const credit_transactionsFindFirstArgsSchema: z.ZodType<Prisma.credit_transactionsFindFirstArgs> = z.object({
  select: credit_transactionsSelectSchema.optional(),
  include: credit_transactionsIncludeSchema.optional(),
  where: credit_transactionsWhereInputSchema.optional(),
  orderBy: z.union([ credit_transactionsOrderByWithRelationInputSchema.array(),credit_transactionsOrderByWithRelationInputSchema ]).optional(),
  cursor: credit_transactionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Credit_transactionsScalarFieldEnumSchema,Credit_transactionsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const credit_transactionsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.credit_transactionsFindFirstOrThrowArgs> = z.object({
  select: credit_transactionsSelectSchema.optional(),
  include: credit_transactionsIncludeSchema.optional(),
  where: credit_transactionsWhereInputSchema.optional(),
  orderBy: z.union([ credit_transactionsOrderByWithRelationInputSchema.array(),credit_transactionsOrderByWithRelationInputSchema ]).optional(),
  cursor: credit_transactionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Credit_transactionsScalarFieldEnumSchema,Credit_transactionsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const credit_transactionsFindManyArgsSchema: z.ZodType<Prisma.credit_transactionsFindManyArgs> = z.object({
  select: credit_transactionsSelectSchema.optional(),
  include: credit_transactionsIncludeSchema.optional(),
  where: credit_transactionsWhereInputSchema.optional(),
  orderBy: z.union([ credit_transactionsOrderByWithRelationInputSchema.array(),credit_transactionsOrderByWithRelationInputSchema ]).optional(),
  cursor: credit_transactionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Credit_transactionsScalarFieldEnumSchema,Credit_transactionsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const credit_transactionsAggregateArgsSchema: z.ZodType<Prisma.credit_transactionsAggregateArgs> = z.object({
  where: credit_transactionsWhereInputSchema.optional(),
  orderBy: z.union([ credit_transactionsOrderByWithRelationInputSchema.array(),credit_transactionsOrderByWithRelationInputSchema ]).optional(),
  cursor: credit_transactionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const credit_transactionsGroupByArgsSchema: z.ZodType<Prisma.credit_transactionsGroupByArgs> = z.object({
  where: credit_transactionsWhereInputSchema.optional(),
  orderBy: z.union([ credit_transactionsOrderByWithAggregationInputSchema.array(),credit_transactionsOrderByWithAggregationInputSchema ]).optional(),
  by: Credit_transactionsScalarFieldEnumSchema.array(),
  having: credit_transactionsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const credit_transactionsFindUniqueArgsSchema: z.ZodType<Prisma.credit_transactionsFindUniqueArgs> = z.object({
  select: credit_transactionsSelectSchema.optional(),
  include: credit_transactionsIncludeSchema.optional(),
  where: credit_transactionsWhereUniqueInputSchema,
}).strict() ;

export const credit_transactionsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.credit_transactionsFindUniqueOrThrowArgs> = z.object({
  select: credit_transactionsSelectSchema.optional(),
  include: credit_transactionsIncludeSchema.optional(),
  where: credit_transactionsWhereUniqueInputSchema,
}).strict() ;

export const customersFindFirstArgsSchema: z.ZodType<Prisma.customersFindFirstArgs> = z.object({
  select: customersSelectSchema.optional(),
  include: customersIncludeSchema.optional(),
  where: customersWhereInputSchema.optional(),
  orderBy: z.union([ customersOrderByWithRelationInputSchema.array(),customersOrderByWithRelationInputSchema ]).optional(),
  cursor: customersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomersScalarFieldEnumSchema,CustomersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const customersFindFirstOrThrowArgsSchema: z.ZodType<Prisma.customersFindFirstOrThrowArgs> = z.object({
  select: customersSelectSchema.optional(),
  include: customersIncludeSchema.optional(),
  where: customersWhereInputSchema.optional(),
  orderBy: z.union([ customersOrderByWithRelationInputSchema.array(),customersOrderByWithRelationInputSchema ]).optional(),
  cursor: customersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomersScalarFieldEnumSchema,CustomersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const customersFindManyArgsSchema: z.ZodType<Prisma.customersFindManyArgs> = z.object({
  select: customersSelectSchema.optional(),
  include: customersIncludeSchema.optional(),
  where: customersWhereInputSchema.optional(),
  orderBy: z.union([ customersOrderByWithRelationInputSchema.array(),customersOrderByWithRelationInputSchema ]).optional(),
  cursor: customersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomersScalarFieldEnumSchema,CustomersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const customersAggregateArgsSchema: z.ZodType<Prisma.customersAggregateArgs> = z.object({
  where: customersWhereInputSchema.optional(),
  orderBy: z.union([ customersOrderByWithRelationInputSchema.array(),customersOrderByWithRelationInputSchema ]).optional(),
  cursor: customersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const customersGroupByArgsSchema: z.ZodType<Prisma.customersGroupByArgs> = z.object({
  where: customersWhereInputSchema.optional(),
  orderBy: z.union([ customersOrderByWithAggregationInputSchema.array(),customersOrderByWithAggregationInputSchema ]).optional(),
  by: CustomersScalarFieldEnumSchema.array(),
  having: customersScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const customersFindUniqueArgsSchema: z.ZodType<Prisma.customersFindUniqueArgs> = z.object({
  select: customersSelectSchema.optional(),
  include: customersIncludeSchema.optional(),
  where: customersWhereUniqueInputSchema,
}).strict() ;

export const customersFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.customersFindUniqueOrThrowArgs> = z.object({
  select: customersSelectSchema.optional(),
  include: customersIncludeSchema.optional(),
  where: customersWhereUniqueInputSchema,
}).strict() ;

export const domain_ownersFindFirstArgsSchema: z.ZodType<Prisma.domain_ownersFindFirstArgs> = z.object({
  select: domain_ownersSelectSchema.optional(),
  include: domain_ownersIncludeSchema.optional(),
  where: domain_ownersWhereInputSchema.optional(),
  orderBy: z.union([ domain_ownersOrderByWithRelationInputSchema.array(),domain_ownersOrderByWithRelationInputSchema ]).optional(),
  cursor: domain_ownersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Domain_ownersScalarFieldEnumSchema,Domain_ownersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const domain_ownersFindFirstOrThrowArgsSchema: z.ZodType<Prisma.domain_ownersFindFirstOrThrowArgs> = z.object({
  select: domain_ownersSelectSchema.optional(),
  include: domain_ownersIncludeSchema.optional(),
  where: domain_ownersWhereInputSchema.optional(),
  orderBy: z.union([ domain_ownersOrderByWithRelationInputSchema.array(),domain_ownersOrderByWithRelationInputSchema ]).optional(),
  cursor: domain_ownersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Domain_ownersScalarFieldEnumSchema,Domain_ownersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const domain_ownersFindManyArgsSchema: z.ZodType<Prisma.domain_ownersFindManyArgs> = z.object({
  select: domain_ownersSelectSchema.optional(),
  include: domain_ownersIncludeSchema.optional(),
  where: domain_ownersWhereInputSchema.optional(),
  orderBy: z.union([ domain_ownersOrderByWithRelationInputSchema.array(),domain_ownersOrderByWithRelationInputSchema ]).optional(),
  cursor: domain_ownersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Domain_ownersScalarFieldEnumSchema,Domain_ownersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const domain_ownersAggregateArgsSchema: z.ZodType<Prisma.domain_ownersAggregateArgs> = z.object({
  where: domain_ownersWhereInputSchema.optional(),
  orderBy: z.union([ domain_ownersOrderByWithRelationInputSchema.array(),domain_ownersOrderByWithRelationInputSchema ]).optional(),
  cursor: domain_ownersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const domain_ownersGroupByArgsSchema: z.ZodType<Prisma.domain_ownersGroupByArgs> = z.object({
  where: domain_ownersWhereInputSchema.optional(),
  orderBy: z.union([ domain_ownersOrderByWithAggregationInputSchema.array(),domain_ownersOrderByWithAggregationInputSchema ]).optional(),
  by: Domain_ownersScalarFieldEnumSchema.array(),
  having: domain_ownersScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const domain_ownersFindUniqueArgsSchema: z.ZodType<Prisma.domain_ownersFindUniqueArgs> = z.object({
  select: domain_ownersSelectSchema.optional(),
  include: domain_ownersIncludeSchema.optional(),
  where: domain_ownersWhereUniqueInputSchema,
}).strict() ;

export const domain_ownersFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.domain_ownersFindUniqueOrThrowArgs> = z.object({
  select: domain_ownersSelectSchema.optional(),
  include: domain_ownersIncludeSchema.optional(),
  where: domain_ownersWhereUniqueInputSchema,
}).strict() ;

export const expensesFindFirstArgsSchema: z.ZodType<Prisma.expensesFindFirstArgs> = z.object({
  select: expensesSelectSchema.optional(),
  where: expensesWhereInputSchema.optional(),
  orderBy: z.union([ expensesOrderByWithRelationInputSchema.array(),expensesOrderByWithRelationInputSchema ]).optional(),
  cursor: expensesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpensesScalarFieldEnumSchema,ExpensesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const expensesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.expensesFindFirstOrThrowArgs> = z.object({
  select: expensesSelectSchema.optional(),
  where: expensesWhereInputSchema.optional(),
  orderBy: z.union([ expensesOrderByWithRelationInputSchema.array(),expensesOrderByWithRelationInputSchema ]).optional(),
  cursor: expensesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpensesScalarFieldEnumSchema,ExpensesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const expensesFindManyArgsSchema: z.ZodType<Prisma.expensesFindManyArgs> = z.object({
  select: expensesSelectSchema.optional(),
  where: expensesWhereInputSchema.optional(),
  orderBy: z.union([ expensesOrderByWithRelationInputSchema.array(),expensesOrderByWithRelationInputSchema ]).optional(),
  cursor: expensesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpensesScalarFieldEnumSchema,ExpensesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const expensesAggregateArgsSchema: z.ZodType<Prisma.expensesAggregateArgs> = z.object({
  where: expensesWhereInputSchema.optional(),
  orderBy: z.union([ expensesOrderByWithRelationInputSchema.array(),expensesOrderByWithRelationInputSchema ]).optional(),
  cursor: expensesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const expensesGroupByArgsSchema: z.ZodType<Prisma.expensesGroupByArgs> = z.object({
  where: expensesWhereInputSchema.optional(),
  orderBy: z.union([ expensesOrderByWithAggregationInputSchema.array(),expensesOrderByWithAggregationInputSchema ]).optional(),
  by: ExpensesScalarFieldEnumSchema.array(),
  having: expensesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const expensesFindUniqueArgsSchema: z.ZodType<Prisma.expensesFindUniqueArgs> = z.object({
  select: expensesSelectSchema.optional(),
  where: expensesWhereUniqueInputSchema,
}).strict() ;

export const expensesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.expensesFindUniqueOrThrowArgs> = z.object({
  select: expensesSelectSchema.optional(),
  where: expensesWhereUniqueInputSchema,
}).strict() ;

export const order_itemsFindFirstArgsSchema: z.ZodType<Prisma.order_itemsFindFirstArgs> = z.object({
  select: order_itemsSelectSchema.optional(),
  include: order_itemsIncludeSchema.optional(),
  where: order_itemsWhereInputSchema.optional(),
  orderBy: z.union([ order_itemsOrderByWithRelationInputSchema.array(),order_itemsOrderByWithRelationInputSchema ]).optional(),
  cursor: order_itemsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Order_itemsScalarFieldEnumSchema,Order_itemsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const order_itemsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.order_itemsFindFirstOrThrowArgs> = z.object({
  select: order_itemsSelectSchema.optional(),
  include: order_itemsIncludeSchema.optional(),
  where: order_itemsWhereInputSchema.optional(),
  orderBy: z.union([ order_itemsOrderByWithRelationInputSchema.array(),order_itemsOrderByWithRelationInputSchema ]).optional(),
  cursor: order_itemsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Order_itemsScalarFieldEnumSchema,Order_itemsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const order_itemsFindManyArgsSchema: z.ZodType<Prisma.order_itemsFindManyArgs> = z.object({
  select: order_itemsSelectSchema.optional(),
  include: order_itemsIncludeSchema.optional(),
  where: order_itemsWhereInputSchema.optional(),
  orderBy: z.union([ order_itemsOrderByWithRelationInputSchema.array(),order_itemsOrderByWithRelationInputSchema ]).optional(),
  cursor: order_itemsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Order_itemsScalarFieldEnumSchema,Order_itemsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const order_itemsAggregateArgsSchema: z.ZodType<Prisma.order_itemsAggregateArgs> = z.object({
  where: order_itemsWhereInputSchema.optional(),
  orderBy: z.union([ order_itemsOrderByWithRelationInputSchema.array(),order_itemsOrderByWithRelationInputSchema ]).optional(),
  cursor: order_itemsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const order_itemsGroupByArgsSchema: z.ZodType<Prisma.order_itemsGroupByArgs> = z.object({
  where: order_itemsWhereInputSchema.optional(),
  orderBy: z.union([ order_itemsOrderByWithAggregationInputSchema.array(),order_itemsOrderByWithAggregationInputSchema ]).optional(),
  by: Order_itemsScalarFieldEnumSchema.array(),
  having: order_itemsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const order_itemsFindUniqueArgsSchema: z.ZodType<Prisma.order_itemsFindUniqueArgs> = z.object({
  select: order_itemsSelectSchema.optional(),
  include: order_itemsIncludeSchema.optional(),
  where: order_itemsWhereUniqueInputSchema,
}).strict() ;

export const order_itemsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.order_itemsFindUniqueOrThrowArgs> = z.object({
  select: order_itemsSelectSchema.optional(),
  include: order_itemsIncludeSchema.optional(),
  where: order_itemsWhereUniqueInputSchema,
}).strict() ;

export const ordersFindFirstArgsSchema: z.ZodType<Prisma.ordersFindFirstArgs> = z.object({
  select: ordersSelectSchema.optional(),
  include: ordersIncludeSchema.optional(),
  where: ordersWhereInputSchema.optional(),
  orderBy: z.union([ ordersOrderByWithRelationInputSchema.array(),ordersOrderByWithRelationInputSchema ]).optional(),
  cursor: ordersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrdersScalarFieldEnumSchema,OrdersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ordersFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ordersFindFirstOrThrowArgs> = z.object({
  select: ordersSelectSchema.optional(),
  include: ordersIncludeSchema.optional(),
  where: ordersWhereInputSchema.optional(),
  orderBy: z.union([ ordersOrderByWithRelationInputSchema.array(),ordersOrderByWithRelationInputSchema ]).optional(),
  cursor: ordersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrdersScalarFieldEnumSchema,OrdersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ordersFindManyArgsSchema: z.ZodType<Prisma.ordersFindManyArgs> = z.object({
  select: ordersSelectSchema.optional(),
  include: ordersIncludeSchema.optional(),
  where: ordersWhereInputSchema.optional(),
  orderBy: z.union([ ordersOrderByWithRelationInputSchema.array(),ordersOrderByWithRelationInputSchema ]).optional(),
  cursor: ordersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrdersScalarFieldEnumSchema,OrdersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ordersAggregateArgsSchema: z.ZodType<Prisma.ordersAggregateArgs> = z.object({
  where: ordersWhereInputSchema.optional(),
  orderBy: z.union([ ordersOrderByWithRelationInputSchema.array(),ordersOrderByWithRelationInputSchema ]).optional(),
  cursor: ordersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ordersGroupByArgsSchema: z.ZodType<Prisma.ordersGroupByArgs> = z.object({
  where: ordersWhereInputSchema.optional(),
  orderBy: z.union([ ordersOrderByWithAggregationInputSchema.array(),ordersOrderByWithAggregationInputSchema ]).optional(),
  by: OrdersScalarFieldEnumSchema.array(),
  having: ordersScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ordersFindUniqueArgsSchema: z.ZodType<Prisma.ordersFindUniqueArgs> = z.object({
  select: ordersSelectSchema.optional(),
  include: ordersIncludeSchema.optional(),
  where: ordersWhereUniqueInputSchema,
}).strict() ;

export const ordersFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ordersFindUniqueOrThrowArgs> = z.object({
  select: ordersSelectSchema.optional(),
  include: ordersIncludeSchema.optional(),
  where: ordersWhereUniqueInputSchema,
}).strict() ;

export const product_costsFindFirstArgsSchema: z.ZodType<Prisma.product_costsFindFirstArgs> = z.object({
  select: product_costsSelectSchema.optional(),
  where: product_costsWhereInputSchema.optional(),
  orderBy: z.union([ product_costsOrderByWithRelationInputSchema.array(),product_costsOrderByWithRelationInputSchema ]).optional(),
  cursor: product_costsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Product_costsScalarFieldEnumSchema,Product_costsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const product_costsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.product_costsFindFirstOrThrowArgs> = z.object({
  select: product_costsSelectSchema.optional(),
  where: product_costsWhereInputSchema.optional(),
  orderBy: z.union([ product_costsOrderByWithRelationInputSchema.array(),product_costsOrderByWithRelationInputSchema ]).optional(),
  cursor: product_costsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Product_costsScalarFieldEnumSchema,Product_costsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const product_costsFindManyArgsSchema: z.ZodType<Prisma.product_costsFindManyArgs> = z.object({
  select: product_costsSelectSchema.optional(),
  where: product_costsWhereInputSchema.optional(),
  orderBy: z.union([ product_costsOrderByWithRelationInputSchema.array(),product_costsOrderByWithRelationInputSchema ]).optional(),
  cursor: product_costsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Product_costsScalarFieldEnumSchema,Product_costsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const product_costsAggregateArgsSchema: z.ZodType<Prisma.product_costsAggregateArgs> = z.object({
  where: product_costsWhereInputSchema.optional(),
  orderBy: z.union([ product_costsOrderByWithRelationInputSchema.array(),product_costsOrderByWithRelationInputSchema ]).optional(),
  cursor: product_costsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const product_costsGroupByArgsSchema: z.ZodType<Prisma.product_costsGroupByArgs> = z.object({
  where: product_costsWhereInputSchema.optional(),
  orderBy: z.union([ product_costsOrderByWithAggregationInputSchema.array(),product_costsOrderByWithAggregationInputSchema ]).optional(),
  by: Product_costsScalarFieldEnumSchema.array(),
  having: product_costsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const product_costsFindUniqueArgsSchema: z.ZodType<Prisma.product_costsFindUniqueArgs> = z.object({
  select: product_costsSelectSchema.optional(),
  where: product_costsWhereUniqueInputSchema,
}).strict() ;

export const product_costsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.product_costsFindUniqueOrThrowArgs> = z.object({
  select: product_costsSelectSchema.optional(),
  where: product_costsWhereUniqueInputSchema,
}).strict() ;

export const productsFindFirstArgsSchema: z.ZodType<Prisma.productsFindFirstArgs> = z.object({
  select: productsSelectSchema.optional(),
  include: productsIncludeSchema.optional(),
  where: productsWhereInputSchema.optional(),
  orderBy: z.union([ productsOrderByWithRelationInputSchema.array(),productsOrderByWithRelationInputSchema ]).optional(),
  cursor: productsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductsScalarFieldEnumSchema,ProductsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const productsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.productsFindFirstOrThrowArgs> = z.object({
  select: productsSelectSchema.optional(),
  include: productsIncludeSchema.optional(),
  where: productsWhereInputSchema.optional(),
  orderBy: z.union([ productsOrderByWithRelationInputSchema.array(),productsOrderByWithRelationInputSchema ]).optional(),
  cursor: productsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductsScalarFieldEnumSchema,ProductsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const productsFindManyArgsSchema: z.ZodType<Prisma.productsFindManyArgs> = z.object({
  select: productsSelectSchema.optional(),
  include: productsIncludeSchema.optional(),
  where: productsWhereInputSchema.optional(),
  orderBy: z.union([ productsOrderByWithRelationInputSchema.array(),productsOrderByWithRelationInputSchema ]).optional(),
  cursor: productsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductsScalarFieldEnumSchema,ProductsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const productsAggregateArgsSchema: z.ZodType<Prisma.productsAggregateArgs> = z.object({
  where: productsWhereInputSchema.optional(),
  orderBy: z.union([ productsOrderByWithRelationInputSchema.array(),productsOrderByWithRelationInputSchema ]).optional(),
  cursor: productsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const productsGroupByArgsSchema: z.ZodType<Prisma.productsGroupByArgs> = z.object({
  where: productsWhereInputSchema.optional(),
  orderBy: z.union([ productsOrderByWithAggregationInputSchema.array(),productsOrderByWithAggregationInputSchema ]).optional(),
  by: ProductsScalarFieldEnumSchema.array(),
  having: productsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const productsFindUniqueArgsSchema: z.ZodType<Prisma.productsFindUniqueArgs> = z.object({
  select: productsSelectSchema.optional(),
  include: productsIncludeSchema.optional(),
  where: productsWhereUniqueInputSchema,
}).strict() ;

export const productsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.productsFindUniqueOrThrowArgs> = z.object({
  select: productsSelectSchema.optional(),
  include: productsIncludeSchema.optional(),
  where: productsWhereUniqueInputSchema,
}).strict() ;

export const profilesFindFirstArgsSchema: z.ZodType<Prisma.profilesFindFirstArgs> = z.object({
  select: profilesSelectSchema.optional(),
  include: profilesIncludeSchema.optional(),
  where: profilesWhereInputSchema.optional(),
  orderBy: z.union([ profilesOrderByWithRelationInputSchema.array(),profilesOrderByWithRelationInputSchema ]).optional(),
  cursor: profilesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProfilesScalarFieldEnumSchema,ProfilesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const profilesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.profilesFindFirstOrThrowArgs> = z.object({
  select: profilesSelectSchema.optional(),
  include: profilesIncludeSchema.optional(),
  where: profilesWhereInputSchema.optional(),
  orderBy: z.union([ profilesOrderByWithRelationInputSchema.array(),profilesOrderByWithRelationInputSchema ]).optional(),
  cursor: profilesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProfilesScalarFieldEnumSchema,ProfilesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const profilesFindManyArgsSchema: z.ZodType<Prisma.profilesFindManyArgs> = z.object({
  select: profilesSelectSchema.optional(),
  include: profilesIncludeSchema.optional(),
  where: profilesWhereInputSchema.optional(),
  orderBy: z.union([ profilesOrderByWithRelationInputSchema.array(),profilesOrderByWithRelationInputSchema ]).optional(),
  cursor: profilesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProfilesScalarFieldEnumSchema,ProfilesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const profilesAggregateArgsSchema: z.ZodType<Prisma.profilesAggregateArgs> = z.object({
  where: profilesWhereInputSchema.optional(),
  orderBy: z.union([ profilesOrderByWithRelationInputSchema.array(),profilesOrderByWithRelationInputSchema ]).optional(),
  cursor: profilesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const profilesGroupByArgsSchema: z.ZodType<Prisma.profilesGroupByArgs> = z.object({
  where: profilesWhereInputSchema.optional(),
  orderBy: z.union([ profilesOrderByWithAggregationInputSchema.array(),profilesOrderByWithAggregationInputSchema ]).optional(),
  by: ProfilesScalarFieldEnumSchema.array(),
  having: profilesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const profilesFindUniqueArgsSchema: z.ZodType<Prisma.profilesFindUniqueArgs> = z.object({
  select: profilesSelectSchema.optional(),
  include: profilesIncludeSchema.optional(),
  where: profilesWhereUniqueInputSchema,
}).strict() ;

export const profilesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.profilesFindUniqueOrThrowArgs> = z.object({
  select: profilesSelectSchema.optional(),
  include: profilesIncludeSchema.optional(),
  where: profilesWhereUniqueInputSchema,
}).strict() ;

export const salesFindFirstArgsSchema: z.ZodType<Prisma.salesFindFirstArgs> = z.object({
  select: salesSelectSchema.optional(),
  include: salesIncludeSchema.optional(),
  where: salesWhereInputSchema.optional(),
  orderBy: z.union([ salesOrderByWithRelationInputSchema.array(),salesOrderByWithRelationInputSchema ]).optional(),
  cursor: salesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SalesScalarFieldEnumSchema,SalesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const salesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.salesFindFirstOrThrowArgs> = z.object({
  select: salesSelectSchema.optional(),
  include: salesIncludeSchema.optional(),
  where: salesWhereInputSchema.optional(),
  orderBy: z.union([ salesOrderByWithRelationInputSchema.array(),salesOrderByWithRelationInputSchema ]).optional(),
  cursor: salesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SalesScalarFieldEnumSchema,SalesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const salesFindManyArgsSchema: z.ZodType<Prisma.salesFindManyArgs> = z.object({
  select: salesSelectSchema.optional(),
  include: salesIncludeSchema.optional(),
  where: salesWhereInputSchema.optional(),
  orderBy: z.union([ salesOrderByWithRelationInputSchema.array(),salesOrderByWithRelationInputSchema ]).optional(),
  cursor: salesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SalesScalarFieldEnumSchema,SalesScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const salesAggregateArgsSchema: z.ZodType<Prisma.salesAggregateArgs> = z.object({
  where: salesWhereInputSchema.optional(),
  orderBy: z.union([ salesOrderByWithRelationInputSchema.array(),salesOrderByWithRelationInputSchema ]).optional(),
  cursor: salesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const salesGroupByArgsSchema: z.ZodType<Prisma.salesGroupByArgs> = z.object({
  where: salesWhereInputSchema.optional(),
  orderBy: z.union([ salesOrderByWithAggregationInputSchema.array(),salesOrderByWithAggregationInputSchema ]).optional(),
  by: SalesScalarFieldEnumSchema.array(),
  having: salesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const salesFindUniqueArgsSchema: z.ZodType<Prisma.salesFindUniqueArgs> = z.object({
  select: salesSelectSchema.optional(),
  include: salesIncludeSchema.optional(),
  where: salesWhereUniqueInputSchema,
}).strict() ;

export const salesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.salesFindUniqueOrThrowArgs> = z.object({
  select: salesSelectSchema.optional(),
  include: salesIncludeSchema.optional(),
  where: salesWhereUniqueInputSchema,
}).strict() ;

export const store_settingsFindFirstArgsSchema: z.ZodType<Prisma.store_settingsFindFirstArgs> = z.object({
  select: store_settingsSelectSchema.optional(),
  include: store_settingsIncludeSchema.optional(),
  where: store_settingsWhereInputSchema.optional(),
  orderBy: z.union([ store_settingsOrderByWithRelationInputSchema.array(),store_settingsOrderByWithRelationInputSchema ]).optional(),
  cursor: store_settingsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Store_settingsScalarFieldEnumSchema,Store_settingsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const store_settingsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.store_settingsFindFirstOrThrowArgs> = z.object({
  select: store_settingsSelectSchema.optional(),
  include: store_settingsIncludeSchema.optional(),
  where: store_settingsWhereInputSchema.optional(),
  orderBy: z.union([ store_settingsOrderByWithRelationInputSchema.array(),store_settingsOrderByWithRelationInputSchema ]).optional(),
  cursor: store_settingsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Store_settingsScalarFieldEnumSchema,Store_settingsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const store_settingsFindManyArgsSchema: z.ZodType<Prisma.store_settingsFindManyArgs> = z.object({
  select: store_settingsSelectSchema.optional(),
  include: store_settingsIncludeSchema.optional(),
  where: store_settingsWhereInputSchema.optional(),
  orderBy: z.union([ store_settingsOrderByWithRelationInputSchema.array(),store_settingsOrderByWithRelationInputSchema ]).optional(),
  cursor: store_settingsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Store_settingsScalarFieldEnumSchema,Store_settingsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const store_settingsAggregateArgsSchema: z.ZodType<Prisma.store_settingsAggregateArgs> = z.object({
  where: store_settingsWhereInputSchema.optional(),
  orderBy: z.union([ store_settingsOrderByWithRelationInputSchema.array(),store_settingsOrderByWithRelationInputSchema ]).optional(),
  cursor: store_settingsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const store_settingsGroupByArgsSchema: z.ZodType<Prisma.store_settingsGroupByArgs> = z.object({
  where: store_settingsWhereInputSchema.optional(),
  orderBy: z.union([ store_settingsOrderByWithAggregationInputSchema.array(),store_settingsOrderByWithAggregationInputSchema ]).optional(),
  by: Store_settingsScalarFieldEnumSchema.array(),
  having: store_settingsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const store_settingsFindUniqueArgsSchema: z.ZodType<Prisma.store_settingsFindUniqueArgs> = z.object({
  select: store_settingsSelectSchema.optional(),
  include: store_settingsIncludeSchema.optional(),
  where: store_settingsWhereUniqueInputSchema,
}).strict() ;

export const store_settingsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.store_settingsFindUniqueOrThrowArgs> = z.object({
  select: store_settingsSelectSchema.optional(),
  include: store_settingsIncludeSchema.optional(),
  where: store_settingsWhereUniqueInputSchema,
}).strict() ;

export const storesFindFirstArgsSchema: z.ZodType<Prisma.storesFindFirstArgs> = z.object({
  select: storesSelectSchema.optional(),
  include: storesIncludeSchema.optional(),
  where: storesWhereInputSchema.optional(),
  orderBy: z.union([ storesOrderByWithRelationInputSchema.array(),storesOrderByWithRelationInputSchema ]).optional(),
  cursor: storesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ StoresScalarFieldEnumSchema,StoresScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const storesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.storesFindFirstOrThrowArgs> = z.object({
  select: storesSelectSchema.optional(),
  include: storesIncludeSchema.optional(),
  where: storesWhereInputSchema.optional(),
  orderBy: z.union([ storesOrderByWithRelationInputSchema.array(),storesOrderByWithRelationInputSchema ]).optional(),
  cursor: storesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ StoresScalarFieldEnumSchema,StoresScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const storesFindManyArgsSchema: z.ZodType<Prisma.storesFindManyArgs> = z.object({
  select: storesSelectSchema.optional(),
  include: storesIncludeSchema.optional(),
  where: storesWhereInputSchema.optional(),
  orderBy: z.union([ storesOrderByWithRelationInputSchema.array(),storesOrderByWithRelationInputSchema ]).optional(),
  cursor: storesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ StoresScalarFieldEnumSchema,StoresScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const storesAggregateArgsSchema: z.ZodType<Prisma.storesAggregateArgs> = z.object({
  where: storesWhereInputSchema.optional(),
  orderBy: z.union([ storesOrderByWithRelationInputSchema.array(),storesOrderByWithRelationInputSchema ]).optional(),
  cursor: storesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const storesGroupByArgsSchema: z.ZodType<Prisma.storesGroupByArgs> = z.object({
  where: storesWhereInputSchema.optional(),
  orderBy: z.union([ storesOrderByWithAggregationInputSchema.array(),storesOrderByWithAggregationInputSchema ]).optional(),
  by: StoresScalarFieldEnumSchema.array(),
  having: storesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const storesFindUniqueArgsSchema: z.ZodType<Prisma.storesFindUniqueArgs> = z.object({
  select: storesSelectSchema.optional(),
  include: storesIncludeSchema.optional(),
  where: storesWhereUniqueInputSchema,
}).strict() ;

export const storesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.storesFindUniqueOrThrowArgs> = z.object({
  select: storesSelectSchema.optional(),
  include: storesIncludeSchema.optional(),
  where: storesWhereUniqueInputSchema,
}).strict() ;

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const DomainFindFirstArgsSchema: z.ZodType<Prisma.DomainFindFirstArgs> = z.object({
  select: DomainSelectSchema.optional(),
  include: DomainIncludeSchema.optional(),
  where: DomainWhereInputSchema.optional(),
  orderBy: z.union([ DomainOrderByWithRelationInputSchema.array(),DomainOrderByWithRelationInputSchema ]).optional(),
  cursor: DomainWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DomainScalarFieldEnumSchema,DomainScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DomainFindFirstOrThrowArgsSchema: z.ZodType<Prisma.DomainFindFirstOrThrowArgs> = z.object({
  select: DomainSelectSchema.optional(),
  include: DomainIncludeSchema.optional(),
  where: DomainWhereInputSchema.optional(),
  orderBy: z.union([ DomainOrderByWithRelationInputSchema.array(),DomainOrderByWithRelationInputSchema ]).optional(),
  cursor: DomainWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DomainScalarFieldEnumSchema,DomainScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DomainFindManyArgsSchema: z.ZodType<Prisma.DomainFindManyArgs> = z.object({
  select: DomainSelectSchema.optional(),
  include: DomainIncludeSchema.optional(),
  where: DomainWhereInputSchema.optional(),
  orderBy: z.union([ DomainOrderByWithRelationInputSchema.array(),DomainOrderByWithRelationInputSchema ]).optional(),
  cursor: DomainWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DomainScalarFieldEnumSchema,DomainScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DomainAggregateArgsSchema: z.ZodType<Prisma.DomainAggregateArgs> = z.object({
  where: DomainWhereInputSchema.optional(),
  orderBy: z.union([ DomainOrderByWithRelationInputSchema.array(),DomainOrderByWithRelationInputSchema ]).optional(),
  cursor: DomainWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DomainGroupByArgsSchema: z.ZodType<Prisma.DomainGroupByArgs> = z.object({
  where: DomainWhereInputSchema.optional(),
  orderBy: z.union([ DomainOrderByWithAggregationInputSchema.array(),DomainOrderByWithAggregationInputSchema ]).optional(),
  by: DomainScalarFieldEnumSchema.array(),
  having: DomainScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DomainFindUniqueArgsSchema: z.ZodType<Prisma.DomainFindUniqueArgs> = z.object({
  select: DomainSelectSchema.optional(),
  include: DomainIncludeSchema.optional(),
  where: DomainWhereUniqueInputSchema,
}).strict() ;

export const DomainFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.DomainFindUniqueOrThrowArgs> = z.object({
  select: DomainSelectSchema.optional(),
  include: DomainIncludeSchema.optional(),
  where: DomainWhereUniqueInputSchema,
}).strict() ;

export const ProductFindFirstArgsSchema: z.ZodType<Prisma.ProductFindFirstArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithRelationInputSchema.array(),ProductOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductScalarFieldEnumSchema,ProductScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProductFindFirstOrThrowArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithRelationInputSchema.array(),ProductOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductScalarFieldEnumSchema,ProductScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductFindManyArgsSchema: z.ZodType<Prisma.ProductFindManyArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithRelationInputSchema.array(),ProductOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductScalarFieldEnumSchema,ProductScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductAggregateArgsSchema: z.ZodType<Prisma.ProductAggregateArgs> = z.object({
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithRelationInputSchema.array(),ProductOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProductGroupByArgsSchema: z.ZodType<Prisma.ProductGroupByArgs> = z.object({
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithAggregationInputSchema.array(),ProductOrderByWithAggregationInputSchema ]).optional(),
  by: ProductScalarFieldEnumSchema.array(),
  having: ProductScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProductFindUniqueArgsSchema: z.ZodType<Prisma.ProductFindUniqueArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereUniqueInputSchema,
}).strict() ;

export const ProductFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProductFindUniqueOrThrowArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereUniqueInputSchema,
}).strict() ;

export const audit_log_entriesCreateArgsSchema: z.ZodType<Prisma.audit_log_entriesCreateArgs> = z.object({
  select: audit_log_entriesSelectSchema.optional(),
  data: z.union([ audit_log_entriesCreateInputSchema,audit_log_entriesUncheckedCreateInputSchema ]),
}).strict() ;

export const audit_log_entriesUpsertArgsSchema: z.ZodType<Prisma.audit_log_entriesUpsertArgs> = z.object({
  select: audit_log_entriesSelectSchema.optional(),
  where: audit_log_entriesWhereUniqueInputSchema,
  create: z.union([ audit_log_entriesCreateInputSchema,audit_log_entriesUncheckedCreateInputSchema ]),
  update: z.union([ audit_log_entriesUpdateInputSchema,audit_log_entriesUncheckedUpdateInputSchema ]),
}).strict() ;

export const audit_log_entriesCreateManyArgsSchema: z.ZodType<Prisma.audit_log_entriesCreateManyArgs> = z.object({
  data: z.union([ audit_log_entriesCreateManyInputSchema,audit_log_entriesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const audit_log_entriesCreateManyAndReturnArgsSchema: z.ZodType<Prisma.audit_log_entriesCreateManyAndReturnArgs> = z.object({
  data: z.union([ audit_log_entriesCreateManyInputSchema,audit_log_entriesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const audit_log_entriesDeleteArgsSchema: z.ZodType<Prisma.audit_log_entriesDeleteArgs> = z.object({
  select: audit_log_entriesSelectSchema.optional(),
  where: audit_log_entriesWhereUniqueInputSchema,
}).strict() ;

export const audit_log_entriesUpdateArgsSchema: z.ZodType<Prisma.audit_log_entriesUpdateArgs> = z.object({
  select: audit_log_entriesSelectSchema.optional(),
  data: z.union([ audit_log_entriesUpdateInputSchema,audit_log_entriesUncheckedUpdateInputSchema ]),
  where: audit_log_entriesWhereUniqueInputSchema,
}).strict() ;

export const audit_log_entriesUpdateManyArgsSchema: z.ZodType<Prisma.audit_log_entriesUpdateManyArgs> = z.object({
  data: z.union([ audit_log_entriesUpdateManyMutationInputSchema,audit_log_entriesUncheckedUpdateManyInputSchema ]),
  where: audit_log_entriesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const audit_log_entriesUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.audit_log_entriesUpdateManyAndReturnArgs> = z.object({
  data: z.union([ audit_log_entriesUpdateManyMutationInputSchema,audit_log_entriesUncheckedUpdateManyInputSchema ]),
  where: audit_log_entriesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const audit_log_entriesDeleteManyArgsSchema: z.ZodType<Prisma.audit_log_entriesDeleteManyArgs> = z.object({
  where: audit_log_entriesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const flow_stateCreateArgsSchema: z.ZodType<Prisma.flow_stateCreateArgs> = z.object({
  select: flow_stateSelectSchema.optional(),
  include: flow_stateIncludeSchema.optional(),
  data: z.union([ flow_stateCreateInputSchema,flow_stateUncheckedCreateInputSchema ]),
}).strict() ;

export const flow_stateUpsertArgsSchema: z.ZodType<Prisma.flow_stateUpsertArgs> = z.object({
  select: flow_stateSelectSchema.optional(),
  include: flow_stateIncludeSchema.optional(),
  where: flow_stateWhereUniqueInputSchema,
  create: z.union([ flow_stateCreateInputSchema,flow_stateUncheckedCreateInputSchema ]),
  update: z.union([ flow_stateUpdateInputSchema,flow_stateUncheckedUpdateInputSchema ]),
}).strict() ;

export const flow_stateCreateManyArgsSchema: z.ZodType<Prisma.flow_stateCreateManyArgs> = z.object({
  data: z.union([ flow_stateCreateManyInputSchema,flow_stateCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const flow_stateCreateManyAndReturnArgsSchema: z.ZodType<Prisma.flow_stateCreateManyAndReturnArgs> = z.object({
  data: z.union([ flow_stateCreateManyInputSchema,flow_stateCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const flow_stateDeleteArgsSchema: z.ZodType<Prisma.flow_stateDeleteArgs> = z.object({
  select: flow_stateSelectSchema.optional(),
  include: flow_stateIncludeSchema.optional(),
  where: flow_stateWhereUniqueInputSchema,
}).strict() ;

export const flow_stateUpdateArgsSchema: z.ZodType<Prisma.flow_stateUpdateArgs> = z.object({
  select: flow_stateSelectSchema.optional(),
  include: flow_stateIncludeSchema.optional(),
  data: z.union([ flow_stateUpdateInputSchema,flow_stateUncheckedUpdateInputSchema ]),
  where: flow_stateWhereUniqueInputSchema,
}).strict() ;

export const flow_stateUpdateManyArgsSchema: z.ZodType<Prisma.flow_stateUpdateManyArgs> = z.object({
  data: z.union([ flow_stateUpdateManyMutationInputSchema,flow_stateUncheckedUpdateManyInputSchema ]),
  where: flow_stateWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const flow_stateUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.flow_stateUpdateManyAndReturnArgs> = z.object({
  data: z.union([ flow_stateUpdateManyMutationInputSchema,flow_stateUncheckedUpdateManyInputSchema ]),
  where: flow_stateWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const flow_stateDeleteManyArgsSchema: z.ZodType<Prisma.flow_stateDeleteManyArgs> = z.object({
  where: flow_stateWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const identitiesCreateArgsSchema: z.ZodType<Prisma.identitiesCreateArgs> = z.object({
  select: identitiesSelectSchema.optional(),
  include: identitiesIncludeSchema.optional(),
  data: z.union([ identitiesCreateInputSchema,identitiesUncheckedCreateInputSchema ]),
}).strict() ;

export const identitiesUpsertArgsSchema: z.ZodType<Prisma.identitiesUpsertArgs> = z.object({
  select: identitiesSelectSchema.optional(),
  include: identitiesIncludeSchema.optional(),
  where: identitiesWhereUniqueInputSchema,
  create: z.union([ identitiesCreateInputSchema,identitiesUncheckedCreateInputSchema ]),
  update: z.union([ identitiesUpdateInputSchema,identitiesUncheckedUpdateInputSchema ]),
}).strict() ;

export const identitiesCreateManyArgsSchema: z.ZodType<Prisma.identitiesCreateManyArgs> = z.object({
  data: z.union([ identitiesCreateManyInputSchema,identitiesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const identitiesCreateManyAndReturnArgsSchema: z.ZodType<Prisma.identitiesCreateManyAndReturnArgs> = z.object({
  data: z.union([ identitiesCreateManyInputSchema,identitiesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const identitiesDeleteArgsSchema: z.ZodType<Prisma.identitiesDeleteArgs> = z.object({
  select: identitiesSelectSchema.optional(),
  include: identitiesIncludeSchema.optional(),
  where: identitiesWhereUniqueInputSchema,
}).strict() ;

export const identitiesUpdateArgsSchema: z.ZodType<Prisma.identitiesUpdateArgs> = z.object({
  select: identitiesSelectSchema.optional(),
  include: identitiesIncludeSchema.optional(),
  data: z.union([ identitiesUpdateInputSchema,identitiesUncheckedUpdateInputSchema ]),
  where: identitiesWhereUniqueInputSchema,
}).strict() ;

export const identitiesUpdateManyArgsSchema: z.ZodType<Prisma.identitiesUpdateManyArgs> = z.object({
  data: z.union([ identitiesUpdateManyMutationInputSchema,identitiesUncheckedUpdateManyInputSchema ]),
  where: identitiesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const identitiesUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.identitiesUpdateManyAndReturnArgs> = z.object({
  data: z.union([ identitiesUpdateManyMutationInputSchema,identitiesUncheckedUpdateManyInputSchema ]),
  where: identitiesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const identitiesDeleteManyArgsSchema: z.ZodType<Prisma.identitiesDeleteManyArgs> = z.object({
  where: identitiesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const instancesCreateArgsSchema: z.ZodType<Prisma.instancesCreateArgs> = z.object({
  select: instancesSelectSchema.optional(),
  data: z.union([ instancesCreateInputSchema,instancesUncheckedCreateInputSchema ]),
}).strict() ;

export const instancesUpsertArgsSchema: z.ZodType<Prisma.instancesUpsertArgs> = z.object({
  select: instancesSelectSchema.optional(),
  where: instancesWhereUniqueInputSchema,
  create: z.union([ instancesCreateInputSchema,instancesUncheckedCreateInputSchema ]),
  update: z.union([ instancesUpdateInputSchema,instancesUncheckedUpdateInputSchema ]),
}).strict() ;

export const instancesCreateManyArgsSchema: z.ZodType<Prisma.instancesCreateManyArgs> = z.object({
  data: z.union([ instancesCreateManyInputSchema,instancesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const instancesCreateManyAndReturnArgsSchema: z.ZodType<Prisma.instancesCreateManyAndReturnArgs> = z.object({
  data: z.union([ instancesCreateManyInputSchema,instancesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const instancesDeleteArgsSchema: z.ZodType<Prisma.instancesDeleteArgs> = z.object({
  select: instancesSelectSchema.optional(),
  where: instancesWhereUniqueInputSchema,
}).strict() ;

export const instancesUpdateArgsSchema: z.ZodType<Prisma.instancesUpdateArgs> = z.object({
  select: instancesSelectSchema.optional(),
  data: z.union([ instancesUpdateInputSchema,instancesUncheckedUpdateInputSchema ]),
  where: instancesWhereUniqueInputSchema,
}).strict() ;

export const instancesUpdateManyArgsSchema: z.ZodType<Prisma.instancesUpdateManyArgs> = z.object({
  data: z.union([ instancesUpdateManyMutationInputSchema,instancesUncheckedUpdateManyInputSchema ]),
  where: instancesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const instancesUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.instancesUpdateManyAndReturnArgs> = z.object({
  data: z.union([ instancesUpdateManyMutationInputSchema,instancesUncheckedUpdateManyInputSchema ]),
  where: instancesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const instancesDeleteManyArgsSchema: z.ZodType<Prisma.instancesDeleteManyArgs> = z.object({
  where: instancesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const mfa_amr_claimsCreateArgsSchema: z.ZodType<Prisma.mfa_amr_claimsCreateArgs> = z.object({
  select: mfa_amr_claimsSelectSchema.optional(),
  include: mfa_amr_claimsIncludeSchema.optional(),
  data: z.union([ mfa_amr_claimsCreateInputSchema,mfa_amr_claimsUncheckedCreateInputSchema ]),
}).strict() ;

export const mfa_amr_claimsUpsertArgsSchema: z.ZodType<Prisma.mfa_amr_claimsUpsertArgs> = z.object({
  select: mfa_amr_claimsSelectSchema.optional(),
  include: mfa_amr_claimsIncludeSchema.optional(),
  where: mfa_amr_claimsWhereUniqueInputSchema,
  create: z.union([ mfa_amr_claimsCreateInputSchema,mfa_amr_claimsUncheckedCreateInputSchema ]),
  update: z.union([ mfa_amr_claimsUpdateInputSchema,mfa_amr_claimsUncheckedUpdateInputSchema ]),
}).strict() ;

export const mfa_amr_claimsCreateManyArgsSchema: z.ZodType<Prisma.mfa_amr_claimsCreateManyArgs> = z.object({
  data: z.union([ mfa_amr_claimsCreateManyInputSchema,mfa_amr_claimsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const mfa_amr_claimsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.mfa_amr_claimsCreateManyAndReturnArgs> = z.object({
  data: z.union([ mfa_amr_claimsCreateManyInputSchema,mfa_amr_claimsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const mfa_amr_claimsDeleteArgsSchema: z.ZodType<Prisma.mfa_amr_claimsDeleteArgs> = z.object({
  select: mfa_amr_claimsSelectSchema.optional(),
  include: mfa_amr_claimsIncludeSchema.optional(),
  where: mfa_amr_claimsWhereUniqueInputSchema,
}).strict() ;

export const mfa_amr_claimsUpdateArgsSchema: z.ZodType<Prisma.mfa_amr_claimsUpdateArgs> = z.object({
  select: mfa_amr_claimsSelectSchema.optional(),
  include: mfa_amr_claimsIncludeSchema.optional(),
  data: z.union([ mfa_amr_claimsUpdateInputSchema,mfa_amr_claimsUncheckedUpdateInputSchema ]),
  where: mfa_amr_claimsWhereUniqueInputSchema,
}).strict() ;

export const mfa_amr_claimsUpdateManyArgsSchema: z.ZodType<Prisma.mfa_amr_claimsUpdateManyArgs> = z.object({
  data: z.union([ mfa_amr_claimsUpdateManyMutationInputSchema,mfa_amr_claimsUncheckedUpdateManyInputSchema ]),
  where: mfa_amr_claimsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const mfa_amr_claimsUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.mfa_amr_claimsUpdateManyAndReturnArgs> = z.object({
  data: z.union([ mfa_amr_claimsUpdateManyMutationInputSchema,mfa_amr_claimsUncheckedUpdateManyInputSchema ]),
  where: mfa_amr_claimsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const mfa_amr_claimsDeleteManyArgsSchema: z.ZodType<Prisma.mfa_amr_claimsDeleteManyArgs> = z.object({
  where: mfa_amr_claimsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const mfa_challengesCreateArgsSchema: z.ZodType<Prisma.mfa_challengesCreateArgs> = z.object({
  select: mfa_challengesSelectSchema.optional(),
  include: mfa_challengesIncludeSchema.optional(),
  data: z.union([ mfa_challengesCreateInputSchema,mfa_challengesUncheckedCreateInputSchema ]),
}).strict() ;

export const mfa_challengesUpsertArgsSchema: z.ZodType<Prisma.mfa_challengesUpsertArgs> = z.object({
  select: mfa_challengesSelectSchema.optional(),
  include: mfa_challengesIncludeSchema.optional(),
  where: mfa_challengesWhereUniqueInputSchema,
  create: z.union([ mfa_challengesCreateInputSchema,mfa_challengesUncheckedCreateInputSchema ]),
  update: z.union([ mfa_challengesUpdateInputSchema,mfa_challengesUncheckedUpdateInputSchema ]),
}).strict() ;

export const mfa_challengesCreateManyArgsSchema: z.ZodType<Prisma.mfa_challengesCreateManyArgs> = z.object({
  data: z.union([ mfa_challengesCreateManyInputSchema,mfa_challengesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const mfa_challengesCreateManyAndReturnArgsSchema: z.ZodType<Prisma.mfa_challengesCreateManyAndReturnArgs> = z.object({
  data: z.union([ mfa_challengesCreateManyInputSchema,mfa_challengesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const mfa_challengesDeleteArgsSchema: z.ZodType<Prisma.mfa_challengesDeleteArgs> = z.object({
  select: mfa_challengesSelectSchema.optional(),
  include: mfa_challengesIncludeSchema.optional(),
  where: mfa_challengesWhereUniqueInputSchema,
}).strict() ;

export const mfa_challengesUpdateArgsSchema: z.ZodType<Prisma.mfa_challengesUpdateArgs> = z.object({
  select: mfa_challengesSelectSchema.optional(),
  include: mfa_challengesIncludeSchema.optional(),
  data: z.union([ mfa_challengesUpdateInputSchema,mfa_challengesUncheckedUpdateInputSchema ]),
  where: mfa_challengesWhereUniqueInputSchema,
}).strict() ;

export const mfa_challengesUpdateManyArgsSchema: z.ZodType<Prisma.mfa_challengesUpdateManyArgs> = z.object({
  data: z.union([ mfa_challengesUpdateManyMutationInputSchema,mfa_challengesUncheckedUpdateManyInputSchema ]),
  where: mfa_challengesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const mfa_challengesUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.mfa_challengesUpdateManyAndReturnArgs> = z.object({
  data: z.union([ mfa_challengesUpdateManyMutationInputSchema,mfa_challengesUncheckedUpdateManyInputSchema ]),
  where: mfa_challengesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const mfa_challengesDeleteManyArgsSchema: z.ZodType<Prisma.mfa_challengesDeleteManyArgs> = z.object({
  where: mfa_challengesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const mfa_factorsCreateArgsSchema: z.ZodType<Prisma.mfa_factorsCreateArgs> = z.object({
  select: mfa_factorsSelectSchema.optional(),
  include: mfa_factorsIncludeSchema.optional(),
  data: z.union([ mfa_factorsCreateInputSchema,mfa_factorsUncheckedCreateInputSchema ]),
}).strict() ;

export const mfa_factorsUpsertArgsSchema: z.ZodType<Prisma.mfa_factorsUpsertArgs> = z.object({
  select: mfa_factorsSelectSchema.optional(),
  include: mfa_factorsIncludeSchema.optional(),
  where: mfa_factorsWhereUniqueInputSchema,
  create: z.union([ mfa_factorsCreateInputSchema,mfa_factorsUncheckedCreateInputSchema ]),
  update: z.union([ mfa_factorsUpdateInputSchema,mfa_factorsUncheckedUpdateInputSchema ]),
}).strict() ;

export const mfa_factorsCreateManyArgsSchema: z.ZodType<Prisma.mfa_factorsCreateManyArgs> = z.object({
  data: z.union([ mfa_factorsCreateManyInputSchema,mfa_factorsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const mfa_factorsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.mfa_factorsCreateManyAndReturnArgs> = z.object({
  data: z.union([ mfa_factorsCreateManyInputSchema,mfa_factorsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const mfa_factorsDeleteArgsSchema: z.ZodType<Prisma.mfa_factorsDeleteArgs> = z.object({
  select: mfa_factorsSelectSchema.optional(),
  include: mfa_factorsIncludeSchema.optional(),
  where: mfa_factorsWhereUniqueInputSchema,
}).strict() ;

export const mfa_factorsUpdateArgsSchema: z.ZodType<Prisma.mfa_factorsUpdateArgs> = z.object({
  select: mfa_factorsSelectSchema.optional(),
  include: mfa_factorsIncludeSchema.optional(),
  data: z.union([ mfa_factorsUpdateInputSchema,mfa_factorsUncheckedUpdateInputSchema ]),
  where: mfa_factorsWhereUniqueInputSchema,
}).strict() ;

export const mfa_factorsUpdateManyArgsSchema: z.ZodType<Prisma.mfa_factorsUpdateManyArgs> = z.object({
  data: z.union([ mfa_factorsUpdateManyMutationInputSchema,mfa_factorsUncheckedUpdateManyInputSchema ]),
  where: mfa_factorsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const mfa_factorsUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.mfa_factorsUpdateManyAndReturnArgs> = z.object({
  data: z.union([ mfa_factorsUpdateManyMutationInputSchema,mfa_factorsUncheckedUpdateManyInputSchema ]),
  where: mfa_factorsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const mfa_factorsDeleteManyArgsSchema: z.ZodType<Prisma.mfa_factorsDeleteManyArgs> = z.object({
  where: mfa_factorsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const one_time_tokensCreateArgsSchema: z.ZodType<Prisma.one_time_tokensCreateArgs> = z.object({
  select: one_time_tokensSelectSchema.optional(),
  include: one_time_tokensIncludeSchema.optional(),
  data: z.union([ one_time_tokensCreateInputSchema,one_time_tokensUncheckedCreateInputSchema ]),
}).strict() ;

export const one_time_tokensUpsertArgsSchema: z.ZodType<Prisma.one_time_tokensUpsertArgs> = z.object({
  select: one_time_tokensSelectSchema.optional(),
  include: one_time_tokensIncludeSchema.optional(),
  where: one_time_tokensWhereUniqueInputSchema,
  create: z.union([ one_time_tokensCreateInputSchema,one_time_tokensUncheckedCreateInputSchema ]),
  update: z.union([ one_time_tokensUpdateInputSchema,one_time_tokensUncheckedUpdateInputSchema ]),
}).strict() ;

export const one_time_tokensCreateManyArgsSchema: z.ZodType<Prisma.one_time_tokensCreateManyArgs> = z.object({
  data: z.union([ one_time_tokensCreateManyInputSchema,one_time_tokensCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const one_time_tokensCreateManyAndReturnArgsSchema: z.ZodType<Prisma.one_time_tokensCreateManyAndReturnArgs> = z.object({
  data: z.union([ one_time_tokensCreateManyInputSchema,one_time_tokensCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const one_time_tokensDeleteArgsSchema: z.ZodType<Prisma.one_time_tokensDeleteArgs> = z.object({
  select: one_time_tokensSelectSchema.optional(),
  include: one_time_tokensIncludeSchema.optional(),
  where: one_time_tokensWhereUniqueInputSchema,
}).strict() ;

export const one_time_tokensUpdateArgsSchema: z.ZodType<Prisma.one_time_tokensUpdateArgs> = z.object({
  select: one_time_tokensSelectSchema.optional(),
  include: one_time_tokensIncludeSchema.optional(),
  data: z.union([ one_time_tokensUpdateInputSchema,one_time_tokensUncheckedUpdateInputSchema ]),
  where: one_time_tokensWhereUniqueInputSchema,
}).strict() ;

export const one_time_tokensUpdateManyArgsSchema: z.ZodType<Prisma.one_time_tokensUpdateManyArgs> = z.object({
  data: z.union([ one_time_tokensUpdateManyMutationInputSchema,one_time_tokensUncheckedUpdateManyInputSchema ]),
  where: one_time_tokensWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const one_time_tokensUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.one_time_tokensUpdateManyAndReturnArgs> = z.object({
  data: z.union([ one_time_tokensUpdateManyMutationInputSchema,one_time_tokensUncheckedUpdateManyInputSchema ]),
  where: one_time_tokensWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const one_time_tokensDeleteManyArgsSchema: z.ZodType<Prisma.one_time_tokensDeleteManyArgs> = z.object({
  where: one_time_tokensWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const refresh_tokensCreateArgsSchema: z.ZodType<Prisma.refresh_tokensCreateArgs> = z.object({
  select: refresh_tokensSelectSchema.optional(),
  include: refresh_tokensIncludeSchema.optional(),
  data: z.union([ refresh_tokensCreateInputSchema,refresh_tokensUncheckedCreateInputSchema ]).optional(),
}).strict() ;

export const refresh_tokensUpsertArgsSchema: z.ZodType<Prisma.refresh_tokensUpsertArgs> = z.object({
  select: refresh_tokensSelectSchema.optional(),
  include: refresh_tokensIncludeSchema.optional(),
  where: refresh_tokensWhereUniqueInputSchema,
  create: z.union([ refresh_tokensCreateInputSchema,refresh_tokensUncheckedCreateInputSchema ]),
  update: z.union([ refresh_tokensUpdateInputSchema,refresh_tokensUncheckedUpdateInputSchema ]),
}).strict() ;

export const refresh_tokensCreateManyArgsSchema: z.ZodType<Prisma.refresh_tokensCreateManyArgs> = z.object({
  data: z.union([ refresh_tokensCreateManyInputSchema,refresh_tokensCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const refresh_tokensCreateManyAndReturnArgsSchema: z.ZodType<Prisma.refresh_tokensCreateManyAndReturnArgs> = z.object({
  data: z.union([ refresh_tokensCreateManyInputSchema,refresh_tokensCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const refresh_tokensDeleteArgsSchema: z.ZodType<Prisma.refresh_tokensDeleteArgs> = z.object({
  select: refresh_tokensSelectSchema.optional(),
  include: refresh_tokensIncludeSchema.optional(),
  where: refresh_tokensWhereUniqueInputSchema,
}).strict() ;

export const refresh_tokensUpdateArgsSchema: z.ZodType<Prisma.refresh_tokensUpdateArgs> = z.object({
  select: refresh_tokensSelectSchema.optional(),
  include: refresh_tokensIncludeSchema.optional(),
  data: z.union([ refresh_tokensUpdateInputSchema,refresh_tokensUncheckedUpdateInputSchema ]),
  where: refresh_tokensWhereUniqueInputSchema,
}).strict() ;

export const refresh_tokensUpdateManyArgsSchema: z.ZodType<Prisma.refresh_tokensUpdateManyArgs> = z.object({
  data: z.union([ refresh_tokensUpdateManyMutationInputSchema,refresh_tokensUncheckedUpdateManyInputSchema ]),
  where: refresh_tokensWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const refresh_tokensUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.refresh_tokensUpdateManyAndReturnArgs> = z.object({
  data: z.union([ refresh_tokensUpdateManyMutationInputSchema,refresh_tokensUncheckedUpdateManyInputSchema ]),
  where: refresh_tokensWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const refresh_tokensDeleteManyArgsSchema: z.ZodType<Prisma.refresh_tokensDeleteManyArgs> = z.object({
  where: refresh_tokensWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const saml_providersCreateArgsSchema: z.ZodType<Prisma.saml_providersCreateArgs> = z.object({
  select: saml_providersSelectSchema.optional(),
  include: saml_providersIncludeSchema.optional(),
  data: z.union([ saml_providersCreateInputSchema,saml_providersUncheckedCreateInputSchema ]),
}).strict() ;

export const saml_providersUpsertArgsSchema: z.ZodType<Prisma.saml_providersUpsertArgs> = z.object({
  select: saml_providersSelectSchema.optional(),
  include: saml_providersIncludeSchema.optional(),
  where: saml_providersWhereUniqueInputSchema,
  create: z.union([ saml_providersCreateInputSchema,saml_providersUncheckedCreateInputSchema ]),
  update: z.union([ saml_providersUpdateInputSchema,saml_providersUncheckedUpdateInputSchema ]),
}).strict() ;

export const saml_providersCreateManyArgsSchema: z.ZodType<Prisma.saml_providersCreateManyArgs> = z.object({
  data: z.union([ saml_providersCreateManyInputSchema,saml_providersCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const saml_providersCreateManyAndReturnArgsSchema: z.ZodType<Prisma.saml_providersCreateManyAndReturnArgs> = z.object({
  data: z.union([ saml_providersCreateManyInputSchema,saml_providersCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const saml_providersDeleteArgsSchema: z.ZodType<Prisma.saml_providersDeleteArgs> = z.object({
  select: saml_providersSelectSchema.optional(),
  include: saml_providersIncludeSchema.optional(),
  where: saml_providersWhereUniqueInputSchema,
}).strict() ;

export const saml_providersUpdateArgsSchema: z.ZodType<Prisma.saml_providersUpdateArgs> = z.object({
  select: saml_providersSelectSchema.optional(),
  include: saml_providersIncludeSchema.optional(),
  data: z.union([ saml_providersUpdateInputSchema,saml_providersUncheckedUpdateInputSchema ]),
  where: saml_providersWhereUniqueInputSchema,
}).strict() ;

export const saml_providersUpdateManyArgsSchema: z.ZodType<Prisma.saml_providersUpdateManyArgs> = z.object({
  data: z.union([ saml_providersUpdateManyMutationInputSchema,saml_providersUncheckedUpdateManyInputSchema ]),
  where: saml_providersWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const saml_providersUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.saml_providersUpdateManyAndReturnArgs> = z.object({
  data: z.union([ saml_providersUpdateManyMutationInputSchema,saml_providersUncheckedUpdateManyInputSchema ]),
  where: saml_providersWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const saml_providersDeleteManyArgsSchema: z.ZodType<Prisma.saml_providersDeleteManyArgs> = z.object({
  where: saml_providersWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const saml_relay_statesCreateArgsSchema: z.ZodType<Prisma.saml_relay_statesCreateArgs> = z.object({
  select: saml_relay_statesSelectSchema.optional(),
  include: saml_relay_statesIncludeSchema.optional(),
  data: z.union([ saml_relay_statesCreateInputSchema,saml_relay_statesUncheckedCreateInputSchema ]),
}).strict() ;

export const saml_relay_statesUpsertArgsSchema: z.ZodType<Prisma.saml_relay_statesUpsertArgs> = z.object({
  select: saml_relay_statesSelectSchema.optional(),
  include: saml_relay_statesIncludeSchema.optional(),
  where: saml_relay_statesWhereUniqueInputSchema,
  create: z.union([ saml_relay_statesCreateInputSchema,saml_relay_statesUncheckedCreateInputSchema ]),
  update: z.union([ saml_relay_statesUpdateInputSchema,saml_relay_statesUncheckedUpdateInputSchema ]),
}).strict() ;

export const saml_relay_statesCreateManyArgsSchema: z.ZodType<Prisma.saml_relay_statesCreateManyArgs> = z.object({
  data: z.union([ saml_relay_statesCreateManyInputSchema,saml_relay_statesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const saml_relay_statesCreateManyAndReturnArgsSchema: z.ZodType<Prisma.saml_relay_statesCreateManyAndReturnArgs> = z.object({
  data: z.union([ saml_relay_statesCreateManyInputSchema,saml_relay_statesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const saml_relay_statesDeleteArgsSchema: z.ZodType<Prisma.saml_relay_statesDeleteArgs> = z.object({
  select: saml_relay_statesSelectSchema.optional(),
  include: saml_relay_statesIncludeSchema.optional(),
  where: saml_relay_statesWhereUniqueInputSchema,
}).strict() ;

export const saml_relay_statesUpdateArgsSchema: z.ZodType<Prisma.saml_relay_statesUpdateArgs> = z.object({
  select: saml_relay_statesSelectSchema.optional(),
  include: saml_relay_statesIncludeSchema.optional(),
  data: z.union([ saml_relay_statesUpdateInputSchema,saml_relay_statesUncheckedUpdateInputSchema ]),
  where: saml_relay_statesWhereUniqueInputSchema,
}).strict() ;

export const saml_relay_statesUpdateManyArgsSchema: z.ZodType<Prisma.saml_relay_statesUpdateManyArgs> = z.object({
  data: z.union([ saml_relay_statesUpdateManyMutationInputSchema,saml_relay_statesUncheckedUpdateManyInputSchema ]),
  where: saml_relay_statesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const saml_relay_statesUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.saml_relay_statesUpdateManyAndReturnArgs> = z.object({
  data: z.union([ saml_relay_statesUpdateManyMutationInputSchema,saml_relay_statesUncheckedUpdateManyInputSchema ]),
  where: saml_relay_statesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const saml_relay_statesDeleteManyArgsSchema: z.ZodType<Prisma.saml_relay_statesDeleteManyArgs> = z.object({
  where: saml_relay_statesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const schema_migrationsCreateArgsSchema: z.ZodType<Prisma.schema_migrationsCreateArgs> = z.object({
  select: schema_migrationsSelectSchema.optional(),
  data: z.union([ schema_migrationsCreateInputSchema,schema_migrationsUncheckedCreateInputSchema ]),
}).strict() ;

export const schema_migrationsUpsertArgsSchema: z.ZodType<Prisma.schema_migrationsUpsertArgs> = z.object({
  select: schema_migrationsSelectSchema.optional(),
  where: schema_migrationsWhereUniqueInputSchema,
  create: z.union([ schema_migrationsCreateInputSchema,schema_migrationsUncheckedCreateInputSchema ]),
  update: z.union([ schema_migrationsUpdateInputSchema,schema_migrationsUncheckedUpdateInputSchema ]),
}).strict() ;

export const schema_migrationsCreateManyArgsSchema: z.ZodType<Prisma.schema_migrationsCreateManyArgs> = z.object({
  data: z.union([ schema_migrationsCreateManyInputSchema,schema_migrationsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const schema_migrationsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.schema_migrationsCreateManyAndReturnArgs> = z.object({
  data: z.union([ schema_migrationsCreateManyInputSchema,schema_migrationsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const schema_migrationsDeleteArgsSchema: z.ZodType<Prisma.schema_migrationsDeleteArgs> = z.object({
  select: schema_migrationsSelectSchema.optional(),
  where: schema_migrationsWhereUniqueInputSchema,
}).strict() ;

export const schema_migrationsUpdateArgsSchema: z.ZodType<Prisma.schema_migrationsUpdateArgs> = z.object({
  select: schema_migrationsSelectSchema.optional(),
  data: z.union([ schema_migrationsUpdateInputSchema,schema_migrationsUncheckedUpdateInputSchema ]),
  where: schema_migrationsWhereUniqueInputSchema,
}).strict() ;

export const schema_migrationsUpdateManyArgsSchema: z.ZodType<Prisma.schema_migrationsUpdateManyArgs> = z.object({
  data: z.union([ schema_migrationsUpdateManyMutationInputSchema,schema_migrationsUncheckedUpdateManyInputSchema ]),
  where: schema_migrationsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const schema_migrationsUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.schema_migrationsUpdateManyAndReturnArgs> = z.object({
  data: z.union([ schema_migrationsUpdateManyMutationInputSchema,schema_migrationsUncheckedUpdateManyInputSchema ]),
  where: schema_migrationsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const schema_migrationsDeleteManyArgsSchema: z.ZodType<Prisma.schema_migrationsDeleteManyArgs> = z.object({
  where: schema_migrationsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const sessionsCreateArgsSchema: z.ZodType<Prisma.sessionsCreateArgs> = z.object({
  select: sessionsSelectSchema.optional(),
  include: sessionsIncludeSchema.optional(),
  data: z.union([ sessionsCreateInputSchema,sessionsUncheckedCreateInputSchema ]),
}).strict() ;

export const sessionsUpsertArgsSchema: z.ZodType<Prisma.sessionsUpsertArgs> = z.object({
  select: sessionsSelectSchema.optional(),
  include: sessionsIncludeSchema.optional(),
  where: sessionsWhereUniqueInputSchema,
  create: z.union([ sessionsCreateInputSchema,sessionsUncheckedCreateInputSchema ]),
  update: z.union([ sessionsUpdateInputSchema,sessionsUncheckedUpdateInputSchema ]),
}).strict() ;

export const sessionsCreateManyArgsSchema: z.ZodType<Prisma.sessionsCreateManyArgs> = z.object({
  data: z.union([ sessionsCreateManyInputSchema,sessionsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const sessionsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.sessionsCreateManyAndReturnArgs> = z.object({
  data: z.union([ sessionsCreateManyInputSchema,sessionsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const sessionsDeleteArgsSchema: z.ZodType<Prisma.sessionsDeleteArgs> = z.object({
  select: sessionsSelectSchema.optional(),
  include: sessionsIncludeSchema.optional(),
  where: sessionsWhereUniqueInputSchema,
}).strict() ;

export const sessionsUpdateArgsSchema: z.ZodType<Prisma.sessionsUpdateArgs> = z.object({
  select: sessionsSelectSchema.optional(),
  include: sessionsIncludeSchema.optional(),
  data: z.union([ sessionsUpdateInputSchema,sessionsUncheckedUpdateInputSchema ]),
  where: sessionsWhereUniqueInputSchema,
}).strict() ;

export const sessionsUpdateManyArgsSchema: z.ZodType<Prisma.sessionsUpdateManyArgs> = z.object({
  data: z.union([ sessionsUpdateManyMutationInputSchema,sessionsUncheckedUpdateManyInputSchema ]),
  where: sessionsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const sessionsUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.sessionsUpdateManyAndReturnArgs> = z.object({
  data: z.union([ sessionsUpdateManyMutationInputSchema,sessionsUncheckedUpdateManyInputSchema ]),
  where: sessionsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const sessionsDeleteManyArgsSchema: z.ZodType<Prisma.sessionsDeleteManyArgs> = z.object({
  where: sessionsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const sso_domainsCreateArgsSchema: z.ZodType<Prisma.sso_domainsCreateArgs> = z.object({
  select: sso_domainsSelectSchema.optional(),
  include: sso_domainsIncludeSchema.optional(),
  data: z.union([ sso_domainsCreateInputSchema,sso_domainsUncheckedCreateInputSchema ]),
}).strict() ;

export const sso_domainsUpsertArgsSchema: z.ZodType<Prisma.sso_domainsUpsertArgs> = z.object({
  select: sso_domainsSelectSchema.optional(),
  include: sso_domainsIncludeSchema.optional(),
  where: sso_domainsWhereUniqueInputSchema,
  create: z.union([ sso_domainsCreateInputSchema,sso_domainsUncheckedCreateInputSchema ]),
  update: z.union([ sso_domainsUpdateInputSchema,sso_domainsUncheckedUpdateInputSchema ]),
}).strict() ;

export const sso_domainsCreateManyArgsSchema: z.ZodType<Prisma.sso_domainsCreateManyArgs> = z.object({
  data: z.union([ sso_domainsCreateManyInputSchema,sso_domainsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const sso_domainsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.sso_domainsCreateManyAndReturnArgs> = z.object({
  data: z.union([ sso_domainsCreateManyInputSchema,sso_domainsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const sso_domainsDeleteArgsSchema: z.ZodType<Prisma.sso_domainsDeleteArgs> = z.object({
  select: sso_domainsSelectSchema.optional(),
  include: sso_domainsIncludeSchema.optional(),
  where: sso_domainsWhereUniqueInputSchema,
}).strict() ;

export const sso_domainsUpdateArgsSchema: z.ZodType<Prisma.sso_domainsUpdateArgs> = z.object({
  select: sso_domainsSelectSchema.optional(),
  include: sso_domainsIncludeSchema.optional(),
  data: z.union([ sso_domainsUpdateInputSchema,sso_domainsUncheckedUpdateInputSchema ]),
  where: sso_domainsWhereUniqueInputSchema,
}).strict() ;

export const sso_domainsUpdateManyArgsSchema: z.ZodType<Prisma.sso_domainsUpdateManyArgs> = z.object({
  data: z.union([ sso_domainsUpdateManyMutationInputSchema,sso_domainsUncheckedUpdateManyInputSchema ]),
  where: sso_domainsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const sso_domainsUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.sso_domainsUpdateManyAndReturnArgs> = z.object({
  data: z.union([ sso_domainsUpdateManyMutationInputSchema,sso_domainsUncheckedUpdateManyInputSchema ]),
  where: sso_domainsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const sso_domainsDeleteManyArgsSchema: z.ZodType<Prisma.sso_domainsDeleteManyArgs> = z.object({
  where: sso_domainsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const sso_providersCreateArgsSchema: z.ZodType<Prisma.sso_providersCreateArgs> = z.object({
  select: sso_providersSelectSchema.optional(),
  include: sso_providersIncludeSchema.optional(),
  data: z.union([ sso_providersCreateInputSchema,sso_providersUncheckedCreateInputSchema ]),
}).strict() ;

export const sso_providersUpsertArgsSchema: z.ZodType<Prisma.sso_providersUpsertArgs> = z.object({
  select: sso_providersSelectSchema.optional(),
  include: sso_providersIncludeSchema.optional(),
  where: sso_providersWhereUniqueInputSchema,
  create: z.union([ sso_providersCreateInputSchema,sso_providersUncheckedCreateInputSchema ]),
  update: z.union([ sso_providersUpdateInputSchema,sso_providersUncheckedUpdateInputSchema ]),
}).strict() ;

export const sso_providersCreateManyArgsSchema: z.ZodType<Prisma.sso_providersCreateManyArgs> = z.object({
  data: z.union([ sso_providersCreateManyInputSchema,sso_providersCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const sso_providersCreateManyAndReturnArgsSchema: z.ZodType<Prisma.sso_providersCreateManyAndReturnArgs> = z.object({
  data: z.union([ sso_providersCreateManyInputSchema,sso_providersCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const sso_providersDeleteArgsSchema: z.ZodType<Prisma.sso_providersDeleteArgs> = z.object({
  select: sso_providersSelectSchema.optional(),
  include: sso_providersIncludeSchema.optional(),
  where: sso_providersWhereUniqueInputSchema,
}).strict() ;

export const sso_providersUpdateArgsSchema: z.ZodType<Prisma.sso_providersUpdateArgs> = z.object({
  select: sso_providersSelectSchema.optional(),
  include: sso_providersIncludeSchema.optional(),
  data: z.union([ sso_providersUpdateInputSchema,sso_providersUncheckedUpdateInputSchema ]),
  where: sso_providersWhereUniqueInputSchema,
}).strict() ;

export const sso_providersUpdateManyArgsSchema: z.ZodType<Prisma.sso_providersUpdateManyArgs> = z.object({
  data: z.union([ sso_providersUpdateManyMutationInputSchema,sso_providersUncheckedUpdateManyInputSchema ]),
  where: sso_providersWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const sso_providersUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.sso_providersUpdateManyAndReturnArgs> = z.object({
  data: z.union([ sso_providersUpdateManyMutationInputSchema,sso_providersUncheckedUpdateManyInputSchema ]),
  where: sso_providersWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const sso_providersDeleteManyArgsSchema: z.ZodType<Prisma.sso_providersDeleteManyArgs> = z.object({
  where: sso_providersWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const usersCreateArgsSchema: z.ZodType<Prisma.usersCreateArgs> = z.object({
  select: usersSelectSchema.optional(),
  include: usersIncludeSchema.optional(),
  data: z.union([ usersCreateInputSchema,usersUncheckedCreateInputSchema ]),
}).strict() ;

export const usersUpsertArgsSchema: z.ZodType<Prisma.usersUpsertArgs> = z.object({
  select: usersSelectSchema.optional(),
  include: usersIncludeSchema.optional(),
  where: usersWhereUniqueInputSchema,
  create: z.union([ usersCreateInputSchema,usersUncheckedCreateInputSchema ]),
  update: z.union([ usersUpdateInputSchema,usersUncheckedUpdateInputSchema ]),
}).strict() ;

export const usersCreateManyArgsSchema: z.ZodType<Prisma.usersCreateManyArgs> = z.object({
  data: z.union([ usersCreateManyInputSchema,usersCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const usersCreateManyAndReturnArgsSchema: z.ZodType<Prisma.usersCreateManyAndReturnArgs> = z.object({
  data: z.union([ usersCreateManyInputSchema,usersCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const usersDeleteArgsSchema: z.ZodType<Prisma.usersDeleteArgs> = z.object({
  select: usersSelectSchema.optional(),
  include: usersIncludeSchema.optional(),
  where: usersWhereUniqueInputSchema,
}).strict() ;

export const usersUpdateArgsSchema: z.ZodType<Prisma.usersUpdateArgs> = z.object({
  select: usersSelectSchema.optional(),
  include: usersIncludeSchema.optional(),
  data: z.union([ usersUpdateInputSchema,usersUncheckedUpdateInputSchema ]),
  where: usersWhereUniqueInputSchema,
}).strict() ;

export const usersUpdateManyArgsSchema: z.ZodType<Prisma.usersUpdateManyArgs> = z.object({
  data: z.union([ usersUpdateManyMutationInputSchema,usersUncheckedUpdateManyInputSchema ]),
  where: usersWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const usersUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.usersUpdateManyAndReturnArgs> = z.object({
  data: z.union([ usersUpdateManyMutationInputSchema,usersUncheckedUpdateManyInputSchema ]),
  where: usersWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const usersDeleteManyArgsSchema: z.ZodType<Prisma.usersDeleteManyArgs> = z.object({
  where: usersWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const cash_flowCreateArgsSchema: z.ZodType<Prisma.cash_flowCreateArgs> = z.object({
  select: cash_flowSelectSchema.optional(),
  data: z.union([ cash_flowCreateInputSchema,cash_flowUncheckedCreateInputSchema ]),
}).strict() ;

export const cash_flowUpsertArgsSchema: z.ZodType<Prisma.cash_flowUpsertArgs> = z.object({
  select: cash_flowSelectSchema.optional(),
  where: cash_flowWhereUniqueInputSchema,
  create: z.union([ cash_flowCreateInputSchema,cash_flowUncheckedCreateInputSchema ]),
  update: z.union([ cash_flowUpdateInputSchema,cash_flowUncheckedUpdateInputSchema ]),
}).strict() ;

export const cash_flowCreateManyArgsSchema: z.ZodType<Prisma.cash_flowCreateManyArgs> = z.object({
  data: z.union([ cash_flowCreateManyInputSchema,cash_flowCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const cash_flowCreateManyAndReturnArgsSchema: z.ZodType<Prisma.cash_flowCreateManyAndReturnArgs> = z.object({
  data: z.union([ cash_flowCreateManyInputSchema,cash_flowCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const cash_flowDeleteArgsSchema: z.ZodType<Prisma.cash_flowDeleteArgs> = z.object({
  select: cash_flowSelectSchema.optional(),
  where: cash_flowWhereUniqueInputSchema,
}).strict() ;

export const cash_flowUpdateArgsSchema: z.ZodType<Prisma.cash_flowUpdateArgs> = z.object({
  select: cash_flowSelectSchema.optional(),
  data: z.union([ cash_flowUpdateInputSchema,cash_flowUncheckedUpdateInputSchema ]),
  where: cash_flowWhereUniqueInputSchema,
}).strict() ;

export const cash_flowUpdateManyArgsSchema: z.ZodType<Prisma.cash_flowUpdateManyArgs> = z.object({
  data: z.union([ cash_flowUpdateManyMutationInputSchema,cash_flowUncheckedUpdateManyInputSchema ]),
  where: cash_flowWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const cash_flowUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.cash_flowUpdateManyAndReturnArgs> = z.object({
  data: z.union([ cash_flowUpdateManyMutationInputSchema,cash_flowUncheckedUpdateManyInputSchema ]),
  where: cash_flowWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const cash_flowDeleteManyArgsSchema: z.ZodType<Prisma.cash_flowDeleteManyArgs> = z.object({
  where: cash_flowWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const categoriesCreateArgsSchema: z.ZodType<Prisma.categoriesCreateArgs> = z.object({
  select: categoriesSelectSchema.optional(),
  include: categoriesIncludeSchema.optional(),
  data: z.union([ categoriesCreateInputSchema,categoriesUncheckedCreateInputSchema ]),
}).strict() ;

export const categoriesUpsertArgsSchema: z.ZodType<Prisma.categoriesUpsertArgs> = z.object({
  select: categoriesSelectSchema.optional(),
  include: categoriesIncludeSchema.optional(),
  where: categoriesWhereUniqueInputSchema,
  create: z.union([ categoriesCreateInputSchema,categoriesUncheckedCreateInputSchema ]),
  update: z.union([ categoriesUpdateInputSchema,categoriesUncheckedUpdateInputSchema ]),
}).strict() ;

export const categoriesCreateManyArgsSchema: z.ZodType<Prisma.categoriesCreateManyArgs> = z.object({
  data: z.union([ categoriesCreateManyInputSchema,categoriesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const categoriesCreateManyAndReturnArgsSchema: z.ZodType<Prisma.categoriesCreateManyAndReturnArgs> = z.object({
  data: z.union([ categoriesCreateManyInputSchema,categoriesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const categoriesDeleteArgsSchema: z.ZodType<Prisma.categoriesDeleteArgs> = z.object({
  select: categoriesSelectSchema.optional(),
  include: categoriesIncludeSchema.optional(),
  where: categoriesWhereUniqueInputSchema,
}).strict() ;

export const categoriesUpdateArgsSchema: z.ZodType<Prisma.categoriesUpdateArgs> = z.object({
  select: categoriesSelectSchema.optional(),
  include: categoriesIncludeSchema.optional(),
  data: z.union([ categoriesUpdateInputSchema,categoriesUncheckedUpdateInputSchema ]),
  where: categoriesWhereUniqueInputSchema,
}).strict() ;

export const categoriesUpdateManyArgsSchema: z.ZodType<Prisma.categoriesUpdateManyArgs> = z.object({
  data: z.union([ categoriesUpdateManyMutationInputSchema,categoriesUncheckedUpdateManyInputSchema ]),
  where: categoriesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const categoriesUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.categoriesUpdateManyAndReturnArgs> = z.object({
  data: z.union([ categoriesUpdateManyMutationInputSchema,categoriesUncheckedUpdateManyInputSchema ]),
  where: categoriesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const categoriesDeleteManyArgsSchema: z.ZodType<Prisma.categoriesDeleteManyArgs> = z.object({
  where: categoriesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const controller_adminsCreateArgsSchema: z.ZodType<Prisma.controller_adminsCreateArgs> = z.object({
  select: controller_adminsSelectSchema.optional(),
  include: controller_adminsIncludeSchema.optional(),
  data: z.union([ controller_adminsCreateInputSchema,controller_adminsUncheckedCreateInputSchema ]),
}).strict() ;

export const controller_adminsUpsertArgsSchema: z.ZodType<Prisma.controller_adminsUpsertArgs> = z.object({
  select: controller_adminsSelectSchema.optional(),
  include: controller_adminsIncludeSchema.optional(),
  where: controller_adminsWhereUniqueInputSchema,
  create: z.union([ controller_adminsCreateInputSchema,controller_adminsUncheckedCreateInputSchema ]),
  update: z.union([ controller_adminsUpdateInputSchema,controller_adminsUncheckedUpdateInputSchema ]),
}).strict() ;

export const controller_adminsCreateManyArgsSchema: z.ZodType<Prisma.controller_adminsCreateManyArgs> = z.object({
  data: z.union([ controller_adminsCreateManyInputSchema,controller_adminsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const controller_adminsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.controller_adminsCreateManyAndReturnArgs> = z.object({
  data: z.union([ controller_adminsCreateManyInputSchema,controller_adminsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const controller_adminsDeleteArgsSchema: z.ZodType<Prisma.controller_adminsDeleteArgs> = z.object({
  select: controller_adminsSelectSchema.optional(),
  include: controller_adminsIncludeSchema.optional(),
  where: controller_adminsWhereUniqueInputSchema,
}).strict() ;

export const controller_adminsUpdateArgsSchema: z.ZodType<Prisma.controller_adminsUpdateArgs> = z.object({
  select: controller_adminsSelectSchema.optional(),
  include: controller_adminsIncludeSchema.optional(),
  data: z.union([ controller_adminsUpdateInputSchema,controller_adminsUncheckedUpdateInputSchema ]),
  where: controller_adminsWhereUniqueInputSchema,
}).strict() ;

export const controller_adminsUpdateManyArgsSchema: z.ZodType<Prisma.controller_adminsUpdateManyArgs> = z.object({
  data: z.union([ controller_adminsUpdateManyMutationInputSchema,controller_adminsUncheckedUpdateManyInputSchema ]),
  where: controller_adminsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const controller_adminsUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.controller_adminsUpdateManyAndReturnArgs> = z.object({
  data: z.union([ controller_adminsUpdateManyMutationInputSchema,controller_adminsUncheckedUpdateManyInputSchema ]),
  where: controller_adminsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const controller_adminsDeleteManyArgsSchema: z.ZodType<Prisma.controller_adminsDeleteManyArgs> = z.object({
  where: controller_adminsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const credit_accountsCreateArgsSchema: z.ZodType<Prisma.credit_accountsCreateArgs> = z.object({
  select: credit_accountsSelectSchema.optional(),
  include: credit_accountsIncludeSchema.optional(),
  data: z.union([ credit_accountsCreateInputSchema,credit_accountsUncheckedCreateInputSchema ]),
}).strict() ;

export const credit_accountsUpsertArgsSchema: z.ZodType<Prisma.credit_accountsUpsertArgs> = z.object({
  select: credit_accountsSelectSchema.optional(),
  include: credit_accountsIncludeSchema.optional(),
  where: credit_accountsWhereUniqueInputSchema,
  create: z.union([ credit_accountsCreateInputSchema,credit_accountsUncheckedCreateInputSchema ]),
  update: z.union([ credit_accountsUpdateInputSchema,credit_accountsUncheckedUpdateInputSchema ]),
}).strict() ;

export const credit_accountsCreateManyArgsSchema: z.ZodType<Prisma.credit_accountsCreateManyArgs> = z.object({
  data: z.union([ credit_accountsCreateManyInputSchema,credit_accountsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const credit_accountsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.credit_accountsCreateManyAndReturnArgs> = z.object({
  data: z.union([ credit_accountsCreateManyInputSchema,credit_accountsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const credit_accountsDeleteArgsSchema: z.ZodType<Prisma.credit_accountsDeleteArgs> = z.object({
  select: credit_accountsSelectSchema.optional(),
  include: credit_accountsIncludeSchema.optional(),
  where: credit_accountsWhereUniqueInputSchema,
}).strict() ;

export const credit_accountsUpdateArgsSchema: z.ZodType<Prisma.credit_accountsUpdateArgs> = z.object({
  select: credit_accountsSelectSchema.optional(),
  include: credit_accountsIncludeSchema.optional(),
  data: z.union([ credit_accountsUpdateInputSchema,credit_accountsUncheckedUpdateInputSchema ]),
  where: credit_accountsWhereUniqueInputSchema,
}).strict() ;

export const credit_accountsUpdateManyArgsSchema: z.ZodType<Prisma.credit_accountsUpdateManyArgs> = z.object({
  data: z.union([ credit_accountsUpdateManyMutationInputSchema,credit_accountsUncheckedUpdateManyInputSchema ]),
  where: credit_accountsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const credit_accountsUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.credit_accountsUpdateManyAndReturnArgs> = z.object({
  data: z.union([ credit_accountsUpdateManyMutationInputSchema,credit_accountsUncheckedUpdateManyInputSchema ]),
  where: credit_accountsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const credit_accountsDeleteManyArgsSchema: z.ZodType<Prisma.credit_accountsDeleteManyArgs> = z.object({
  where: credit_accountsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const credit_transactionsCreateArgsSchema: z.ZodType<Prisma.credit_transactionsCreateArgs> = z.object({
  select: credit_transactionsSelectSchema.optional(),
  include: credit_transactionsIncludeSchema.optional(),
  data: z.union([ credit_transactionsCreateInputSchema,credit_transactionsUncheckedCreateInputSchema ]),
}).strict() ;

export const credit_transactionsUpsertArgsSchema: z.ZodType<Prisma.credit_transactionsUpsertArgs> = z.object({
  select: credit_transactionsSelectSchema.optional(),
  include: credit_transactionsIncludeSchema.optional(),
  where: credit_transactionsWhereUniqueInputSchema,
  create: z.union([ credit_transactionsCreateInputSchema,credit_transactionsUncheckedCreateInputSchema ]),
  update: z.union([ credit_transactionsUpdateInputSchema,credit_transactionsUncheckedUpdateInputSchema ]),
}).strict() ;

export const credit_transactionsCreateManyArgsSchema: z.ZodType<Prisma.credit_transactionsCreateManyArgs> = z.object({
  data: z.union([ credit_transactionsCreateManyInputSchema,credit_transactionsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const credit_transactionsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.credit_transactionsCreateManyAndReturnArgs> = z.object({
  data: z.union([ credit_transactionsCreateManyInputSchema,credit_transactionsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const credit_transactionsDeleteArgsSchema: z.ZodType<Prisma.credit_transactionsDeleteArgs> = z.object({
  select: credit_transactionsSelectSchema.optional(),
  include: credit_transactionsIncludeSchema.optional(),
  where: credit_transactionsWhereUniqueInputSchema,
}).strict() ;

export const credit_transactionsUpdateArgsSchema: z.ZodType<Prisma.credit_transactionsUpdateArgs> = z.object({
  select: credit_transactionsSelectSchema.optional(),
  include: credit_transactionsIncludeSchema.optional(),
  data: z.union([ credit_transactionsUpdateInputSchema,credit_transactionsUncheckedUpdateInputSchema ]),
  where: credit_transactionsWhereUniqueInputSchema,
}).strict() ;

export const credit_transactionsUpdateManyArgsSchema: z.ZodType<Prisma.credit_transactionsUpdateManyArgs> = z.object({
  data: z.union([ credit_transactionsUpdateManyMutationInputSchema,credit_transactionsUncheckedUpdateManyInputSchema ]),
  where: credit_transactionsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const credit_transactionsUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.credit_transactionsUpdateManyAndReturnArgs> = z.object({
  data: z.union([ credit_transactionsUpdateManyMutationInputSchema,credit_transactionsUncheckedUpdateManyInputSchema ]),
  where: credit_transactionsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const credit_transactionsDeleteManyArgsSchema: z.ZodType<Prisma.credit_transactionsDeleteManyArgs> = z.object({
  where: credit_transactionsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const customersCreateArgsSchema: z.ZodType<Prisma.customersCreateArgs> = z.object({
  select: customersSelectSchema.optional(),
  include: customersIncludeSchema.optional(),
  data: z.union([ customersCreateInputSchema,customersUncheckedCreateInputSchema ]),
}).strict() ;

export const customersUpsertArgsSchema: z.ZodType<Prisma.customersUpsertArgs> = z.object({
  select: customersSelectSchema.optional(),
  include: customersIncludeSchema.optional(),
  where: customersWhereUniqueInputSchema,
  create: z.union([ customersCreateInputSchema,customersUncheckedCreateInputSchema ]),
  update: z.union([ customersUpdateInputSchema,customersUncheckedUpdateInputSchema ]),
}).strict() ;

export const customersCreateManyArgsSchema: z.ZodType<Prisma.customersCreateManyArgs> = z.object({
  data: z.union([ customersCreateManyInputSchema,customersCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const customersCreateManyAndReturnArgsSchema: z.ZodType<Prisma.customersCreateManyAndReturnArgs> = z.object({
  data: z.union([ customersCreateManyInputSchema,customersCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const customersDeleteArgsSchema: z.ZodType<Prisma.customersDeleteArgs> = z.object({
  select: customersSelectSchema.optional(),
  include: customersIncludeSchema.optional(),
  where: customersWhereUniqueInputSchema,
}).strict() ;

export const customersUpdateArgsSchema: z.ZodType<Prisma.customersUpdateArgs> = z.object({
  select: customersSelectSchema.optional(),
  include: customersIncludeSchema.optional(),
  data: z.union([ customersUpdateInputSchema,customersUncheckedUpdateInputSchema ]),
  where: customersWhereUniqueInputSchema,
}).strict() ;

export const customersUpdateManyArgsSchema: z.ZodType<Prisma.customersUpdateManyArgs> = z.object({
  data: z.union([ customersUpdateManyMutationInputSchema,customersUncheckedUpdateManyInputSchema ]),
  where: customersWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const customersUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.customersUpdateManyAndReturnArgs> = z.object({
  data: z.union([ customersUpdateManyMutationInputSchema,customersUncheckedUpdateManyInputSchema ]),
  where: customersWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const customersDeleteManyArgsSchema: z.ZodType<Prisma.customersDeleteManyArgs> = z.object({
  where: customersWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const domain_ownersCreateArgsSchema: z.ZodType<Prisma.domain_ownersCreateArgs> = z.object({
  select: domain_ownersSelectSchema.optional(),
  include: domain_ownersIncludeSchema.optional(),
  data: z.union([ domain_ownersCreateInputSchema,domain_ownersUncheckedCreateInputSchema ]),
}).strict() ;

export const domain_ownersUpsertArgsSchema: z.ZodType<Prisma.domain_ownersUpsertArgs> = z.object({
  select: domain_ownersSelectSchema.optional(),
  include: domain_ownersIncludeSchema.optional(),
  where: domain_ownersWhereUniqueInputSchema,
  create: z.union([ domain_ownersCreateInputSchema,domain_ownersUncheckedCreateInputSchema ]),
  update: z.union([ domain_ownersUpdateInputSchema,domain_ownersUncheckedUpdateInputSchema ]),
}).strict() ;

export const domain_ownersCreateManyArgsSchema: z.ZodType<Prisma.domain_ownersCreateManyArgs> = z.object({
  data: z.union([ domain_ownersCreateManyInputSchema,domain_ownersCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const domain_ownersCreateManyAndReturnArgsSchema: z.ZodType<Prisma.domain_ownersCreateManyAndReturnArgs> = z.object({
  data: z.union([ domain_ownersCreateManyInputSchema,domain_ownersCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const domain_ownersDeleteArgsSchema: z.ZodType<Prisma.domain_ownersDeleteArgs> = z.object({
  select: domain_ownersSelectSchema.optional(),
  include: domain_ownersIncludeSchema.optional(),
  where: domain_ownersWhereUniqueInputSchema,
}).strict() ;

export const domain_ownersUpdateArgsSchema: z.ZodType<Prisma.domain_ownersUpdateArgs> = z.object({
  select: domain_ownersSelectSchema.optional(),
  include: domain_ownersIncludeSchema.optional(),
  data: z.union([ domain_ownersUpdateInputSchema,domain_ownersUncheckedUpdateInputSchema ]),
  where: domain_ownersWhereUniqueInputSchema,
}).strict() ;

export const domain_ownersUpdateManyArgsSchema: z.ZodType<Prisma.domain_ownersUpdateManyArgs> = z.object({
  data: z.union([ domain_ownersUpdateManyMutationInputSchema,domain_ownersUncheckedUpdateManyInputSchema ]),
  where: domain_ownersWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const domain_ownersUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.domain_ownersUpdateManyAndReturnArgs> = z.object({
  data: z.union([ domain_ownersUpdateManyMutationInputSchema,domain_ownersUncheckedUpdateManyInputSchema ]),
  where: domain_ownersWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const domain_ownersDeleteManyArgsSchema: z.ZodType<Prisma.domain_ownersDeleteManyArgs> = z.object({
  where: domain_ownersWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const expensesCreateArgsSchema: z.ZodType<Prisma.expensesCreateArgs> = z.object({
  select: expensesSelectSchema.optional(),
  data: z.union([ expensesCreateInputSchema,expensesUncheckedCreateInputSchema ]),
}).strict() ;

export const expensesUpsertArgsSchema: z.ZodType<Prisma.expensesUpsertArgs> = z.object({
  select: expensesSelectSchema.optional(),
  where: expensesWhereUniqueInputSchema,
  create: z.union([ expensesCreateInputSchema,expensesUncheckedCreateInputSchema ]),
  update: z.union([ expensesUpdateInputSchema,expensesUncheckedUpdateInputSchema ]),
}).strict() ;

export const expensesCreateManyArgsSchema: z.ZodType<Prisma.expensesCreateManyArgs> = z.object({
  data: z.union([ expensesCreateManyInputSchema,expensesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const expensesCreateManyAndReturnArgsSchema: z.ZodType<Prisma.expensesCreateManyAndReturnArgs> = z.object({
  data: z.union([ expensesCreateManyInputSchema,expensesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const expensesDeleteArgsSchema: z.ZodType<Prisma.expensesDeleteArgs> = z.object({
  select: expensesSelectSchema.optional(),
  where: expensesWhereUniqueInputSchema,
}).strict() ;

export const expensesUpdateArgsSchema: z.ZodType<Prisma.expensesUpdateArgs> = z.object({
  select: expensesSelectSchema.optional(),
  data: z.union([ expensesUpdateInputSchema,expensesUncheckedUpdateInputSchema ]),
  where: expensesWhereUniqueInputSchema,
}).strict() ;

export const expensesUpdateManyArgsSchema: z.ZodType<Prisma.expensesUpdateManyArgs> = z.object({
  data: z.union([ expensesUpdateManyMutationInputSchema,expensesUncheckedUpdateManyInputSchema ]),
  where: expensesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const expensesUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.expensesUpdateManyAndReturnArgs> = z.object({
  data: z.union([ expensesUpdateManyMutationInputSchema,expensesUncheckedUpdateManyInputSchema ]),
  where: expensesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const expensesDeleteManyArgsSchema: z.ZodType<Prisma.expensesDeleteManyArgs> = z.object({
  where: expensesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const order_itemsCreateArgsSchema: z.ZodType<Prisma.order_itemsCreateArgs> = z.object({
  select: order_itemsSelectSchema.optional(),
  include: order_itemsIncludeSchema.optional(),
  data: z.union([ order_itemsCreateInputSchema,order_itemsUncheckedCreateInputSchema ]),
}).strict() ;

export const order_itemsUpsertArgsSchema: z.ZodType<Prisma.order_itemsUpsertArgs> = z.object({
  select: order_itemsSelectSchema.optional(),
  include: order_itemsIncludeSchema.optional(),
  where: order_itemsWhereUniqueInputSchema,
  create: z.union([ order_itemsCreateInputSchema,order_itemsUncheckedCreateInputSchema ]),
  update: z.union([ order_itemsUpdateInputSchema,order_itemsUncheckedUpdateInputSchema ]),
}).strict() ;

export const order_itemsCreateManyArgsSchema: z.ZodType<Prisma.order_itemsCreateManyArgs> = z.object({
  data: z.union([ order_itemsCreateManyInputSchema,order_itemsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const order_itemsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.order_itemsCreateManyAndReturnArgs> = z.object({
  data: z.union([ order_itemsCreateManyInputSchema,order_itemsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const order_itemsDeleteArgsSchema: z.ZodType<Prisma.order_itemsDeleteArgs> = z.object({
  select: order_itemsSelectSchema.optional(),
  include: order_itemsIncludeSchema.optional(),
  where: order_itemsWhereUniqueInputSchema,
}).strict() ;

export const order_itemsUpdateArgsSchema: z.ZodType<Prisma.order_itemsUpdateArgs> = z.object({
  select: order_itemsSelectSchema.optional(),
  include: order_itemsIncludeSchema.optional(),
  data: z.union([ order_itemsUpdateInputSchema,order_itemsUncheckedUpdateInputSchema ]),
  where: order_itemsWhereUniqueInputSchema,
}).strict() ;

export const order_itemsUpdateManyArgsSchema: z.ZodType<Prisma.order_itemsUpdateManyArgs> = z.object({
  data: z.union([ order_itemsUpdateManyMutationInputSchema,order_itemsUncheckedUpdateManyInputSchema ]),
  where: order_itemsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const order_itemsUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.order_itemsUpdateManyAndReturnArgs> = z.object({
  data: z.union([ order_itemsUpdateManyMutationInputSchema,order_itemsUncheckedUpdateManyInputSchema ]),
  where: order_itemsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const order_itemsDeleteManyArgsSchema: z.ZodType<Prisma.order_itemsDeleteManyArgs> = z.object({
  where: order_itemsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ordersCreateArgsSchema: z.ZodType<Prisma.ordersCreateArgs> = z.object({
  select: ordersSelectSchema.optional(),
  include: ordersIncludeSchema.optional(),
  data: z.union([ ordersCreateInputSchema,ordersUncheckedCreateInputSchema ]),
}).strict() ;

export const ordersUpsertArgsSchema: z.ZodType<Prisma.ordersUpsertArgs> = z.object({
  select: ordersSelectSchema.optional(),
  include: ordersIncludeSchema.optional(),
  where: ordersWhereUniqueInputSchema,
  create: z.union([ ordersCreateInputSchema,ordersUncheckedCreateInputSchema ]),
  update: z.union([ ordersUpdateInputSchema,ordersUncheckedUpdateInputSchema ]),
}).strict() ;

export const ordersCreateManyArgsSchema: z.ZodType<Prisma.ordersCreateManyArgs> = z.object({
  data: z.union([ ordersCreateManyInputSchema,ordersCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ordersCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ordersCreateManyAndReturnArgs> = z.object({
  data: z.union([ ordersCreateManyInputSchema,ordersCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ordersDeleteArgsSchema: z.ZodType<Prisma.ordersDeleteArgs> = z.object({
  select: ordersSelectSchema.optional(),
  include: ordersIncludeSchema.optional(),
  where: ordersWhereUniqueInputSchema,
}).strict() ;

export const ordersUpdateArgsSchema: z.ZodType<Prisma.ordersUpdateArgs> = z.object({
  select: ordersSelectSchema.optional(),
  include: ordersIncludeSchema.optional(),
  data: z.union([ ordersUpdateInputSchema,ordersUncheckedUpdateInputSchema ]),
  where: ordersWhereUniqueInputSchema,
}).strict() ;

export const ordersUpdateManyArgsSchema: z.ZodType<Prisma.ordersUpdateManyArgs> = z.object({
  data: z.union([ ordersUpdateManyMutationInputSchema,ordersUncheckedUpdateManyInputSchema ]),
  where: ordersWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ordersUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ordersUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ordersUpdateManyMutationInputSchema,ordersUncheckedUpdateManyInputSchema ]),
  where: ordersWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ordersDeleteManyArgsSchema: z.ZodType<Prisma.ordersDeleteManyArgs> = z.object({
  where: ordersWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const product_costsCreateArgsSchema: z.ZodType<Prisma.product_costsCreateArgs> = z.object({
  select: product_costsSelectSchema.optional(),
  data: z.union([ product_costsCreateInputSchema,product_costsUncheckedCreateInputSchema ]),
}).strict() ;

export const product_costsUpsertArgsSchema: z.ZodType<Prisma.product_costsUpsertArgs> = z.object({
  select: product_costsSelectSchema.optional(),
  where: product_costsWhereUniqueInputSchema,
  create: z.union([ product_costsCreateInputSchema,product_costsUncheckedCreateInputSchema ]),
  update: z.union([ product_costsUpdateInputSchema,product_costsUncheckedUpdateInputSchema ]),
}).strict() ;

export const product_costsCreateManyArgsSchema: z.ZodType<Prisma.product_costsCreateManyArgs> = z.object({
  data: z.union([ product_costsCreateManyInputSchema,product_costsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const product_costsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.product_costsCreateManyAndReturnArgs> = z.object({
  data: z.union([ product_costsCreateManyInputSchema,product_costsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const product_costsDeleteArgsSchema: z.ZodType<Prisma.product_costsDeleteArgs> = z.object({
  select: product_costsSelectSchema.optional(),
  where: product_costsWhereUniqueInputSchema,
}).strict() ;

export const product_costsUpdateArgsSchema: z.ZodType<Prisma.product_costsUpdateArgs> = z.object({
  select: product_costsSelectSchema.optional(),
  data: z.union([ product_costsUpdateInputSchema,product_costsUncheckedUpdateInputSchema ]),
  where: product_costsWhereUniqueInputSchema,
}).strict() ;

export const product_costsUpdateManyArgsSchema: z.ZodType<Prisma.product_costsUpdateManyArgs> = z.object({
  data: z.union([ product_costsUpdateManyMutationInputSchema,product_costsUncheckedUpdateManyInputSchema ]),
  where: product_costsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const product_costsUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.product_costsUpdateManyAndReturnArgs> = z.object({
  data: z.union([ product_costsUpdateManyMutationInputSchema,product_costsUncheckedUpdateManyInputSchema ]),
  where: product_costsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const product_costsDeleteManyArgsSchema: z.ZodType<Prisma.product_costsDeleteManyArgs> = z.object({
  where: product_costsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const productsCreateArgsSchema: z.ZodType<Prisma.productsCreateArgs> = z.object({
  select: productsSelectSchema.optional(),
  include: productsIncludeSchema.optional(),
  data: z.union([ productsCreateInputSchema,productsUncheckedCreateInputSchema ]),
}).strict() ;

export const productsUpsertArgsSchema: z.ZodType<Prisma.productsUpsertArgs> = z.object({
  select: productsSelectSchema.optional(),
  include: productsIncludeSchema.optional(),
  where: productsWhereUniqueInputSchema,
  create: z.union([ productsCreateInputSchema,productsUncheckedCreateInputSchema ]),
  update: z.union([ productsUpdateInputSchema,productsUncheckedUpdateInputSchema ]),
}).strict() ;

export const productsCreateManyArgsSchema: z.ZodType<Prisma.productsCreateManyArgs> = z.object({
  data: z.union([ productsCreateManyInputSchema,productsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const productsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.productsCreateManyAndReturnArgs> = z.object({
  data: z.union([ productsCreateManyInputSchema,productsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const productsDeleteArgsSchema: z.ZodType<Prisma.productsDeleteArgs> = z.object({
  select: productsSelectSchema.optional(),
  include: productsIncludeSchema.optional(),
  where: productsWhereUniqueInputSchema,
}).strict() ;

export const productsUpdateArgsSchema: z.ZodType<Prisma.productsUpdateArgs> = z.object({
  select: productsSelectSchema.optional(),
  include: productsIncludeSchema.optional(),
  data: z.union([ productsUpdateInputSchema,productsUncheckedUpdateInputSchema ]),
  where: productsWhereUniqueInputSchema,
}).strict() ;

export const productsUpdateManyArgsSchema: z.ZodType<Prisma.productsUpdateManyArgs> = z.object({
  data: z.union([ productsUpdateManyMutationInputSchema,productsUncheckedUpdateManyInputSchema ]),
  where: productsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const productsUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.productsUpdateManyAndReturnArgs> = z.object({
  data: z.union([ productsUpdateManyMutationInputSchema,productsUncheckedUpdateManyInputSchema ]),
  where: productsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const productsDeleteManyArgsSchema: z.ZodType<Prisma.productsDeleteManyArgs> = z.object({
  where: productsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const profilesCreateArgsSchema: z.ZodType<Prisma.profilesCreateArgs> = z.object({
  select: profilesSelectSchema.optional(),
  include: profilesIncludeSchema.optional(),
  data: z.union([ profilesCreateInputSchema,profilesUncheckedCreateInputSchema ]),
}).strict() ;

export const profilesUpsertArgsSchema: z.ZodType<Prisma.profilesUpsertArgs> = z.object({
  select: profilesSelectSchema.optional(),
  include: profilesIncludeSchema.optional(),
  where: profilesWhereUniqueInputSchema,
  create: z.union([ profilesCreateInputSchema,profilesUncheckedCreateInputSchema ]),
  update: z.union([ profilesUpdateInputSchema,profilesUncheckedUpdateInputSchema ]),
}).strict() ;

export const profilesCreateManyArgsSchema: z.ZodType<Prisma.profilesCreateManyArgs> = z.object({
  data: z.union([ profilesCreateManyInputSchema,profilesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const profilesCreateManyAndReturnArgsSchema: z.ZodType<Prisma.profilesCreateManyAndReturnArgs> = z.object({
  data: z.union([ profilesCreateManyInputSchema,profilesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const profilesDeleteArgsSchema: z.ZodType<Prisma.profilesDeleteArgs> = z.object({
  select: profilesSelectSchema.optional(),
  include: profilesIncludeSchema.optional(),
  where: profilesWhereUniqueInputSchema,
}).strict() ;

export const profilesUpdateArgsSchema: z.ZodType<Prisma.profilesUpdateArgs> = z.object({
  select: profilesSelectSchema.optional(),
  include: profilesIncludeSchema.optional(),
  data: z.union([ profilesUpdateInputSchema,profilesUncheckedUpdateInputSchema ]),
  where: profilesWhereUniqueInputSchema,
}).strict() ;

export const profilesUpdateManyArgsSchema: z.ZodType<Prisma.profilesUpdateManyArgs> = z.object({
  data: z.union([ profilesUpdateManyMutationInputSchema,profilesUncheckedUpdateManyInputSchema ]),
  where: profilesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const profilesUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.profilesUpdateManyAndReturnArgs> = z.object({
  data: z.union([ profilesUpdateManyMutationInputSchema,profilesUncheckedUpdateManyInputSchema ]),
  where: profilesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const profilesDeleteManyArgsSchema: z.ZodType<Prisma.profilesDeleteManyArgs> = z.object({
  where: profilesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const salesCreateArgsSchema: z.ZodType<Prisma.salesCreateArgs> = z.object({
  select: salesSelectSchema.optional(),
  include: salesIncludeSchema.optional(),
  data: z.union([ salesCreateInputSchema,salesUncheckedCreateInputSchema ]),
}).strict() ;

export const salesUpsertArgsSchema: z.ZodType<Prisma.salesUpsertArgs> = z.object({
  select: salesSelectSchema.optional(),
  include: salesIncludeSchema.optional(),
  where: salesWhereUniqueInputSchema,
  create: z.union([ salesCreateInputSchema,salesUncheckedCreateInputSchema ]),
  update: z.union([ salesUpdateInputSchema,salesUncheckedUpdateInputSchema ]),
}).strict() ;

export const salesCreateManyArgsSchema: z.ZodType<Prisma.salesCreateManyArgs> = z.object({
  data: z.union([ salesCreateManyInputSchema,salesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const salesCreateManyAndReturnArgsSchema: z.ZodType<Prisma.salesCreateManyAndReturnArgs> = z.object({
  data: z.union([ salesCreateManyInputSchema,salesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const salesDeleteArgsSchema: z.ZodType<Prisma.salesDeleteArgs> = z.object({
  select: salesSelectSchema.optional(),
  include: salesIncludeSchema.optional(),
  where: salesWhereUniqueInputSchema,
}).strict() ;

export const salesUpdateArgsSchema: z.ZodType<Prisma.salesUpdateArgs> = z.object({
  select: salesSelectSchema.optional(),
  include: salesIncludeSchema.optional(),
  data: z.union([ salesUpdateInputSchema,salesUncheckedUpdateInputSchema ]),
  where: salesWhereUniqueInputSchema,
}).strict() ;

export const salesUpdateManyArgsSchema: z.ZodType<Prisma.salesUpdateManyArgs> = z.object({
  data: z.union([ salesUpdateManyMutationInputSchema,salesUncheckedUpdateManyInputSchema ]),
  where: salesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const salesUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.salesUpdateManyAndReturnArgs> = z.object({
  data: z.union([ salesUpdateManyMutationInputSchema,salesUncheckedUpdateManyInputSchema ]),
  where: salesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const salesDeleteManyArgsSchema: z.ZodType<Prisma.salesDeleteManyArgs> = z.object({
  where: salesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const store_settingsCreateArgsSchema: z.ZodType<Prisma.store_settingsCreateArgs> = z.object({
  select: store_settingsSelectSchema.optional(),
  include: store_settingsIncludeSchema.optional(),
  data: z.union([ store_settingsCreateInputSchema,store_settingsUncheckedCreateInputSchema ]),
}).strict() ;

export const store_settingsUpsertArgsSchema: z.ZodType<Prisma.store_settingsUpsertArgs> = z.object({
  select: store_settingsSelectSchema.optional(),
  include: store_settingsIncludeSchema.optional(),
  where: store_settingsWhereUniqueInputSchema,
  create: z.union([ store_settingsCreateInputSchema,store_settingsUncheckedCreateInputSchema ]),
  update: z.union([ store_settingsUpdateInputSchema,store_settingsUncheckedUpdateInputSchema ]),
}).strict() ;

export const store_settingsCreateManyArgsSchema: z.ZodType<Prisma.store_settingsCreateManyArgs> = z.object({
  data: z.union([ store_settingsCreateManyInputSchema,store_settingsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const store_settingsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.store_settingsCreateManyAndReturnArgs> = z.object({
  data: z.union([ store_settingsCreateManyInputSchema,store_settingsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const store_settingsDeleteArgsSchema: z.ZodType<Prisma.store_settingsDeleteArgs> = z.object({
  select: store_settingsSelectSchema.optional(),
  include: store_settingsIncludeSchema.optional(),
  where: store_settingsWhereUniqueInputSchema,
}).strict() ;

export const store_settingsUpdateArgsSchema: z.ZodType<Prisma.store_settingsUpdateArgs> = z.object({
  select: store_settingsSelectSchema.optional(),
  include: store_settingsIncludeSchema.optional(),
  data: z.union([ store_settingsUpdateInputSchema,store_settingsUncheckedUpdateInputSchema ]),
  where: store_settingsWhereUniqueInputSchema,
}).strict() ;

export const store_settingsUpdateManyArgsSchema: z.ZodType<Prisma.store_settingsUpdateManyArgs> = z.object({
  data: z.union([ store_settingsUpdateManyMutationInputSchema,store_settingsUncheckedUpdateManyInputSchema ]),
  where: store_settingsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const store_settingsUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.store_settingsUpdateManyAndReturnArgs> = z.object({
  data: z.union([ store_settingsUpdateManyMutationInputSchema,store_settingsUncheckedUpdateManyInputSchema ]),
  where: store_settingsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const store_settingsDeleteManyArgsSchema: z.ZodType<Prisma.store_settingsDeleteManyArgs> = z.object({
  where: store_settingsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const storesCreateArgsSchema: z.ZodType<Prisma.storesCreateArgs> = z.object({
  select: storesSelectSchema.optional(),
  include: storesIncludeSchema.optional(),
  data: z.union([ storesCreateInputSchema,storesUncheckedCreateInputSchema ]),
}).strict() ;

export const storesUpsertArgsSchema: z.ZodType<Prisma.storesUpsertArgs> = z.object({
  select: storesSelectSchema.optional(),
  include: storesIncludeSchema.optional(),
  where: storesWhereUniqueInputSchema,
  create: z.union([ storesCreateInputSchema,storesUncheckedCreateInputSchema ]),
  update: z.union([ storesUpdateInputSchema,storesUncheckedUpdateInputSchema ]),
}).strict() ;

export const storesCreateManyArgsSchema: z.ZodType<Prisma.storesCreateManyArgs> = z.object({
  data: z.union([ storesCreateManyInputSchema,storesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const storesCreateManyAndReturnArgsSchema: z.ZodType<Prisma.storesCreateManyAndReturnArgs> = z.object({
  data: z.union([ storesCreateManyInputSchema,storesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const storesDeleteArgsSchema: z.ZodType<Prisma.storesDeleteArgs> = z.object({
  select: storesSelectSchema.optional(),
  include: storesIncludeSchema.optional(),
  where: storesWhereUniqueInputSchema,
}).strict() ;

export const storesUpdateArgsSchema: z.ZodType<Prisma.storesUpdateArgs> = z.object({
  select: storesSelectSchema.optional(),
  include: storesIncludeSchema.optional(),
  data: z.union([ storesUpdateInputSchema,storesUncheckedUpdateInputSchema ]),
  where: storesWhereUniqueInputSchema,
}).strict() ;

export const storesUpdateManyArgsSchema: z.ZodType<Prisma.storesUpdateManyArgs> = z.object({
  data: z.union([ storesUpdateManyMutationInputSchema,storesUncheckedUpdateManyInputSchema ]),
  where: storesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const storesUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.storesUpdateManyAndReturnArgs> = z.object({
  data: z.union([ storesUpdateManyMutationInputSchema,storesUncheckedUpdateManyInputSchema ]),
  where: storesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const storesDeleteManyArgsSchema: z.ZodType<Prisma.storesDeleteManyArgs> = z.object({
  where: storesWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserCreateArgsSchema: z.ZodType<Prisma.UserCreateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
}).strict() ;

export const UserUpsertArgsSchema: z.ZodType<Prisma.UserUpsertArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateArgsSchema: z.ZodType<Prisma.UserUpdateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.UserUpdateManyAndReturnArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const DomainCreateArgsSchema: z.ZodType<Prisma.DomainCreateArgs> = z.object({
  select: DomainSelectSchema.optional(),
  include: DomainIncludeSchema.optional(),
  data: z.union([ DomainCreateInputSchema,DomainUncheckedCreateInputSchema ]),
}).strict() ;

export const DomainUpsertArgsSchema: z.ZodType<Prisma.DomainUpsertArgs> = z.object({
  select: DomainSelectSchema.optional(),
  include: DomainIncludeSchema.optional(),
  where: DomainWhereUniqueInputSchema,
  create: z.union([ DomainCreateInputSchema,DomainUncheckedCreateInputSchema ]),
  update: z.union([ DomainUpdateInputSchema,DomainUncheckedUpdateInputSchema ]),
}).strict() ;

export const DomainCreateManyArgsSchema: z.ZodType<Prisma.DomainCreateManyArgs> = z.object({
  data: z.union([ DomainCreateManyInputSchema,DomainCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DomainCreateManyAndReturnArgsSchema: z.ZodType<Prisma.DomainCreateManyAndReturnArgs> = z.object({
  data: z.union([ DomainCreateManyInputSchema,DomainCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DomainDeleteArgsSchema: z.ZodType<Prisma.DomainDeleteArgs> = z.object({
  select: DomainSelectSchema.optional(),
  include: DomainIncludeSchema.optional(),
  where: DomainWhereUniqueInputSchema,
}).strict() ;

export const DomainUpdateArgsSchema: z.ZodType<Prisma.DomainUpdateArgs> = z.object({
  select: DomainSelectSchema.optional(),
  include: DomainIncludeSchema.optional(),
  data: z.union([ DomainUpdateInputSchema,DomainUncheckedUpdateInputSchema ]),
  where: DomainWhereUniqueInputSchema,
}).strict() ;

export const DomainUpdateManyArgsSchema: z.ZodType<Prisma.DomainUpdateManyArgs> = z.object({
  data: z.union([ DomainUpdateManyMutationInputSchema,DomainUncheckedUpdateManyInputSchema ]),
  where: DomainWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const DomainUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.DomainUpdateManyAndReturnArgs> = z.object({
  data: z.union([ DomainUpdateManyMutationInputSchema,DomainUncheckedUpdateManyInputSchema ]),
  where: DomainWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const DomainDeleteManyArgsSchema: z.ZodType<Prisma.DomainDeleteManyArgs> = z.object({
  where: DomainWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductCreateArgsSchema: z.ZodType<Prisma.ProductCreateArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  data: z.union([ ProductCreateInputSchema,ProductUncheckedCreateInputSchema ]),
}).strict() ;

export const ProductUpsertArgsSchema: z.ZodType<Prisma.ProductUpsertArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereUniqueInputSchema,
  create: z.union([ ProductCreateInputSchema,ProductUncheckedCreateInputSchema ]),
  update: z.union([ ProductUpdateInputSchema,ProductUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProductCreateManyArgsSchema: z.ZodType<Prisma.ProductCreateManyArgs> = z.object({
  data: z.union([ ProductCreateManyInputSchema,ProductCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProductCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ProductCreateManyAndReturnArgs> = z.object({
  data: z.union([ ProductCreateManyInputSchema,ProductCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProductDeleteArgsSchema: z.ZodType<Prisma.ProductDeleteArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereUniqueInputSchema,
}).strict() ;

export const ProductUpdateArgsSchema: z.ZodType<Prisma.ProductUpdateArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  data: z.union([ ProductUpdateInputSchema,ProductUncheckedUpdateInputSchema ]),
  where: ProductWhereUniqueInputSchema,
}).strict() ;

export const ProductUpdateManyArgsSchema: z.ZodType<Prisma.ProductUpdateManyArgs> = z.object({
  data: z.union([ ProductUpdateManyMutationInputSchema,ProductUncheckedUpdateManyInputSchema ]),
  where: ProductWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ProductUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ProductUpdateManyMutationInputSchema,ProductUncheckedUpdateManyInputSchema ]),
  where: ProductWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductDeleteManyArgsSchema: z.ZodType<Prisma.ProductDeleteManyArgs> = z.object({
  where: ProductWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;