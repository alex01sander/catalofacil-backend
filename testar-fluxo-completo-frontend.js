const axios = require('axios');

async function testarFluxoCompletoFrontend() {
    console.log('üîç TESTANDO FLUXO COMPLETO DO FRONTEND');
    console.log('======================================\n');
    
    const email = 'fulanosander@gmail.com';
    const password = '123456';
    
    try {
        console.log('1Ô∏è‚É£ Simulando login do frontend...');
        console.log('   üì° POST https://catalofacil-backend.onrender.com/auth/login');
        
        const loginResponse = await axios.post('https://catalofacil-backend.onrender.com/auth/login', {
            email,
            password
        });
        
        console.log('‚úÖ Login bem-sucedido!');
        console.log('üìä Usu√°rio:', loginResponse.data.user);
        console.log('üîë Token:', loginResponse.data.token.substring(0, 50) + '...');
        
        const token = loginResponse.data.token;
        const userId = loginResponse.data.user.id;
        
        console.log('\n2Ô∏è‚É£ Simulando verifica√ß√£o de admin do frontend...');
        console.log('   üì° GET https://catalofacil-backend.onrender.com/api/controller-admins/' + userId);
        
        const adminCheckResponse = await axios.get(`https://catalofacil-backend.onrender.com/api/controller-admins/${userId}`, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        console.log('‚úÖ Verifica√ß√£o de admin bem-sucedida!');
        console.log('üìä Resposta:', adminCheckResponse.data);
        
        console.log('\n3Ô∏è‚É£ Simulando acesso √† rota /controller...');
        console.log('   üì° GET https://demo.catalofacil.com.br/controller');
        
        const controllerResponse = await axios.get('https://demo.catalofacil.com.br/controller', {
            validateStatus: () => true
        });
        
        console.log('üìä Status da rota /controller:', controllerResponse.status);
        console.log('üìÑ Tipo de conte√∫do:', controllerResponse.headers['content-type']);
        
        if (controllerResponse.data.includes('Acesso Negado')) {
            console.log('üö´ P√ÅGINA MOSTRA "ACESSO NEGADO"');
            console.log('   Isso significa que o frontend n√£o conseguiu verificar o admin');
        } else {
            console.log('‚úÖ P√ÅGINA CARREGOU NORMALMENTE');
        }
        
        console.log('\n4Ô∏è‚É£ Verificando se h√° algum problema na verifica√ß√£o...');
        
        // Testar se o token est√° sendo enviado corretamente
        console.log('   üì° Testando token no header...');
        
        const tokenTestResponse = await axios.get(`https://catalofacil-backend.onrender.com/api/controller-admins/${userId}`, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('‚úÖ Token funcionando corretamente!');
        console.log('üìä Resposta:', tokenTestResponse.data);
        
        console.log('\nüéØ DIAGN√ìSTICO FINAL:');
        console.log('=====================');
        console.log('‚úÖ Login funcionando');
        console.log('‚úÖ Token v√°lido');
        console.log('‚úÖ Verifica√ß√£o de admin funcionando');
        console.log('‚úÖ Backend respondendo corretamente');
        console.log('‚ùå Frontend mostrando "Acesso Negado"');
        
        console.log('\nüîß POSS√çVEIS CAUSAS:');
        console.log('===================');
        console.log('1. Frontend n√£o est√° enviando o token corretamente');
        console.log('2. Frontend est√° fazendo a verifica√ß√£o em momento errado');
        console.log('3. Frontend est√° usando um ID de usu√°rio diferente');
        console.log('4. Cache do navegador com dados antigos');
        console.log('5. Problema na l√≥gica de autentica√ß√£o do frontend');
        
        console.log('\nüí° SOLU√á√ïES:');
        console.log('============');
        console.log('1. Verificar se o frontend est√° salvando o token ap√≥s login');
        console.log('2. Verificar se o frontend est√° enviando o token nas requisi√ß√µes');
        console.log('3. Verificar se h√° algum problema na l√≥gica de autentica√ß√£o');
        console.log('4. Verificar se o usu√°rio est√° realmente logado no frontend');
        console.log('5. Verificar se n√£o h√° conflito de IDs de usu√°rio');
        
        console.log('\nüîç PR√ìXIMOS PASSOS:');
        console.log('==================');
        console.log('1. Verificar no console do navegador se h√° erros');
        console.log('2. Verificar se o token est√° sendo salvo no localStorage');
        console.log('3. Verificar se as requisi√ß√µes est√£o sendo feitas com o token');
        console.log('4. Verificar se o usu√°rio logado √© realmente fulanosander@gmail.com');
        
    } catch (error) {
        console.error('‚ùå Erro durante o teste:', error.message);
        
        if (error.response) {
            console.log('üìä Status:', error.response.status);
            console.log('üìä Dados:', error.response.data);
        }
    }
}

// Executar
testarFluxoCompletoFrontend(); 