const axios = require('axios');

const BASE_URL = 'http://localhost:3000/admin';
const ADMIN_TOKEN = 'seu_token_admin_aqui'; // Substitua pelo token real

const headers = {
  'Authorization': `Bearer ${ADMIN_TOKEN}`,
  'Content-Type': 'application/json'
};

async function testDomainController() {
  console.log('üß™ Testando Controller de Dom√≠nios e Usu√°rios\n');

  try {
    // 1. Testar cadastro completo de dom√≠nio e usu√°rio
    console.log('1Ô∏è‚É£ Testando cadastro completo de dom√≠nio e usu√°rio...');
    
    const registerData = {
      domain: 'teste-exemplo.com',
      user_email: 'admin@teste-exemplo.com',
      user_password: 'senha123',
      user_role: 'admin',
      domain_type: 'domain'
    };

    const registerResponse = await axios.post(
      `${BASE_URL}/register-domain-user`,
      registerData,
      { headers }
    );

    console.log('‚úÖ Cadastro realizado:', registerResponse.data);
    const { domain, user } = registerResponse.data;

    // 2. Testar listagem de dom√≠nios
    console.log('\n2Ô∏è‚É£ Testando listagem de dom√≠nios...');
    
    const domainsResponse = await axios.get(
      `${BASE_URL}/domains`,
      { headers }
    );

    console.log('‚úÖ Dom√≠nios encontrados:', domainsResponse.data.domains.length);

    // 3. Testar busca de dom√≠nio espec√≠fico
    console.log('\n3Ô∏è‚É£ Testando busca de dom√≠nio espec√≠fico...');
    
    const domainResponse = await axios.get(
      `${BASE_URL}/domains/${domain.id}`,
      { headers }
    );

    console.log('‚úÖ Dom√≠nio encontrado:', domainResponse.data.domain);

    // 4. Testar atualiza√ß√£o de dom√≠nio
    console.log('\n4Ô∏è‚É£ Testando atualiza√ß√£o de dom√≠nio...');
    
    const updateData = {
      domain_type: 'subdomain'
    };

    const updateResponse = await axios.put(
      `${BASE_URL}/domains/${domain.id}`,
      updateData,
      { headers }
    );

    console.log('‚úÖ Dom√≠nio atualizado:', updateResponse.data.domain_type);

    // 5. Testar cadastro de dom√≠nio separado
    console.log('\n5Ô∏è‚É£ Testando cadastro de dom√≠nio separado...');
    
    const newDomainData = {
      domain: 'outro-dominio.com',
      user_id: user.id,
      domain_type: 'domain'
    };

    const newDomainResponse = await axios.post(
      `${BASE_URL}/domains`,
      newDomainData,
      { headers }
    );

    console.log('‚úÖ Novo dom√≠nio criado:', newDomainResponse.data.domain);

    // 6. Testar busca com filtros
    console.log('\n6Ô∏è‚É£ Testando busca com filtros...');
    
    const searchResponse = await axios.get(
      `${BASE_URL}/domains?search=teste&page=1&limit=5`,
      { headers }
    );

    console.log('‚úÖ Busca com filtros:', searchResponse.data.domains.length, 'resultados');

    console.log('\nüéâ Todos os testes passaram com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro nos testes:', error.response?.data || error.message);
    
    if (error.response?.status === 401) {
      console.log('\nüí° Dica: Verifique se o token de admin est√° correto');
    }
  }
}

// Fun√ß√£o para testar apenas o cadastro
async function testSimpleRegistration() {
  console.log('üß™ Teste Simples de Cadastro\n');

  try {
    const data = {
      domain: 'meu-site.com',
      user_email: 'admin@meu-site.com',
      user_password: 'minhasenha123',
      user_role: 'admin'
    };

    const response = await axios.post(
      `${BASE_URL}/register-domain-user`,
      data,
      { headers }
    );

    console.log('‚úÖ Cadastro realizado com sucesso!');
    console.log('üìß Email:', response.data.user.email);
    console.log('üåê Dom√≠nio:', response.data.domain.domain);
    console.log('üÜî User ID:', response.data.user.id);

  } catch (error) {
    console.error('‚ùå Erro:', error.response?.data || error.message);
  }
}

// Executar testes
if (process.argv.includes('--simple')) {
  testSimpleRegistration();
} else {
  testDomainController();
} 