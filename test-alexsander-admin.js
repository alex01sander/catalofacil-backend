const axios = require('axios');

// Configura√ß√µes
const BASE_URL = 'http://localhost:3000/admin';
const ALEXSANDER_USER_ID = '05703665-81d7-4c1d-9bb0-660f0571f465';
const ALEXSANDER_EMAIL = 'alexsander01@hotmail.com.br';

// Token JWT para o usu√°rio alexsander (voc√™ precisar√° gerar um token v√°lido)
// Este √© um exemplo - voc√™ deve gerar um token real com o JWT_SECRET correto
const generateTestToken = () => {
  // Em produ√ß√£o, voc√™ deve gerar um token JWT real
  // Por enquanto, vamos usar um token de exemplo
  return 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIwNTcwMzY2NS04MWQ3LTRjMWQtOWJiMC02NjBmMDU3MWY0NjUiLCJlbWFpbCI6ImFsZXhzYW5kZXIwMUBob3RtYWlsLmNvbS5iciIsImlhdCI6MTc1NDMxODgxMiwiZXhwIjoxNzU0NDA1MjEyfQ.example_signature';
};

async function testAlexsanderAdminAccess() {
  console.log('üß™ Testando acesso do usu√°rio alexsander como admin...\n');
  
  const token = generateTestToken();
  
  const headers = {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  };
  
  console.log('üë§ Dados do usu√°rio:');
  console.log('   ID:', ALEXSANDER_USER_ID);
  console.log('   Email:', ALEXSANDER_EMAIL);
  console.log('   Token:', token.substring(0, 50) + '...');
  console.log('');
  
  // 1. Testar Dashboard Admin
  console.log('1Ô∏è‚É£ Testando GET /admin/dashboard');
  try {
    const response = await axios.get(`${BASE_URL}/dashboard`, { headers });
    console.log('‚úÖ Status:', response.status);
    console.log('üìä Dashboard acess√≠vel');
  } catch (error) {
    console.log('‚ùå Status:', error.response?.status || 'Erro de conex√£o');
    console.log('‚ùå Erro:', error.response?.data?.error || error.message);
  }
  console.log('');
  
  // 2. Testar Listagem de Dom√≠nios
  console.log('2Ô∏è‚É£ Testando GET /admin/domains');
  try {
    const response = await axios.get(`${BASE_URL}/domains`, { headers });
    console.log('‚úÖ Status:', response.status);
    console.log('üåê Dom√≠nios encontrados:', response.data.domains?.length || 0);
  } catch (error) {
    console.log('‚ùå Status:', error.response?.status || 'Erro de conex√£o');
    console.log('‚ùå Erro:', error.response?.data?.error || error.message);
  }
  console.log('');
  
  // 3. Testar Cria√ß√£o de Dom√≠nio
  console.log('3Ô∏è‚É£ Testando POST /admin/register-domain-user');
  try {
    const domainData = {
      domain: 'teste.alexsander.com.br',
      user_email: 'teste@alexsander.com.br',
      user_password: 'senha123',
      user_role: 'admin'
    };
    
    const response = await axios.post(`${BASE_URL}/register-domain-user`, domainData, { headers });
    console.log('‚úÖ Status:', response.status);
    console.log('‚úÖ Dom√≠nio criado:', response.data.domain?.domain);
    console.log('‚úÖ Usu√°rio criado:', response.data.user?.email);
  } catch (error) {
    console.log('‚ùå Status:', error.response?.status || 'Erro de conex√£o');
    console.log('‚ùå Erro:', error.response?.data?.error || error.message);
  }
  console.log('');
  
  // 4. Testar Listagem de Usu√°rios
  console.log('4Ô∏è‚É£ Testando GET /admin/users');
  try {
    const response = await axios.get(`${BASE_URL}/users`, { headers });
    console.log('‚úÖ Status:', response.status);
    console.log('üë• Usu√°rios encontrados:', response.data.users?.length || 0);
  } catch (error) {
    console.log('‚ùå Status:', error.response?.status || 'Erro de conex√£o');
    console.log('‚ùå Erro:', error.response?.data?.error || error.message);
  }
  console.log('');
  
  console.log('üéØ Teste conclu√≠do!');
  console.log('');
  console.log('üìù PR√ìXIMOS PASSOS:');
  console.log('1. Execute o script SQL criar-alexsander-admin.sql no banco');
  console.log('2. Gere um token JWT v√°lido para o usu√°rio alexsander');
  console.log('3. Atualize o token neste script de teste');
  console.log('4. Execute novamente para verificar o acesso');
}

// Fun√ß√£o para gerar token JWT real (se necess√°rio)
function generateRealJWT() {
  console.log('üîë Para gerar um token JWT real:');
  console.log('1. Use o JWT_SECRET do seu .env');
  console.log('2. Payload deve conter:');
  console.log('   - userId: "05703665-81d7-4c1d-9bb0-660f0571f465"');
  console.log('   - email: "alexsander01@hotmail.com.br"');
  console.log('   - exp: timestamp de expira√ß√£o');
  console.log('');
  console.log('3. Ou use a rota de login da API para obter um token v√°lido');
}

if (process.argv.includes('--help')) {
  console.log('üìñ AJUDA:');
  console.log('node test-alexsander-admin.js          - Executar teste');
  console.log('node test-alexsander-admin.js --help   - Mostrar ajuda');
  generateRealJWT();
} else {
  testAlexsanderAdminAccess();
} 