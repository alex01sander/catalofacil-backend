const axios = require('axios');

// Configura√ß√£o da API
const API_BASE_URL = process.env.API_URL || 'https://catalofacil.catalofacil.com.br/api';
const TEST_TOKEN = process.env.TEST_TOKEN || 'seu-token-aqui';

async function testQuickLaunch() {
  console.log('‚ö° Testando Lan√ßamento R√°pido...\n');
  
  const headers = {
    'Authorization': `Bearer ${TEST_TOKEN}`,
    'Content-Type': 'application/json'
  };
  
  try {
    // 1. Testar lan√ßamento de entrada (income)
    console.log('1Ô∏è‚É£ Testando lan√ßamento de entrada...');
    const entradaData = {
      type: 'income',
      category: 'vendas',
      description: 'Teste de lan√ßamento r√°pido - entrada',
      amount: 100.00,
      date: new Date().toISOString(),
      payment_method: 'dinheiro'
    };
    
    console.log('üì§ Dados enviados (entrada):', entradaData);
    
    try {
      const entradaResponse = await axios.post(`${API_BASE_URL}/fluxo-caixa`, entradaData, { headers });
      console.log('‚úÖ Entrada criada com sucesso:', entradaResponse.data);
    } catch (error) {
      console.log('‚ùå Erro na entrada:', {
        status: error.response?.status,
        data: error.response?.data,
        message: error.message
      });
    }
    
    console.log('');
    
    // 2. Testar lan√ßamento de sa√≠da (expense)
    console.log('2Ô∏è‚É£ Testando lan√ßamento de sa√≠da...');
    const saidaData = {
      type: 'expense',
      category: 'despesas',
      description: 'Teste de lan√ßamento r√°pido - sa√≠da',
      amount: 50.00,
      date: new Date().toISOString(),
      payment_method: 'dinheiro'
    };
    
    console.log('üì§ Dados enviados (sa√≠da):', saidaData);
    
    try {
      const saidaResponse = await axios.post(`${API_BASE_URL}/fluxo-caixa`, saidaData, { headers });
      console.log('‚úÖ Sa√≠da criada com sucesso:', saidaResponse.data);
    } catch (error) {
      console.log('‚ùå Erro na sa√≠da:', {
        status: error.response?.status,
        data: error.response?.data,
        message: error.message
      });
    }
    
    console.log('');
    
    // 3. Testar com dados m√≠nimos
    console.log('3Ô∏è‚É£ Testando com dados m√≠nimos...');
    const minimoData = {
      type: 'income',
      category: 'teste',
      description: 'Teste m√≠nimo',
      amount: 10.00
    };
    
    console.log('üì§ Dados m√≠nimos:', minimoData);
    
    try {
      const minimoResponse = await axios.post(`${API_BASE_URL}/fluxo-caixa`, minimoData, { headers });
      console.log('‚úÖ M√≠nimo criado com sucesso:', minimoResponse.data);
    } catch (error) {
      console.log('‚ùå Erro no m√≠nimo:', {
        status: error.response?.status,
        data: error.response?.data,
        message: error.message
      });
    }
    
    // 4. Verificar se h√° fluxos existentes
    console.log('\n4Ô∏è‚É£ Verificando fluxos existentes...');
    try {
      const listResponse = await axios.get(`${API_BASE_URL}/fluxo-caixa`, { headers });
      console.log(`‚úÖ Fluxos encontrados: ${listResponse.data.data?.length || 0}`);
    } catch (error) {
      console.log('‚ùå Erro ao listar fluxos:', error.response?.data || error.message);
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.response?.data || error.message);
    
    if (error.response?.status === 401) {
      console.log('\nüí° Dica: Verifique se o token est√° correto');
    }
  }
}

// Executar teste
testQuickLaunch();