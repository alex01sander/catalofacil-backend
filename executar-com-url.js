const { Client } = require('pg');
const jwt = require('jsonwebtoken');
const fs = require('fs');
const readline = require('readline');

// Configura√ß√µes do novo admin
const FULANOSANDER_USER_ID = '12345678-1234-1234-1234-123456789abc';
const FULANOSANDER_EMAIL = 'fulanosander@gmail.com';
const FULANOSANDER_DOMAIN = 'demo.catalofacil.com.br';

// Interface para ler input do usu√°rio
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function question(prompt) {
    return new Promise((resolve) => {
        rl.question(prompt, resolve);
    });
}

async function executarComUrl() {
    console.log('üöÄ EXECUTANDO TUDO COM URL FORNECIDA!');
    console.log('=====================================\n');
    
    // Pedir DATABASE_URL
    console.log('üìã CONFIGURA√á√ÉO NECESS√ÅRIA:');
    console.log('Voc√™ precisa fornecer a URL do banco de produ√ß√£o.');
    console.log('');
    console.log('üí° ONDE ENCONTRAR:');
    console.log('- Railway: Dashboard > Seu projeto > Variables > DATABASE_URL');
    console.log('- Supabase: Settings > Database > Connection string');
    console.log('- Render: Dashboard > Seu servi√ßo > Environment > DATABASE_URL');
    console.log('- Heroku: Dashboard > Seu app > Settings > Config Vars > DATABASE_URL');
    console.log('');
    
    const databaseUrl = await question('üîó Cole aqui a DATABASE_URL: ');
    
    if (!databaseUrl || databaseUrl.trim() === '') {
        console.log('‚ùå URL n√£o fornecida!');
        rl.close();
        return;
    }
    
    // Pedir JWT_SECRET
    console.log('');
    const jwtSecret = await question('üîê Cole aqui o JWT_SECRET (ou pressione Enter para usar padr√£o): ');
    
    const finalJwtSecret = jwtSecret.trim() || 'chave_secreta_producao_123456789';
    
    console.log('');
    console.log('üîç CONFIGURA√á√ïES:');
    console.log('DATABASE_URL:', databaseUrl.substring(0, 20) + '...');
    console.log('JWT_SECRET:', finalJwtSecret.substring(0, 10) + '...');
    console.log('');
    
    const confirmacao = await question('‚úÖ Confirmar e executar? (s/n): ');
    
    if (confirmacao.toLowerCase() !== 's' && confirmacao.toLowerCase() !== 'sim') {
        console.log('‚ùå Opera√ß√£o cancelada!');
        rl.close();
        return;
    }
    
    // Configurar conex√£o com banco de produ√ß√£o
    const client = new Client({
        connectionString: databaseUrl,
        ssl: { rejectUnauthorized: false }
    });
    
    try {
        console.log('');
        console.log('üîó Conectando ao banco de produ√ß√£o...');
        await client.connect();
        console.log('‚úÖ Conectado ao banco de produ√ß√£o com sucesso!');
        console.log('');
        
        // 1. Criar usu√°rio admin
        console.log('1Ô∏è‚É£ Criando usu√°rio admin...');
        await client.query(`
            INSERT INTO auth.users (
                id, 
                email, 
                role, 
                created_at, 
                updated_at
            )
            VALUES ($1, $2, $3, NOW(), NOW())
            ON CONFLICT (id) DO UPDATE SET
                email = EXCLUDED.email,
                role = EXCLUDED.role,
                updated_at = NOW()
        `, [FULANOSANDER_USER_ID, FULANOSANDER_EMAIL, 'admin']);
        console.log('‚úÖ Usu√°rio admin criado');
        
        // 2. Adicionar na tabela de admins
        console.log('2Ô∏è‚É£ Adicionando na tabela de admins...');
        await client.query(`
            INSERT INTO public.controller_admins (user_id, email, created_at)
            VALUES ($1, $2, NOW())
            ON CONFLICT (user_id) DO NOTHING
        `, [FULANOSANDER_USER_ID, FULANOSANDER_EMAIL]);
        console.log('‚úÖ Admin adicionado na tabela controller_admins');
        
        // 3. Vincular dom√≠nio
        console.log('3Ô∏è‚É£ Vinculando dom√≠nio...');
        await client.query(`
            INSERT INTO public.domain_owners (
                id,
                domain,
                user_id,
                created_at,
                updated_at,
                domain_type
            )
            VALUES (gen_random_uuid(), $1, $2, NOW(), NOW(), 'domain')
            ON CONFLICT (domain) DO UPDATE SET
                user_id = EXCLUDED.user_id,
                updated_at = NOW()
        `, [FULANOSANDER_DOMAIN, FULANOSANDER_USER_ID]);
        console.log('‚úÖ Dom√≠nio vinculado');
        
        // 4. Criar loja
        console.log('4Ô∏è‚É£ Criando loja...');
        await client.query(`
            INSERT INTO public.stores (
                id,
                name,
                slug,
                domain,
                user_id,
                description,
                logo_url,
                banner_url,
                whatsapp_number,
                instagram_url,
                theme_color,
                created_at,
                updated_at
            )
            VALUES (
                gen_random_uuid(),
                'Demo Cat√°logo F√°cil',
                'demo-catalofacil',
                $1,
                $2,
                'Loja de demonstra√ß√£o do Cat√°logo F√°cil',
                'https://via.placeholder.com/150x50/007bff/ffffff?text=Demo+Cat√°logo+F√°cil',
                'https://via.placeholder.com/1200x300/007bff/ffffff?text=Banner+Demo+Cat√°logo+F√°cil',
                '5551999999999',
                'https://instagram.com/demo_catalofacil',
                '#007bff',
                NOW(),
                NOW()
            )
            ON CONFLICT (domain) DO UPDATE SET
                name = EXCLUDED.name,
                description = EXCLUDED.description,
                updated_at = NOW()
        `, [FULANOSANDER_DOMAIN, FULANOSANDER_USER_ID]);
        console.log('‚úÖ Loja criada');
        
        // 5. Configura√ß√µes da loja
        console.log('5Ô∏è‚É£ Configurando loja...');
        await client.query(`
            INSERT INTO public.store_settings (
                id,
                store_id,
                setting_key,
                setting_value,
                created_at,
                updated_at
            )
            SELECT 
                gen_random_uuid(),
                s.id,
                'store_enabled',
                'true',
                NOW(),
                NOW()
            FROM public.stores s 
            WHERE s.domain = $1
            ON CONFLICT (store_id, setting_key) DO UPDATE SET
                setting_value = EXCLUDED.setting_value,
                updated_at = NOW()
        `, [FULANOSANDER_DOMAIN]);
        console.log('‚úÖ Configura√ß√µes da loja criadas');
        
        // 6. Gerar token JWT
        console.log('6Ô∏è‚É£ Gerando token JWT...');
        const payload = {
            userId: FULANOSANDER_USER_ID,
            email: FULANOSANDER_EMAIL,
            role: 'admin',
            iat: Math.floor(Date.now() / 1000),
            exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // 24 horas
        };
        
        const token = jwt.sign(payload, finalJwtSecret);
        console.log('‚úÖ Token JWT gerado');
        
        // 7. Atualizar arquivo de teste
        console.log('7Ô∏è‚É£ Atualizando arquivo de teste...');
        const testFileContent = `const axios = require('axios');

// Configura√ß√µes do novo admin
const FULANOSANDER_USER_ID = '${FULANOSANDER_USER_ID}';
const FULANOSANDER_EMAIL = '${FULANOSANDER_EMAIL}';
const FULANOSANDER_TOKEN = '${token}';

// URL base da API
const API_BASE_URL = 'http://localhost:3000'; // Ajuste conforme necess√°rio

// Fun√ß√£o para gerar token de teste
function generateTestToken() {
    return FULANOSANDER_TOKEN;
}

// Testar rotas admin
async function testAdminRoutes() {
    const token = generateTestToken();
    
    console.log('üîê Testando login com novo admin...');
    console.log('üìß Email:', FULANOSANDER_EMAIL);
    console.log('üÜî User ID:', FULANOSANDER_USER_ID);
    console.log('');

    try {
        // Testar rota de produtos
        console.log('üì¶ Testando rota de produtos...');
        const productsResponse = await axios.get(\`\${API_BASE_URL}/admin/products\`, {
            headers: { Authorization: \`Bearer \${token}\` }
        });
        console.log('‚úÖ Produtos:', productsResponse.data.length, 'produtos encontrados');
        
        // Testar rota de categorias
        console.log('üìÇ Testando rota de categorias...');
        const categoriesResponse = await axios.get(\`\${API_BASE_URL}/admin/categories\`, {
            headers: { Authorization: \`Bearer \${token}\` }
        });
        console.log('‚úÖ Categorias:', categoriesResponse.data.length, 'categorias encontradas');
        
        // Testar rota de vendas
        console.log('üí∞ Testando rota de vendas...');
        const salesResponse = await axios.get(\`\${API_BASE_URL}/admin/sales\`, {
            headers: { Authorization: \`Bearer \${token}\` }
        });
        console.log('‚úÖ Vendas:', salesResponse.data.length, 'vendas encontradas');
        
        console.log('');
        console.log('üéØ TODOS OS TESTES PASSARAM! O novo admin est√° funcionando!');
        
    } catch (error) {
        console.error('‚ùå Erro nos testes:', error.response?.data || error.message);
    }
}

// Executar testes
testAdminRoutes();
`;

        fs.writeFileSync('test-alexsander-admin.js', testFileContent);
        console.log('‚úÖ Arquivo test-alexsander-admin.js atualizado');
        
        // 8. Verificar se tudo foi criado
        console.log('8Ô∏è‚É£ Verificando se tudo foi criado...');
        
        const userResult = await client.query(`
            SELECT email, role FROM auth.users WHERE email = $1
        `, [FULANOSANDER_EMAIL]);
        
        const domainResult = await client.query(`
            SELECT domain, user_id FROM public.domain_owners WHERE domain = $1
        `, [FULANOSANDER_DOMAIN]);
        
        const storeResult = await client.query(`
            SELECT name, domain FROM public.stores WHERE domain = $1
        `, [FULANOSANDER_DOMAIN]);
        
        console.log('‚úÖ Verifica√ß√£o conclu√≠da');
        
        // 9. Resumo final
        console.log('');
        console.log('üéØ TUDO EXECUTADO COM SUCESSO NO BANCO DE PRODU√á√ÉO!');
        console.log('==================================================');
        console.log('');
        console.log('üìß Email: fulanosander@gmail.com');
        console.log('üîë Senha: 123456');
        console.log('üÜî User ID: 12345678-1234-1234-1234-123456789abc');
        console.log('üåê Dom√≠nio: demo.catalofacil.com.br');
        console.log('');
        console.log('üîê TOKEN JWT:');
        console.log(token);
        console.log('');
        console.log('‚úÖ PR√ìXIMOS PASSOS:');
        console.log('1. Use este token no frontend para fazer login');
        console.log('2. Configure o DNS do dom√≠nio demo.catalofacil.com.br');
        console.log('3. Teste com: node test-alexsander-admin.js');
        console.log('');
        console.log('üìä RESUMO:');
        console.log('- Usu√°rio criado:', userResult.rows.length > 0 ? '‚úÖ' : '‚ùå');
        console.log('- Dom√≠nio vinculado:', domainResult.rows.length > 0 ? '‚úÖ' : '‚ùå');
        console.log('- Loja criada:', storeResult.rows.length > 0 ? '‚úÖ' : '‚ùå');
        
    } catch (error) {
        console.error('‚ùå Erro durante a execu√ß√£o:', error.message);
        
        if (error.code === '23505') {
            console.log('‚ÑπÔ∏è Erro de duplica√ß√£o - alguns dados j√° existem');
        }
        
        if (error.code === 'ECONNREFUSED') {
            console.log('‚ùå Erro de conex√£o com o banco');
            console.log('üìù Verifique se a DATABASE_URL est√° correta');
        }
        
        if (error.code === '42P01') {
            console.log('‚ùå Tabela n√£o encontrada');
            console.log('üìù Verifique se o banco est√° configurado corretamente');
        }
    } finally {
        await client.end();
        rl.close();
    }
}

// Executar
executarComUrl(); 