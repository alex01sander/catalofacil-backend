generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model users {
  id                String    @id @default(uuid())
  email             String?   @unique
  encrypted_password String?
  role              String?
  created_at        DateTime? @default(now())
  updated_at        DateTime? @default(now())
  
  // Relacionamentos
  customers         customers[]
  credit_accounts   credit_accounts[]
  credit_transactions credit_transactions[]
  cash_flow         cash_flow[]
  categories        categories[]
  products          products[]
  sales             sales[]
  orders            orders[]
  stores            stores[]
}

model customers {
  id             String    @id @default(uuid())
  store_owner_id String
  name           String
  email          String?
  phone          String?
  address        String?
  created_at     DateTime? @default(now())
  store_id       String?
  
  // Relacionamentos
  users          users     @relation(fields: [store_owner_id], references: [id], onDelete: Cascade)
  stores         stores?   @relation(fields: [store_id], references: [id], onDelete: Cascade)
  orders         orders[]
  credit_accounts credit_accounts[]
}

model credit_accounts {
  id                String   @id @default(uuid())
  customer_id       String?  // Relacionamento com customers
  customer_name     String
  customer_phone    String   @unique
  customer_address  String?
  total_debt        Float    @default(0)
  credit_limit      Float    @default(0)
  status            String   @default("active")
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())
  user_id           String
  store_id          String?
  
  // Relacionamentos
  credit_transactions credit_transactions[]
  customers         customers? @relation(fields: [customer_id], references: [id], onDelete: SetNull)
  users             users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  stores            stores?   @relation(fields: [store_id], references: [id], onDelete: Cascade)
}

model credit_transactions {
  id                String   @id @default(uuid())
  credit_account_id String
  user_id           String
  type              String   // 'debito' ou 'pagamento'
  amount            Float
  description       String?
  created_at        DateTime @default(now())
  
  // Relacionamentos
  credit_accounts   credit_accounts @relation(fields: [credit_account_id], references: [id], onDelete: Cascade)
  users             users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model cash_flow {
  id             String   @id @default(uuid())
  user_id        String
  store_id       String?
  type           String   // 'entrada' ou 'saida'
  category       String
  description    String
  amount         Float
  date           DateTime @default(now())
  payment_method String?  @default("cash")
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())
  
  // Relacionamentos
  users          users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  stores         stores?   @relation(fields: [store_id], references: [id], onDelete: Cascade)
}

model categories {
  id         String     @id @default(uuid())
  user_id    String
  name       String
  description String?
  image      String?
  created_at DateTime?  @default(now())
  updated_at DateTime?  @default(now())
  store_id   String?
  
  // Relacionamentos
  users      users      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  stores     stores?    @relation(fields: [store_id], references: [id], onDelete: Cascade)
  products   products[]
}

model products {
  id          String        @id @default(uuid())
  user_id     String
  category_id String?
  name        String   @unique
  description String?
  price       Float         @default(0)
  stock       Int           @default(0)
  image       String?
  created_at  DateTime?     @default(now())
  updated_at  DateTime?     @default(now())
  store_id    String?
  
  // Relacionamentos
  users       users         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  categories  categories?   @relation(fields: [category_id], references: [id], onDelete: SetNull)
  stores      stores?       @relation(fields: [store_id], references: [id], onDelete: Cascade)
  order_items order_items[]
  sales       sales[]
}

model sales {
  id           String   @id @default(uuid())
  user_id      String
  store_id     String?
  product_name String
  quantity     Int      @default(1)
  unit_price   Float
  total_price  Float
  sale_date    DateTime @default(now())
  status       String   @default("completed")
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())
  
  // Relacionamentos
  users        users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  stores       stores?   @relation(fields: [store_id], references: [id], onDelete: Cascade)
  products     products? @relation(fields: [product_name], references: [name])
}

model stores {
  id              String       @id @default(uuid())
  name            String
  slug            String       @unique
  domain          String?      @unique
  user_id         String
  description     String?
  logo_url        String?
  banner_url      String?
  theme_color     String?      @default("#2980B9")
  created_at      DateTime?    @default(now())
  updated_at      DateTime?    @default(now())
  
  // Relacionamentos
  users           users        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  customers       customers[]
  credit_accounts credit_accounts[]
  cash_flow       cash_flow[]
  categories      categories[]
  products        products[]
  sales           sales[]
  orders          orders[]
}

model orders {
  id             String        @id @default(uuid())
  store_owner_id String
  customer_id    String?
  customer_name  String?
  customer_phone String?
  total_amount   Float         @default(0)
  status         String?       @default("pending")
  created_at     DateTime?     @default(now())
  updated_at     DateTime?     @default(now())
  store_id       String?
  
  // Relacionamentos
  users          users         @relation(fields: [store_owner_id], references: [id], onDelete: Cascade)
  customers      customers?    @relation(fields: [customer_id], references: [id], onDelete: SetNull)
  stores         stores?       @relation(fields: [store_id], references: [id], onDelete: Cascade)
  order_items    order_items[]
}

model order_items {
  id          String   @id @default(uuid())
  order_id    String
  product_id  String
  quantity    Int      @default(1)
  unit_price  Float
  total_price Float
  created_at  DateTime? @default(now())
  
  // Relacionamentos
  orders      orders   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  products    products @relation(fields: [product_id], references: [id], onDelete: Cascade)
}
