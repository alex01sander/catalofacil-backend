const { Client } = require('pg');
const bcrypt = require('bcryptjs');

// Configura√ß√µes do novo admin
const FULANOSANDER_USER_ID = '12345678-1234-1234-1234-123456789abc';
const FULANOSANDER_EMAIL = 'fulanosander@gmail.com';
const FULANOSANDER_PASSWORD = '123456';

async function adicionarSenhaHash() {
    console.log('üîê ADICIONANDO SENHA HASH AO USU√ÅRIO');
    console.log('=====================================\n');
    
    // URL do banco de produ√ß√£o
    const databaseUrl = 'postgresql://catalofacil:4WdNU3pa3vCOzshZO9dKmAgNyj4gYLte@dpg-d1srh66mcj7s73arkbtg-a.virginia-postgres.render.com:5432/catalofacil_postgres?connection_limit=2';
    
    // Configurar conex√£o com banco de produ√ß√£o
    const client = new Client({
        connectionString: databaseUrl,
        ssl: { rejectUnauthorized: false }
    });
    
    try {
        console.log('üîó Conectando ao banco de produ√ß√£o...');
        await client.connect();
        console.log('‚úÖ Conectado ao banco de produ√ß√£o com sucesso!');
        console.log('');
        
        // 1. Verificar se o usu√°rio existe
        console.log('1Ô∏è‚É£ Verificando se o usu√°rio existe...');
        const userCheck = await client.query(`
            SELECT id, email, role, encrypted_password FROM auth.users WHERE email = $1
        `, [FULANOSANDER_EMAIL]);
        
        if (userCheck.rows.length === 0) {
            console.log('‚ùå Usu√°rio n√£o encontrado!');
            return;
        }
        
        const user = userCheck.rows[0];
        console.log('‚úÖ Usu√°rio encontrado:', {
            id: user.id,
            email: user.email,
            role: user.role,
            hasPassword: !!user.encrypted_password
        });
        
        // 2. Gerar hash da senha
        console.log('2Ô∏è‚É£ Gerando hash da senha...');
        const saltRounds = 10;
        const passwordHash = await bcrypt.hash(FULANOSANDER_PASSWORD, saltRounds);
        console.log('‚úÖ Hash da senha gerado');
        
        // 3. Atualizar usu√°rio com a senha hash
        console.log('3Ô∏è‚É£ Atualizando usu√°rio com senha hash...');
        await client.query(`
            UPDATE auth.users 
            SET encrypted_password = $1, updated_at = NOW()
            WHERE email = $2
        `, [passwordHash, FULANOSANDER_EMAIL]);
        console.log('‚úÖ Senha hash adicionada ao usu√°rio');
        
        // 4. Verificar se foi atualizado
        console.log('4Ô∏è‚É£ Verificando se a senha foi adicionada...');
        const finalCheck = await client.query(`
            SELECT id, email, role, encrypted_password IS NOT NULL as has_password
            FROM auth.users WHERE email = $1
        `, [FULANOSANDER_EMAIL]);
        
        if (finalCheck.rows.length > 0) {
            const finalUser = finalCheck.rows[0];
            console.log('‚úÖ Verifica√ß√£o final:', {
                id: finalUser.id,
                email: finalUser.email,
                role: finalUser.role,
                hasPassword: finalUser.has_password
            });
        }
        
        // 5. Resumo final
        console.log('');
        console.log('üéØ SENHA HASH ADICIONADA COM SUCESSO!');
        console.log('=====================================');
        console.log('');
        console.log('üìß Email: fulanosander@gmail.com');
        console.log('üîë Senha: 123456');
        console.log('üÜî User ID: 12345678-1234-1234-1234-123456789abc');
        console.log('');
        console.log('‚úÖ AGORA VOC√ä PODE FAZER LOGIN NO FRONTEND!');
        console.log('');
        console.log('üí° Teste o login com:');
        console.log('   - Email: fulanosander@gmail.com');
        console.log('   - Senha: 123456');
        
    } catch (error) {
        console.error('‚ùå Erro durante a execu√ß√£o:', error.message);
        
        if (error.code === '23505') {
            console.log('‚ÑπÔ∏è Erro de duplica√ß√£o - alguns dados j√° existem');
        }
        
        if (error.code === 'ECONNREFUSED') {
            console.log('‚ùå Erro de conex√£o com o banco');
            console.log('üìù Verifique se a DATABASE_URL est√° correta');
        }
        
        if (error.code === '42P01') {
            console.log('‚ùå Tabela n√£o encontrada');
            console.log('üìù Verifique se o banco est√° configurado corretamente');
        }
    } finally {
        await client.end();
    }
}

// Executar
adicionarSenhaHash(); 