const axios = require('axios');

async function testarRotaController() {
    console.log('üîç TESTANDO ROTA /CONTROLLER ESPECIFICAMENTE');
    console.log('============================================\n');
    
    const urls = [
        'https://demo.catalofacil.com.br/controller',
        'https://demo.catalofacil.com.br/api/controller',
        'https://demo.catalofacil.com.br/controller/',
        'https://catalofacil-backend.onrender.com/controller',
        'https://catalofacil-backend.onrender.com/api/controller'
    ];
    
    console.log('üîç Testando diferentes varia√ß√µes da rota controller...\n');
    
    for (const url of urls) {
        try {
            console.log(`üì° Testando: ${url}`);
            const response = await axios.get(url, {
                timeout: 10000,
                validateStatus: () => true
            });
            
            const contentType = response.headers['content-type'] || '';
            const isHtml = contentType.includes('text/html');
            const isJson = contentType.includes('application/json');
            
            if (response.status === 200) {
                if (isHtml) {
                    console.log(`‚úÖ ${response.status} - P√°gina HTML (Frontend)`);
                    console.log(`   üìÑ Tamanho: ${response.data.length} caracteres`);
                    
                    // Verificar se √© a p√°gina de acesso negado
                    if (response.data.includes('Acesso Negado') || response.data.includes('Access Denied')) {
                        console.log(`   üö´ Cont√©m mensagem de "Acesso Negado"`);
                    }
                    
                    if (response.data.includes('controller')) {
                        console.log(`   üéØ Cont√©m refer√™ncias ao controller`);
                    }
                } else if (isJson) {
                    console.log(`‚úÖ ${response.status} - API JSON (Backend)`);
                    console.log(`   üìä Resposta: ${JSON.stringify(response.data).substring(0, 100)}...`);
                } else {
                    console.log(`‚úÖ ${response.status} - Outro tipo de conte√∫do`);
                }
            } else if (response.status === 401) {
                console.log(`üîí ${response.status} - Precisa de autentica√ß√£o`);
            } else if (response.status === 404) {
                console.log(`‚ùå ${response.status} - Rota n√£o encontrada`);
                if (isJson && response.data.error) {
                    console.log(`   üìä Erro: ${response.data.error}`);
                }
            } else {
                console.log(`‚ö†Ô∏è ${response.status} - Status inesperado`);
            }
            
        } catch (error) {
            if (error.code === 'ECONNREFUSED') {
                console.log(`‚ùå Erro de conex√£o - Servidor n√£o responde`);
            } else if (error.code === 'ENOTFOUND') {
                console.log(`‚ùå Dom√≠nio n√£o encontrado`);
            } else {
                console.log(`‚ùå Erro: ${error.message}`);
            }
        }
        
        console.log('');
    }
    
    console.log('üéØ DIAGN√ìSTICO DA ROTA /CONTROLLER:');
    console.log('====================================');
    console.log('');
    console.log('üìä PROBLEMAS IDENTIFICADOS:');
    console.log('1. Frontend pode n√£o ter sido atualizado com as novas configura√ß√µes');
    console.log('2. Rota /controller pode estar retornando HTML em vez de verificar autentica√ß√£o');
    console.log('3. Frontend pode estar fazendo chamadas para URLs erradas');
    console.log('');
    console.log('üîß SOLU√á√ïES NECESS√ÅRIAS:');
    console.log('=======================');
    console.log('1. VERIFICAR SE O FRONTEND FOI DEPLOYADO:');
    console.log('   - O frontend precisa ser rebuildado e redeployado');
    console.log('   - As configura√ß√µes da API precisam ser aplicadas');
    console.log('');
    console.log('2. VERIFICAR A CONFIGURA√á√ÉO DO FRONTEND:');
    console.log('   - Arquivo .env.production deve ter: VITE_API_URL=https://catalofacil-backend.onrender.com');
    console.log('   - vercel.json deve ter o proxy configurado');
    console.log('   - src/constants/api.ts deve usar a URL correta');
    console.log('');
    console.log('3. VERIFICAR SE O DEPLOY FOI FEITO:');
    console.log('   - O Vercel/Netlify pode n√£o ter aplicado as mudan√ßas');
    console.log('   - Pode ser necess√°rio for√ßar um novo deploy');
    console.log('');
    console.log('üí° PR√ìXIMOS PASSOS:');
    console.log('==================');
    console.log('1. Confirmar que o frontend foi redeployado');
    console.log('2. Verificar se as configura√ß√µes foram aplicadas');
    console.log('3. Testar novamente ap√≥s o deploy');
    console.log('4. Se persistir, verificar logs do frontend');
}

// Executar
testarRotaController(); 