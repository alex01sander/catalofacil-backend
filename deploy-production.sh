#!/bin/bash

echo "üöÄ Script de Deploy para Produ√ß√£o - Sistema Cat√°logo"
echo "=================================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    error "package.json n√£o encontrado. Execute este script na raiz do projeto."
    exit 1
fi

# Verificar vari√°veis de ambiente essenciais
log "Verificando vari√°veis de ambiente..."
if [ -z "$DATABASE_URL" ]; then
    error "DATABASE_URL n√£o configurada"
    exit 1
fi

if [ -z "$JWT_SECRET" ]; then
    error "JWT_SECRET n√£o configurada"
    exit 1
fi

# Verificar Node.js e npm
log "Verificando vers√µes..."
node --version
npm --version

# Backup do banco (opcional)
if [ "$BACKUP_ENABLED" = "true" ]; then
    log "Fazendo backup do banco de dados..."
    mkdir -p backups
    pg_dump $DATABASE_URL > "backups/backup_$(date +%Y%m%d_%H%M%S).sql" || warning "Backup falhou"
fi

# Limpar node_modules e reinstalar
log "Limpando depend√™ncias antigas..."
rm -rf node_modules package-lock.json

# Instalar depend√™ncias
log "Instalando depend√™ncias..."
npm ci --production=false

# Executar linting (se dispon√≠vel)
if npm run lint --silent > /dev/null 2>&1; then
    log "Executando linting..."
    npm run lint
fi

# Gerar cliente Prisma
log "Gerando cliente Prisma..."
npx prisma generate

# Executar migra√ß√µes
log "Executando migra√ß√µes do banco..."
npx prisma migrate deploy

# Build da aplica√ß√£o
log "Compilando aplica√ß√£o..."
npm run build

# Verificar se o build foi bem-sucedido
if [ ! -d "dist" ]; then
    error "Build falhou - diret√≥rio dist n√£o encontrado"
    exit 1
fi

# Testar conex√£o com banco
log "Testando conex√£o com banco..."
node -e "
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
prisma.\$connect()
  .then(() => {
    console.log('‚úÖ Conex√£o com banco OK');
    process.exit(0);
  })
  .catch((e) => {
    console.error('‚ùå Erro na conex√£o:', e);
    process.exit(1);
  });
" || { error "Falha na conex√£o com banco"; exit 1; }

# Verificar se o servidor inicia
log "Testando inicializa√ß√£o do servidor..."
timeout 10s node dist/index.js &
SERVER_PID=$!
sleep 5

if ps -p $SERVER_PID > /dev/null; then
    log "‚úÖ Servidor iniciou com sucesso"
    kill $SERVER_PID
else
    error "‚ùå Servidor falhou ao iniciar"
    exit 1
fi

# Executar health check
log "Executando health check..."
if command -v curl &> /dev/null; then
    timeout 10s node dist/index.js &
    SERVER_PID=$!
    sleep 3
    
    if curl -f http://localhost:${PORT:-3000}/health > /dev/null 2>&1; then
        log "‚úÖ Health check passou"
    else
        warning "‚ö†Ô∏è Health check falhou"
    fi
    
    kill $SERVER_PID 2>/dev/null
fi

# Limpar arquivos desnecess√°rios para produ√ß√£o
log "Limpando arquivos desnecess√°rios..."
rm -rf src/
rm -rf node_modules/@types/
rm -rf .git/ # apenas se for um deploy final

# Otimizar node_modules para produ√ß√£o
log "Instalando apenas depend√™ncias de produ√ß√£o..."
npm ci --production=true

log "üéâ Deploy para produ√ß√£o conclu√≠do com sucesso!"
log "üìã Pr√≥ximos passos:"
echo "   1. Configure as vari√°veis de ambiente no servidor"
echo "   2. Configure o proxy reverso (nginx)"
echo "   3. Configure SSL/TLS"
echo "   4. Configure monitoramento"
echo "   5. Configure backup autom√°tico"
echo ""
info "Para iniciar o servidor: npm start"
info "Para iniciar em produ√ß√£o: NODE_ENV=production npm run start" 